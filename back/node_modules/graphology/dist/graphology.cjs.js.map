{"version":3,"file":"graphology.cjs.js","sources":["../src/utils.js","../src/errors.js","../src/data.js","../src/attributes/nodes.js","../src/attributes/edges.js","../src/iteration/edges.js","../src/iteration/neighbors.js","../src/iteration/adjacency.js","../src/serialization.js","../src/graph.js","../src/classes.js","../src/endpoint.cjs.js"],"sourcesContent":["/**\n * Graphology Utilities\n * =====================\n *\n * Collection of helpful functions used by the implementation.\n */\n\n/**\n * Object.assign-like polyfill.\n *\n * @param  {object} target       - First object.\n * @param  {object} [...objects] - Objects to merge.\n * @return {object}\n */\nfunction assignPolyfill() {\n  const target = arguments[0];\n\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    if (!arguments[i]) continue;\n\n    for (const k in arguments[i]) target[k] = arguments[i][k];\n  }\n\n  return target;\n}\n\nlet assign = assignPolyfill;\n\nif (typeof Object.assign === 'function') assign = Object.assign;\n\nexport {assign};\n\n/**\n * Function returning the first matching edge for given path.\n * Note: this function does not check the existence of source & target. This\n * must be performed by the caller.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @param  {any}    target - Target node.\n * @param  {string} type   - Type of the edge (mixed, directed or undirected).\n * @return {string|null}\n */\nexport function getMatchingEdge(graph, source, target, type) {\n  const sourceData = graph._nodes.get(source);\n\n  let edge = null;\n\n  if (!sourceData) return edge;\n\n  if (type === 'mixed') {\n    edge =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]);\n  } else if (type === 'directed') {\n    edge = sourceData.out && sourceData.out[target];\n  } else {\n    edge = sourceData.undirected && sourceData.undirected[target];\n  }\n\n  return edge;\n}\n\n/**\n * Checks whether the given value is a plain object.\n *\n * @param  {mixed}   value - Target value.\n * @return {boolean}\n */\nexport function isPlainObject(value) {\n  // NOTE: as per https://github.com/graphology/graphology/issues/149\n  // this function has been loosened not to reject object instances\n  // coming from other JavaScript contexts. It has also been chosen\n  // not to improve it to avoid obvious false positives and avoid\n  // taking a performance hit. People should really use TypeScript\n  // if they want to avoid feeding subtly irrelvant attribute objects.\n  return typeof value === 'object' && value !== null;\n}\n\n/**\n * Checks whether the given object is empty.\n *\n * @param  {object}  o - Target Object.\n * @return {boolean}\n */\nexport function isEmpty(o) {\n  let k;\n\n  for (k in o) return false;\n\n  return true;\n}\n\n/**\n * Creates a \"private\" property for the given member name by concealing it\n * using the `enumerable` option.\n *\n * @param {object} target - Target object.\n * @param {string} name   - Member name.\n */\nexport function privateProperty(target, name, value) {\n  Object.defineProperty(target, name, {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value\n  });\n}\n\n/**\n * Creates a read-only property for the given member name & the given getter.\n *\n * @param {object}   target - Target object.\n * @param {string}   name   - Member name.\n * @param {mixed}    value  - The attached getter or fixed value.\n */\nexport function readOnlyProperty(target, name, value) {\n  const descriptor = {\n    enumerable: true,\n    configurable: true\n  };\n\n  if (typeof value === 'function') {\n    descriptor.get = value;\n  } else {\n    descriptor.value = value;\n    descriptor.writable = false;\n  }\n\n  Object.defineProperty(target, name, descriptor);\n}\n\n/**\n * Returns whether the given object constitute valid hints.\n *\n * @param {object} hints - Target object.\n */\nexport function validateHints(hints) {\n  if (!isPlainObject(hints)) return false;\n\n  if (hints.attributes && !Array.isArray(hints.attributes)) return false;\n\n  return true;\n}\n\n/**\n * Creates a function generating incremental ids for edges.\n *\n * @return {function}\n */\nexport function incrementalIdStartingFromRandomByte() {\n  let i = Math.floor(Math.random() * 256) & 0xff;\n\n  return () => {\n    return i++;\n  };\n}\n","/**\n * Graphology Custom Errors\n * =========================\n *\n * Defining custom errors for ease of use & easy unit tests across\n * implementations (normalized typology rather than relying on error\n * messages to check whether the correct error was found).\n */\nexport class GraphError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'GraphError';\n    this.message = message;\n  }\n}\n\nexport class InvalidArgumentsGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentsGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(\n        this,\n        InvalidArgumentsGraphError.prototype.constructor\n      );\n  }\n}\n\nexport class NotFoundGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotFoundGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, NotFoundGraphError.prototype.constructor);\n  }\n}\n\nexport class UsageGraphError extends GraphError {\n  constructor(message) {\n    super(message);\n    this.name = 'UsageGraphError';\n\n    // This is V8 specific to enhance stack readability\n    if (typeof Error.captureStackTrace === 'function')\n      Error.captureStackTrace(this, UsageGraphError.prototype.constructor);\n  }\n}\n","/**\n * Graphology Internal Data Classes\n * =================================\n *\n * Internal classes hopefully reduced to structs by engines & storing\n * necessary information for nodes & edges.\n *\n * Note that those classes don't rely on the `class` keyword to avoid some\n * cruft introduced by most of ES2015 transpilers.\n */\n\n/**\n * MixedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function MixedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nMixedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n  this.undirected = {};\n};\n\n/**\n * DirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function DirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nDirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.inDegree = 0;\n  this.outDegree = 0;\n  this.directedLoops = 0;\n\n  // Indices\n  this.in = {};\n  this.out = {};\n};\n\n/**\n * UndirectedNodeData class.\n *\n * @constructor\n * @param {string} string     - The node's key.\n * @param {object} attributes - Node's attributes.\n */\nexport function UndirectedNodeData(key, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n\n  this.clear();\n}\n\nUndirectedNodeData.prototype.clear = function () {\n  // Degrees\n  this.undirectedDegree = 0;\n  this.undirectedLoops = 0;\n\n  // Indices\n  this.undirected = {};\n};\n\n/**\n * EdgeData class.\n *\n * @constructor\n * @param {boolean} undirected   - Whether the edge is undirected.\n * @param {string}  string       - The edge's key.\n * @param {string}  source       - Source of the edge.\n * @param {string}  target       - Target of the edge.\n * @param {object}  attributes   - Edge's attributes.\n */\nexport function EdgeData(undirected, key, source, target, attributes) {\n  // Attributes\n  this.key = key;\n  this.attributes = attributes;\n  this.undirected = undirected;\n\n  // Extremities\n  this.source = source;\n  this.target = target;\n}\n\nEdgeData.prototype.attach = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  // Handling source\n  this.source[outKey][target] = this;\n\n  if (this.undirected && source === target) return;\n\n  // Handling target\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.attachMulti = function () {\n  let outKey = 'out';\n  let inKey = 'in';\n\n  const source = this.source.key;\n  const target = this.target.key;\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Handling source\n  const adj = this.source[outKey];\n  const head = adj[target];\n\n  if (typeof head === 'undefined') {\n    adj[target] = this;\n\n    // Self-loop optimization\n    if (!(this.undirected && source === target)) {\n      // Handling target\n      this.target[inKey][source] = this;\n    }\n\n    return;\n  }\n\n  // Prepending to doubly-linked list\n  head.previous = this;\n  this.next = head;\n\n  // Pointing to new head\n  // NOTE: use mutating swap later to avoid lookup?\n  adj[target] = this;\n  this.target[inKey][source] = this;\n};\n\nEdgeData.prototype.detach = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  delete this.source[outKey][target];\n\n  // No-op delete in case of undirected self-loop\n  delete this.target[inKey][source];\n};\n\nEdgeData.prototype.detachMulti = function () {\n  const source = this.source.key;\n  const target = this.target.key;\n\n  let outKey = 'out';\n  let inKey = 'in';\n\n  if (this.undirected) outKey = inKey = 'undirected';\n\n  // Deleting from doubly-linked list\n  if (this.previous === undefined) {\n    // We are dealing with the head\n\n    // Should we delete the adjacency entry because it is now empty?\n    if (this.next === undefined) {\n      delete this.source[outKey][target];\n\n      // No-op delete in case of undirected self-loop\n      delete this.target[inKey][source];\n    } else {\n      // Detaching\n      this.next.previous = undefined;\n\n      // NOTE: could avoid the lookups by creating a #.become mutating method\n      this.source[outKey][target] = this.next;\n\n      // No-op delete in case of undirected self-loop\n      this.target[inKey][source] = this.next;\n    }\n  } else {\n    // We are dealing with another list node\n    this.previous.next = this.next;\n\n    // If not last\n    if (this.next !== undefined) {\n      this.next.previous = this.previous;\n    }\n  }\n};\n","/**\n * Graphology Node Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject} from '../utils';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\nconst NODE = 0;\nconst SOURCE = 1;\nconst TARGET = 2;\nconst OPPOSITE = 3;\n\nfunction findRelevantNodeData(\n  graph,\n  method,\n  mode,\n  nodeOrEdge,\n  nameOrEdge,\n  add1,\n  add2\n) {\n  let nodeData, edgeData, arg1, arg2;\n\n  nodeOrEdge = '' + nodeOrEdge;\n\n  if (mode === NODE) {\n    nodeData = graph._nodes.get(nodeOrEdge);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" node in the graph.`\n      );\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  } else if (mode === OPPOSITE) {\n    nameOrEdge = '' + nameOrEdge;\n\n    edgeData = graph._edges.get(nameOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nameOrEdge}\" edge in the graph.`\n      );\n\n    const source = edgeData.source.key;\n    const target = edgeData.target.key;\n\n    if (nodeOrEdge === source) {\n      nodeData = edgeData.target;\n    } else if (nodeOrEdge === target) {\n      nodeData = edgeData.source;\n    } else {\n      throw new NotFoundGraphError(\n        `Graph.${method}: the \"${nodeOrEdge}\" node is not attached to the \"${nameOrEdge}\" edge (${source}, ${target}).`\n      );\n    }\n\n    arg1 = add1;\n    arg2 = add2;\n  } else {\n    edgeData = graph._edges.get(nodeOrEdge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.${method}: could not find the \"${nodeOrEdge}\" edge in the graph.`\n      );\n\n    if (mode === SOURCE) {\n      nodeData = edgeData.source;\n    } else {\n      nodeData = edgeData.target;\n    }\n\n    arg1 = nameOrEdge;\n    arg2 = add1;\n  }\n\n  return [nodeData, arg1, arg2];\n}\n\nfunction attachNodeAttributeGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes[name];\n  };\n}\n\nfunction attachNodeAttributesGetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge) {\n    const [data] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge\n    );\n\n    return data.attributes;\n  };\n}\n\nfunction attachNodeAttributeChecker(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\nfunction attachNodeAttributeSetter(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, value] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1, add2) {\n    const [data, name, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1,\n      add2\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    const attributes = data.attributes;\n    const value = updater(attributes[name]);\n\n    attributes[name] = value;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributeRemover(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, name] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesReplacer(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesMerger(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, attributes] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\nfunction attachNodeAttributesUpdater(Class, method, mode) {\n  Class.prototype[method] = function (nodeOrEdge, nameOrEdge, add1) {\n    const [data, updater] = findRelevantNodeData(\n      this,\n      method,\n      mode,\n      nodeOrEdge,\n      nameOrEdge,\n      add1\n    );\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('nodeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst NODE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachNodeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachNodeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachNodeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachNodeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachNodeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachNodeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachNodeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachNodeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachNodeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachNodeAttributesMethods(Graph) {\n  NODE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For nodes\n    attacher(Graph, name('Node'), NODE);\n\n    // For sources\n    attacher(Graph, name('Source'), SOURCE);\n\n    // For targets\n    attacher(Graph, name('Target'), TARGET);\n\n    // For opposites\n    attacher(Graph, name('Opposite'), OPPOSITE);\n  });\n}\n","/**\n * Graphology Edge Attributes methods\n * ===================================\n */\nimport {assign, isPlainObject, getMatchingEdge} from '../utils';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from '../errors';\n\n/**\n * Attach an attribute getter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeGetter(Class, method, type) {\n  /**\n   * Get the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {mixed}          - The attribute's value.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes[name];\n  };\n}\n\n/**\n * Attach an attributes getter method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributesGetter(Class, method, type) {\n  /**\n   * Retrieves all the target element's attributes.\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   *\n   * @return {object}          - The element's attributes.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 1) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + arguments[1];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes;\n  };\n}\n\n/**\n * Attach an attribute checker method onto the provided class.\n *\n * @param {function} Class       - Target class.\n * @param {string}   method      - Method name.\n * @param {string}   type        - Type of the edge to find.\n */\nfunction attachEdgeAttributeChecker(Class, method, type) {\n  /**\n   * Checks whether the desired attribute is set for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    return data.attributes.hasOwnProperty(name);\n  };\n}\n\n/**\n * Attach an attribute setter method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeSetter(Class, method, type) {\n  /**\n   * Set the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   * @param  {mixed}  value   - New attribute value.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, value) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      value = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    data.attributes[name] = value;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeUpdater(Class, method, type) {\n  /**\n   * Update the desired attribute for the given element (node or edge) using\n   * the provided function.\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {string}   name    - Attribute's name.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 3) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n      updater = arguments[3];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: updater should be a function.`\n      );\n\n    data.attributes[name] = updater(data.attributes[name]);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'set',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute remover method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributeRemover(Class, method, type) {\n  /**\n   * Remove the desired attribute for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element - Target element.\n   * @param  {string} name    - Attribute's name.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source - Source element.\n   * @param  {any}     target - Target element.\n   * @param  {string}  name   - Attribute's name.\n   *\n   * @return {Graph}          - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, name) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element;\n      const target = '' + name;\n\n      name = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    delete data.attributes[name];\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'remove',\n      attributes: data.attributes,\n      name\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute replacer method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesReplacer(Class, method, type) {\n  /**\n   * Replace the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - New attributes.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - New attributes.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    data.attributes = attributes;\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'replace',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute merger method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesMerger(Class, method, type) {\n  /**\n   * Merge the attributes for the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}    element    - Target element.\n   * @param  {object} attributes - Attributes to merge.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}     source     - Source element.\n   * @param  {any}     target     - Target element.\n   * @param  {object}  attributes - Attributes to merge.\n   *\n   * @return {Graph}              - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, attributes) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + attributes;\n\n      attributes = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided attributes are not a plain object.`\n      );\n\n    assign(data.attributes, attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'merge',\n      attributes: data.attributes,\n      data: attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * Attach an attribute updater method onto the provided class.\n *\n * @param {function} Class         - Target class.\n * @param {string}   method        - Method name.\n * @param {string}   type          - Type of the edge to find.\n */\nfunction attachEdgeAttributesUpdater(Class, method, type) {\n  /**\n   * Update the attributes of the given element (node or edge).\n   *\n   * Arity 2:\n   * @param  {any}      element - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * Arity 3 (only for edges):\n   * @param  {any}      source  - Source element.\n   * @param  {any}      target  - Target element.\n   * @param  {function} updater - Updater function.\n   *\n   * @return {Graph}            - Returns itself for chaining.\n   *\n   * @throws {Error} - Will throw if too many arguments are provided.\n   * @throws {Error} - Will throw if any of the elements is not found.\n   */\n  Class.prototype[method] = function (element, updater) {\n    let data;\n\n    if (this.type !== 'mixed' && type !== 'mixed' && type !== this.type)\n      throw new UsageGraphError(\n        `Graph.${method}: cannot find this type of edges in your ${this.type} graph.`\n      );\n\n    if (arguments.length > 2) {\n      if (this.multi)\n        throw new UsageGraphError(\n          `Graph.${method}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`\n        );\n\n      const source = '' + element,\n        target = '' + updater;\n\n      updater = arguments[2];\n\n      data = getMatchingEdge(this, source, target, type);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find an edge for the given path (\"${source}\" - \"${target}\").`\n        );\n    } else {\n      if (type !== 'mixed')\n        throw new UsageGraphError(\n          `Graph.${method}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`\n        );\n\n      element = '' + element;\n      data = this._edges.get(element);\n\n      if (!data)\n        throw new NotFoundGraphError(\n          `Graph.${method}: could not find the \"${element}\" edge in the graph.`\n        );\n    }\n\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.${method}: provided updater is not a function.`\n      );\n\n    data.attributes = updater(data.attributes);\n\n    // Emitting\n    this.emit('edgeAttributesUpdated', {\n      key: data.key,\n      type: 'update',\n      attributes: data.attributes\n    });\n\n    return this;\n  };\n}\n\n/**\n * List of methods to attach.\n */\nconst EDGE_ATTRIBUTES_METHODS = [\n  {\n    name: element => `get${element}Attribute`,\n    attacher: attachEdgeAttributeGetter\n  },\n  {\n    name: element => `get${element}Attributes`,\n    attacher: attachEdgeAttributesGetter\n  },\n  {\n    name: element => `has${element}Attribute`,\n    attacher: attachEdgeAttributeChecker\n  },\n  {\n    name: element => `set${element}Attribute`,\n    attacher: attachEdgeAttributeSetter\n  },\n  {\n    name: element => `update${element}Attribute`,\n    attacher: attachEdgeAttributeUpdater\n  },\n  {\n    name: element => `remove${element}Attribute`,\n    attacher: attachEdgeAttributeRemover\n  },\n  {\n    name: element => `replace${element}Attributes`,\n    attacher: attachEdgeAttributesReplacer\n  },\n  {\n    name: element => `merge${element}Attributes`,\n    attacher: attachEdgeAttributesMerger\n  },\n  {\n    name: element => `update${element}Attributes`,\n    attacher: attachEdgeAttributesUpdater\n  }\n];\n\n/**\n * Attach every attributes-related methods to a Graph class.\n *\n * @param {function} Graph - Target class.\n */\nexport default function attachEdgeAttributesMethods(Graph) {\n  EDGE_ATTRIBUTES_METHODS.forEach(function ({name, attacher}) {\n    // For edges\n    attacher(Graph, name('Edge'), 'mixed');\n\n    // For directed edges\n    attacher(Graph, name('DirectedEdge'), 'directed');\n\n    // For undirected edges\n    attacher(Graph, name('UndirectedEdge'), 'undirected');\n  });\n}\n","/**\n * Graphology Edge Iteration\n * ==========================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's edges.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\nimport take from 'obliterator/take';\n\nimport {InvalidArgumentsGraphError, NotFoundGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst EDGES_ITERATION = [\n  {\n    name: 'edges',\n    type: 'mixed'\n  },\n  {\n    name: 'inEdges',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outEdges',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundEdges',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundEdges',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedEdges',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedEdges',\n    type: 'undirected'\n  }\n];\n\n/**\n * Function iterating over edges from the given object to match one of them.\n *\n * @param {object}   object   - Target object.\n * @param {function} callback - Function to call.\n */\nfunction forEachSimple(breakable, object, callback, avoid) {\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    const edgeData = object[k];\n\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n  }\n\n  return;\n}\n\nfunction forEachMulti(breakable, object, callback, avoid) {\n  let edgeData, source, target;\n\n  let shouldBreak = false;\n\n  for (const k in object) {\n    if (k === avoid) continue;\n\n    edgeData = object[k];\n\n    do {\n      source = edgeData.source;\n      target = edgeData.target;\n\n      shouldBreak = callback(\n        edgeData.key,\n        edgeData.attributes,\n        source.key,\n        target.key,\n        source.attributes,\n        target.attributes,\n        edgeData.undirected\n      );\n\n      if (breakable && shouldBreak) return edgeData.key;\n\n      edgeData = edgeData.next;\n    } while (edgeData !== undefined);\n  }\n\n  return;\n}\n\n/**\n * Function returning an iterator over edges from the given object.\n *\n * @param  {object}   object - Target object.\n * @return {Iterator}\n */\nfunction createIterator(object, avoid) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let edgeData;\n  let i = 0;\n\n  return new Iterator(function next() {\n    do {\n      if (!edgeData) {\n        if (i >= l) return {done: true};\n\n        const k = keys[i++];\n\n        if (k === avoid) {\n          edgeData = undefined;\n          continue;\n        }\n\n        edgeData = object[k];\n      } else {\n        edgeData = edgeData.next;\n      }\n    } while (!edgeData);\n\n    return {\n      done: false,\n      value: {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      }\n    };\n  });\n}\n\n/**\n * Function iterating over the egdes from the object at given key to match\n * one of them.\n *\n * @param {object}   object   - Target object.\n * @param {mixed}    k        - Neighbor key.\n * @param {function} callback - Callback to use.\n */\nfunction forEachForKeySimple(breakable, object, k, callback) {\n  const edgeData = object[k];\n\n  if (!edgeData) return;\n\n  const sourceData = edgeData.source;\n  const targetData = edgeData.target;\n\n  if (\n    callback(\n      edgeData.key,\n      edgeData.attributes,\n      sourceData.key,\n      targetData.key,\n      sourceData.attributes,\n      targetData.attributes,\n      edgeData.undirected\n    ) &&\n    breakable\n  )\n    return edgeData.key;\n}\n\nfunction forEachForKeyMulti(breakable, object, k, callback) {\n  let edgeData = object[k];\n\n  if (!edgeData) return;\n\n  let shouldBreak = false;\n\n  do {\n    shouldBreak = callback(\n      edgeData.key,\n      edgeData.attributes,\n      edgeData.source.key,\n      edgeData.target.key,\n      edgeData.source.attributes,\n      edgeData.target.attributes,\n      edgeData.undirected\n    );\n\n    if (breakable && shouldBreak) return edgeData.key;\n\n    edgeData = edgeData.next;\n  } while (edgeData !== undefined);\n\n  return;\n}\n\n/**\n * Function returning an iterator over the egdes from the object at given key.\n *\n * @param  {object}   object   - Target object.\n * @param  {mixed}    k        - Neighbor key.\n * @return {Iterator}\n */\nfunction createIteratorForKey(object, k) {\n  let edgeData = object[k];\n\n  if (edgeData.next !== undefined) {\n    return new Iterator(function () {\n      if (!edgeData) return {done: true};\n\n      const value = {\n        edge: edgeData.key,\n        attributes: edgeData.attributes,\n        source: edgeData.source.key,\n        target: edgeData.target.key,\n        sourceAttributes: edgeData.source.attributes,\n        targetAttributes: edgeData.target.attributes,\n        undirected: edgeData.undirected\n      };\n\n      edgeData = edgeData.next;\n\n      return {\n        done: false,\n        value\n      };\n    });\n  }\n\n  return Iterator.of({\n    edge: edgeData.key,\n    attributes: edgeData.attributes,\n    source: edgeData.source.key,\n    target: edgeData.target.key,\n    sourceAttributes: edgeData.source.attributes,\n    targetAttributes: edgeData.target.attributes,\n    undirected: edgeData.undirected\n  });\n}\n\n/**\n * Function creating an array of edges for the given type.\n *\n * @param  {Graph}   graph - Target Graph instance.\n * @param  {string}  type  - Type of edges to retrieve.\n * @return {array}         - Array of edges.\n */\nfunction createEdgeArray(graph, type) {\n  if (graph.size === 0) return [];\n\n  if (type === 'mixed' || type === graph.type) {\n    if (typeof Array.from === 'function')\n      return Array.from(graph._edges.keys());\n\n    return take(graph._edges.keys(), graph._edges.size);\n  }\n\n  const size =\n    type === 'undirected' ? graph.undirectedSize : graph.directedSize;\n\n  const list = new Array(size),\n    mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  let i = 0;\n  let step, data;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (data.undirected === mask) list[i++] = data.key;\n  }\n\n  return list;\n}\n\n/**\n * Function iterating over a graph's edges using a callback to match one of\n * them.\n *\n * @param  {Graph}    graph    - Target Graph instance.\n * @param  {string}   type     - Type of edges to retrieve.\n * @param  {function} callback - Function to call.\n */\nfunction forEachEdge(breakable, graph, type, callback) {\n  if (graph.size === 0) return;\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  let step, data;\n  let shouldBreak = false;\n  const iterator = graph._edges.values();\n\n  while (((step = iterator.next()), step.done !== true)) {\n    data = step.value;\n\n    if (shouldFilter && data.undirected !== mask) continue;\n\n    const {key, attributes, source, target} = data;\n\n    shouldBreak = callback(\n      key,\n      attributes,\n      source.key,\n      target.key,\n      source.attributes,\n      target.attributes,\n      data.undirected\n    );\n\n    if (breakable && shouldBreak) return key;\n  }\n\n  return;\n}\n\n/**\n * Function creating an iterator of edges for the given type.\n *\n * @param  {Graph}    graph - Target Graph instance.\n * @param  {string}   type  - Type of edges to retrieve.\n * @return {Iterator}\n */\nfunction createEdgeIterator(graph, type) {\n  if (graph.size === 0) return Iterator.empty();\n\n  const shouldFilter = type !== 'mixed' && type !== graph.type;\n  const mask = type === 'undirected';\n\n  const iterator = graph._edges.values();\n\n  return new Iterator(function next() {\n    let step, data;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      step = iterator.next();\n\n      if (step.done) return step;\n\n      data = step.value;\n\n      if (shouldFilter && data.undirected !== mask) continue;\n\n      break;\n    }\n\n    const value = {\n      edge: data.key,\n      attributes: data.attributes,\n      source: data.source.key,\n      target: data.target.key,\n      sourceAttributes: data.source.attributes,\n      targetAttributes: data.target.attributes,\n      undirected: data.undirected\n    };\n\n    return {value, done: false};\n  });\n}\n\n/**\n * Function iterating over a node's edges using a callback to match one of them.\n *\n * @param  {boolean}  multi     - Whether the graph is multi or not.\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Function to call.\n */\nfunction forEachEdgeForNode(\n  breakable,\n  multi,\n  type,\n  direction,\n  nodeData,\n  callback\n) {\n  const fn = multi ? forEachMulti : forEachSimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = fn(breakable, nodeData.in, callback);\n\n      if (breakable && found) return found;\n    }\n    if (direction !== 'in') {\n      found = fn(\n        breakable,\n        nodeData.out,\n        callback,\n        !direction ? nodeData.key : undefined\n      );\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    found = fn(breakable, nodeData.undirected, callback);\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given type & the given node.\n *\n * @param  {boolean} multi     - Whether the graph is multi or not.\n * @param  {string}  type      - Type of edges to retrieve.\n * @param  {string}  direction - In or out?\n * @param  {any}     nodeData  - Target node's data.\n * @return {array}             - Array of edges.\n */\nfunction createEdgeArrayForNode(multi, type, direction, nodeData) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForNode(false, multi, type, direction, nodeData, function (key) {\n    edges.push(key);\n  });\n\n  return edges;\n}\n\n/**\n * Function iterating over a node's edges using a callback.\n *\n * @param  {string}   type      - Type of edges to retrieve.\n * @param  {string}   direction - In or out?\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createEdgeIteratorForNode(type, direction, nodeData) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out' && typeof nodeData.in !== 'undefined')\n      iterator = chain(iterator, createIterator(nodeData.in));\n    if (direction !== 'in' && typeof nodeData.out !== 'undefined')\n      iterator = chain(\n        iterator,\n        createIterator(nodeData.out, !direction ? nodeData.key : undefined)\n      );\n  }\n\n  if (type !== 'directed' && typeof nodeData.undirected !== 'undefined') {\n    iterator = chain(iterator, createIterator(nodeData.undirected));\n  }\n\n  return iterator;\n}\n\n/**\n * Function iterating over edges for the given path using a callback to match\n * one of them.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction forEachEdgeForPath(\n  breakable,\n  type,\n  multi,\n  direction,\n  sourceData,\n  target,\n  callback\n) {\n  const fn = multi ? forEachForKeyMulti : forEachForKeySimple;\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (typeof sourceData.in !== 'undefined' && direction !== 'out') {\n      found = fn(breakable, sourceData.in, target, callback);\n\n      if (breakable && found) return found;\n    }\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      (direction || sourceData.key !== target)\n    ) {\n      found = fn(breakable, sourceData.out, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  if (type !== 'directed') {\n    if (typeof sourceData.undirected !== 'undefined') {\n      found = fn(breakable, sourceData.undirected, target, callback);\n\n      if (breakable && found) return found;\n    }\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {boolean}  multi      - Whether the graph is multi.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {any}      target     - Target node.\n * @return {array}               - Array of edges.\n */\nfunction createEdgeArrayForPath(type, multi, direction, sourceData, target) {\n  const edges = []; // TODO: possibility to know size beforehand or factorize with map\n\n  forEachEdgeForPath(\n    false,\n    type,\n    multi,\n    direction,\n    sourceData,\n    target,\n    function (key) {\n      edges.push(key);\n    }\n  );\n\n  return edges;\n}\n\n/**\n * Function returning an iterator over edges for the given path.\n *\n * @param  {string}   type       - Type of edges to retrieve.\n * @param  {string}   direction  - In or out?\n * @param  {NodeData} sourceData - Source node's data.\n * @param  {string}   target     - Target node.\n * @param  {function} callback   - Function to call.\n */\nfunction createEdgeIteratorForPath(type, direction, sourceData, target) {\n  let iterator = Iterator.empty();\n\n  if (type !== 'undirected') {\n    if (\n      typeof sourceData.in !== 'undefined' &&\n      direction !== 'out' &&\n      target in sourceData.in\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.in, target));\n\n    if (\n      typeof sourceData.out !== 'undefined' &&\n      direction !== 'in' &&\n      target in sourceData.out &&\n      (direction || sourceData.key !== target)\n    )\n      iterator = chain(iterator, createIteratorForKey(sourceData.out, target));\n  }\n\n  if (type !== 'directed') {\n    if (\n      typeof sourceData.undirected !== 'undefined' &&\n      target in sourceData.undirected\n    )\n      iterator = chain(\n        iterator,\n        createIteratorForKey(sourceData.undirected, target)\n      );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching an edge array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain edges.\n   *\n   * Arity 0: Return all the relevant edges.\n   *\n   * Arity 1: Return all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Return the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    if (!arguments.length) return createEdgeArray(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeArrayForNode(\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData\n      );\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeArrayForPath(\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching a edge callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(false, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        false,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${forEachName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        false,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${forEachName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function mapping the graph's relevant edges by applying the given\n   * callback.\n   *\n   * Arity 1: Map all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Map all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Map the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    let result;\n\n    // We know the result length beforehand\n    if (args.length === 0) {\n      let length = 0;\n\n      if (type !== 'directed') length += this.undirectedSize;\n      if (type !== 'undirected') length += this.directedSize;\n\n      result = new Array(length);\n\n      let i = 0;\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result[i++] = callback(e, ea, s, t, sa, ta, u);\n      });\n    }\n\n    // We don't know the result length beforehand\n    // TODO: we can in some instances of simple graphs, knowing degree\n    else {\n      result = [];\n\n      args.push((e, ea, s, t, sa, ta, u) => {\n        result.push(callback(e, ea, s, t, sa, ta, u));\n      });\n    }\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function filtering the graph's relevant edges using the provided predicate\n   * function.\n   *\n   * Arity 1: Filter all the relevant edges.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 2: Filter all of a node's relevant edges.\n   * @param  {any}      node      - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * Arity 3: Filter the relevant edges across the given path.\n   * @param  {any}      source    - Source node.\n   * @param  {any}      target    - Target node.\n   * @param  {function} predicate - Predicate to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    const result = [];\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      if (callback(e, ea, s, t, sa, ta, u)) result.push(e);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return result;\n  };\n\n  /**\n   * Function reducing the graph's relevant edges using the provided accumulator\n   * function.\n   *\n   * Arity 1: Reduce all the relevant edges.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 2: Reduce all of a node's relevant edges.\n   * @param  {any}      node         - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * Arity 3: Reduce the relevant edges across the given path.\n   * @param  {any}      source       - Source node.\n   * @param  {any}      target       - Target node.\n   * @param  {function} accumulator  - Accumulator to use.\n   * @param  {any}      initialValue - Initial value.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function () {\n    let args = Array.prototype.slice.call(arguments);\n\n    if (args.length < 2 || args.length > 4) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: invalid number of arguments (expecting 2, 3 or 4 and got ${args.length}).`\n      );\n    }\n\n    if (\n      typeof args[args.length - 1] === 'function' &&\n      typeof args[args.length - 2] !== 'function'\n    ) {\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n    }\n\n    let callback;\n    let initialValue;\n\n    if (args.length === 2) {\n      callback = args[0];\n      initialValue = args[1];\n      args = [];\n    } else if (args.length === 3) {\n      callback = args[1];\n      initialValue = args[2];\n      args = [args[0]];\n    } else if (args.length === 4) {\n      callback = args[2];\n      initialValue = args[3];\n      args = [args[0], args[1]];\n    }\n\n    let accumulator = initialValue;\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      accumulator = callback(accumulator, e, ea, s, t, sa, ta, u);\n    });\n\n    this[forEachName].apply(this, args);\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable edge callback iterator method to the Graph\n * prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindEdge(Class, description) {\n  const {name, type, direction} = description;\n\n  const findEdgeName = 'find' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over the graph's relevant edges in order to match\n   * one of them using the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findEdgeName] = function (source, target, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return false;\n\n    if (arguments.length === 1) {\n      callback = source;\n      return forEachEdge(true, this, type, callback);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      callback = target;\n\n      const nodeData = this._nodes.get(source);\n\n      if (typeof nodeData === 'undefined')\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      // TODO: maybe attach the sub method to the instance dynamically?\n      return forEachEdgeForNode(\n        true,\n        this.multi,\n        type === 'mixed' ? this.type : type,\n        direction,\n        nodeData,\n        callback\n      );\n    }\n\n    if (arguments.length === 3) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${findEdgeName}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return forEachEdgeForPath(\n        true,\n        type,\n        this.multi,\n        direction,\n        sourceData,\n        target,\n        callback\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${findEdgeName}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`\n    );\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether any one of them matches the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[someName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over the graph's relevant edges in order to assert\n   * whether all of them matche the provided predicate function.\n   *\n   * Arity 1: Iterate over all the relevant edges.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 2: Iterate over all of a node's relevant edges.\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * Arity 3: Iterate over the relevant edges across the given path.\n   * @param  {any}      source   - Source node.\n   * @param  {any}      target   - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + name[0].toUpperCase() + name.slice(1, -1);\n\n  Class.prototype[everyName] = function () {\n    const args = Array.prototype.slice.call(arguments);\n    const callback = args.pop();\n\n    args.push((e, ea, s, t, sa, ta, u) => {\n      return !callback(e, ea, s, t, sa, ta, u);\n    });\n\n    const found = this[findEdgeName].apply(this, args);\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching an edge iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachEdgeIteratorCreator(Class, description) {\n  const {name: originalName, type, direction} = description;\n\n  const name = originalName.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over the graph's edges.\n   *\n   * Arity 0: Iterate over all the relevant edges.\n   *\n   * Arity 1: Iterate over all of a node's relevant edges.\n   * @param  {any}   node   - Target node.\n   *\n   * Arity 2: Iterate over the relevant edges across the given path.\n   * @param  {any}   source - Source node.\n   * @param  {any}   target - Target node.\n   *\n   * @return {array|number} - The edges or the number of edges.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[name] = function (source, target) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    if (!arguments.length) return createEdgeIterator(this, type);\n\n    if (arguments.length === 1) {\n      source = '' + source;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}: could not find the \"${source}\" node in the graph.`\n        );\n\n      // Iterating over a node's edges\n      return createEdgeIteratorForNode(type, direction, sourceData);\n    }\n\n    if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      const sourceData = this._nodes.get(source);\n\n      if (!sourceData)\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${source}\" source node in the graph.`\n        );\n\n      if (!this._nodes.has(target))\n        throw new NotFoundGraphError(\n          `Graph.${name}:  could not find the \"${target}\" target node in the graph.`\n        );\n\n      // Iterating over the edges between source & target\n      return createEdgeIteratorForPath(type, direction, sourceData, target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`\n    );\n  };\n}\n\n/**\n * Function attaching every edge iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachEdgeIterationMethods(Graph) {\n  EDGES_ITERATION.forEach(description => {\n    attachEdgeArrayCreator(Graph, description);\n    attachForEachEdge(Graph, description);\n    attachFindEdge(Graph, description);\n    attachEdgeIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Neighbor Iteration\n * ==============================\n *\n * Attaching some methods to the Graph class to be able to iterate over\n * neighbors.\n */\nimport Iterator from 'obliterator/iterator';\nimport chain from 'obliterator/chain';\n\nimport {NotFoundGraphError, InvalidArgumentsGraphError} from '../errors';\n\n/**\n * Definitions.\n */\nconst NEIGHBORS_ITERATION = [\n  {\n    name: 'neighbors',\n    type: 'mixed'\n  },\n  {\n    name: 'inNeighbors',\n    type: 'directed',\n    direction: 'in'\n  },\n  {\n    name: 'outNeighbors',\n    type: 'directed',\n    direction: 'out'\n  },\n  {\n    name: 'inboundNeighbors',\n    type: 'mixed',\n    direction: 'in'\n  },\n  {\n    name: 'outboundNeighbors',\n    type: 'mixed',\n    direction: 'out'\n  },\n  {\n    name: 'directedNeighbors',\n    type: 'directed'\n  },\n  {\n    name: 'undirectedNeighbors',\n    type: 'undirected'\n  }\n];\n\n/**\n * Helpers.\n */\nfunction CompositeSetWrapper() {\n  this.A = null;\n  this.B = null;\n}\n\nCompositeSetWrapper.prototype.wrap = function (set) {\n  if (this.A === null) this.A = set;\n  else if (this.B === null) this.B = set;\n};\n\nCompositeSetWrapper.prototype.has = function (key) {\n  if (this.A !== null && key in this.A) return true;\n  if (this.B !== null && key in this.B) return true;\n  return false;\n};\n\n/**\n * Function iterating over the given node's relevant neighbors to match\n * one of them using a predicated function.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @param  {function} callback  - Callback to use.\n */\nfunction forEachInObjectOnce(breakable, visited, nodeData, object, callback) {\n  for (const k in object) {\n    const edgeData = object[k];\n\n    const sourceData = edgeData.source;\n    const targetData = edgeData.target;\n\n    const neighborData = sourceData === nodeData ? targetData : sourceData;\n\n    if (visited && visited.has(neighborData.key)) continue;\n\n    const shouldBreak = callback(neighborData.key, neighborData.attributes);\n\n    if (breakable && shouldBreak) return neighborData.key;\n  }\n\n  return;\n}\n\nfunction forEachNeighbor(breakable, type, direction, nodeData, callback) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.undirected,\n        callback\n      );\n\n    if (typeof direction === 'string')\n      return forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData[direction],\n        callback\n      );\n  }\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  let found;\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      found = forEachInObjectOnce(\n        breakable,\n        null,\n        nodeData,\n        nodeData.in,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.in);\n    }\n    if (direction !== 'in') {\n      found = forEachInObjectOnce(\n        breakable,\n        visited,\n        nodeData,\n        nodeData.out,\n        callback\n      );\n\n      if (breakable && found) return found;\n\n      visited.wrap(nodeData.out);\n    }\n  }\n\n  if (type !== 'directed') {\n    found = forEachInObjectOnce(\n      breakable,\n      visited,\n      nodeData,\n      nodeData.undirected,\n      callback\n    );\n\n    if (breakable && found) return found;\n  }\n\n  return;\n}\n\n/**\n * Function creating an array of relevant neighbors for the given node.\n *\n * @param  {string}       type      - Type of neighbors.\n * @param  {string}       direction - Direction.\n * @param  {any}          nodeData  - Target node's data.\n * @return {Array}                  - The list of neighbors.\n */\nfunction createNeighborArrayForNode(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected') return Object.keys(nodeData.undirected);\n\n    if (typeof direction === 'string') return Object.keys(nodeData[direction]);\n  }\n\n  const neighbors = [];\n\n  forEachNeighbor(false, type, direction, nodeData, function (key) {\n    neighbors.push(key);\n  });\n\n  return neighbors;\n}\n\n/**\n * Function returning an iterator over the given node's relevant neighbors.\n *\n * @param  {string}   type      - Type of neighbors.\n * @param  {string}   direction - Direction.\n * @param  {any}      nodeData  - Target node's data.\n * @return {Iterator}\n */\nfunction createDedupedObjectIterator(visited, nodeData, object) {\n  const keys = Object.keys(object);\n  const l = keys.length;\n\n  let i = 0;\n\n  return new Iterator(function next() {\n    let neighborData = null;\n\n    do {\n      if (i >= l) {\n        if (visited) visited.wrap(object);\n        return {done: true};\n      }\n\n      const edgeData = object[keys[i++]];\n\n      const sourceData = edgeData.source;\n      const targetData = edgeData.target;\n\n      neighborData = sourceData === nodeData ? targetData : sourceData;\n\n      if (visited && visited.has(neighborData.key)) {\n        neighborData = null;\n        continue;\n      }\n    } while (neighborData === null);\n\n    return {\n      done: false,\n      value: {neighbor: neighborData.key, attributes: neighborData.attributes}\n    };\n  });\n}\n\nfunction createNeighborIterator(type, direction, nodeData) {\n  // If we want only undirected or in or out, we can roll some optimizations\n  if (type !== 'mixed') {\n    if (type === 'undirected')\n      return createDedupedObjectIterator(null, nodeData, nodeData.undirected);\n\n    if (typeof direction === 'string')\n      return createDedupedObjectIterator(null, nodeData, nodeData[direction]);\n  }\n\n  let iterator = Iterator.empty();\n\n  // Else we need to keep a set of neighbors not to return duplicates\n  // We cheat by querying the other adjacencies\n  const visited = new CompositeSetWrapper();\n\n  if (type !== 'undirected') {\n    if (direction !== 'out') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.in)\n      );\n    }\n    if (direction !== 'in') {\n      iterator = chain(\n        iterator,\n        createDedupedObjectIterator(visited, nodeData, nodeData.out)\n      );\n    }\n  }\n\n  if (type !== 'directed') {\n    iterator = chain(\n      iterator,\n      createDedupedObjectIterator(visited, nodeData, nodeData.undirected)\n    );\n  }\n\n  return iterator;\n}\n\n/**\n * Function attaching a neighbors array creator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborArrayCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  /**\n   * Function returning an array of certain neighbors.\n   *\n   * @param  {any}   node   - Target node.\n   * @return {array} - The neighbors of neighbors.\n   *\n   * @throws {Error} - Will throw if node is not found in the graph.\n   */\n  Class.prototype[name] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return [];\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${name}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborArrayForNode(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachForEachNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const forEachName = 'forEach' + name[0].toUpperCase() + name.slice(1, -1);\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[forEachName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${forEachName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    forEachNeighbor(\n      false,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function mapping the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const mapName = 'map' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[mapName] = function (node, callback) {\n    // TODO: optimize when size is known beforehand\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      result.push(callback(n, a));\n    });\n\n    return result;\n  };\n\n  /**\n   * Function filtering the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const filterName = 'filter' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[filterName] = function (node, callback) {\n    const result = [];\n\n    this[forEachName](node, (n, a) => {\n      if (callback(n, a)) result.push(n);\n    });\n\n    return result;\n  };\n\n  /**\n   * Function reducing the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const reduceName = 'reduce' + name[0].toUpperCase() + name.slice(1);\n\n  Class.prototype[reduceName] = function (node, callback, initialValue) {\n    if (arguments.length < 3)\n      throw new InvalidArgumentsGraphError(\n        `Graph.${reduceName}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`\n      );\n\n    let accumulator = initialValue;\n\n    this[forEachName](node, (n, a) => {\n      accumulator = callback(accumulator, n, a);\n    });\n\n    return accumulator;\n  };\n}\n\n/**\n * Function attaching a breakable neighbors callback iterator method to the\n * Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachFindNeighbor(Class, description) {\n  const {name, type, direction} = description;\n\n  const capitalizedSingular = name[0].toUpperCase() + name.slice(1, -1);\n\n  const findName = 'find' + capitalizedSingular;\n\n  /**\n   * Function iterating over all the relevant neighbors using a callback.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {undefined}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[findName] = function (node, callback) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type) return;\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${findName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return forEachNeighbor(\n      true,\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData,\n      callback\n    );\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if any of them\n   * matches the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const someName = 'some' + capitalizedSingular;\n\n  Class.prototype[someName] = function (node, callback) {\n    const found = this[findName](node, callback);\n\n    if (found) return true;\n\n    return false;\n  };\n\n  /**\n   * Function iterating over all the relevant neighbors to find if all of them\n   * matche the given predicate.\n   *\n   * @param  {any}      node     - Target node.\n   * @param  {function} callback - Callback to use.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  const everyName = 'every' + capitalizedSingular;\n\n  Class.prototype[everyName] = function (node, callback) {\n    const found = this[findName](node, (n, a) => {\n      return !callback(n, a);\n    });\n\n    if (found) return false;\n\n    return true;\n  };\n}\n\n/**\n * Function attaching a neighbors callback iterator method to the Graph prototype.\n *\n * @param {function} Class       - Target class.\n * @param {object}   description - Method description.\n */\nfunction attachNeighborIteratorCreator(Class, description) {\n  const {name, type, direction} = description;\n\n  const iteratorName = name.slice(0, -1) + 'Entries';\n\n  /**\n   * Function returning an iterator over all the relevant neighbors.\n   *\n   * @param  {any}      node     - Target node.\n   * @return {Iterator}\n   *\n   * @throws {Error} - Will throw if there are too many arguments.\n   */\n  Class.prototype[iteratorName] = function (node) {\n    // Early termination\n    if (type !== 'mixed' && this.type !== 'mixed' && type !== this.type)\n      return Iterator.empty();\n\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (typeof nodeData === 'undefined')\n      throw new NotFoundGraphError(\n        `Graph.${iteratorName}: could not find the \"${node}\" node in the graph.`\n      );\n\n    // Here, we want to iterate over a node's relevant neighbors\n    return createNeighborIterator(\n      type === 'mixed' ? this.type : type,\n      direction,\n      nodeData\n    );\n  };\n}\n\n/**\n * Function attaching every neighbor iteration method to the Graph class.\n *\n * @param {function} Graph - Graph class.\n */\nexport default function attachNeighborIterationMethods(Graph) {\n  NEIGHBORS_ITERATION.forEach(description => {\n    attachNeighborArrayCreator(Graph, description);\n    attachForEachNeighbor(Graph, description);\n    attachFindNeighbor(Graph, description);\n    attachNeighborIteratorCreator(Graph, description);\n  });\n}\n","/**\n * Graphology Adjacency Iteration\n * ===============================\n *\n * Attaching some methods to the Graph class to be able to iterate over a\n * graph's adjacency.\n */\n\n/**\n * Function iterating over a simple graph's adjacency using a callback.\n *\n * @param {boolean}  breakable         - Can we break?\n * @param {boolean}  assymetric        - Whether to emit undirected edges only once.\n * @param {boolean}  disconnectedNodes - Whether to emit disconnected nodes.\n * @param {Graph}    graph             - Target Graph instance.\n * @param {callback} function          - Iteration callback.\n */\nexport function forEachAdjacency(\n  breakable,\n  assymetric,\n  disconnectedNodes,\n  graph,\n  callback\n) {\n  const iterator = graph._nodes.values();\n\n  const type = graph.type;\n\n  let step, sourceData, neighbor, adj, edgeData, targetData, shouldBreak;\n\n  while (((step = iterator.next()), step.done !== true)) {\n    let hasEdges = false;\n\n    sourceData = step.value;\n\n    if (type !== 'undirected') {\n      adj = sourceData.out;\n\n      for (neighbor in adj) {\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (type !== 'directed') {\n      adj = sourceData.undirected;\n\n      for (neighbor in adj) {\n        if (assymetric && sourceData.key > neighbor) continue;\n\n        edgeData = adj[neighbor];\n\n        do {\n          targetData = edgeData.target;\n\n          if (targetData.key !== neighbor) targetData = edgeData.source;\n\n          hasEdges = true;\n          shouldBreak = callback(\n            sourceData.key,\n            targetData.key,\n            sourceData.attributes,\n            targetData.attributes,\n            edgeData.key,\n            edgeData.attributes,\n            edgeData.undirected\n          );\n\n          if (breakable && shouldBreak) return edgeData;\n\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (disconnectedNodes && !hasEdges) {\n      shouldBreak = callback(\n        sourceData.key,\n        null,\n        sourceData.attributes,\n        null,\n        null,\n        null,\n        null\n      );\n\n      if (breakable && shouldBreak) return null;\n    }\n  }\n\n  return;\n}\n","/**\n * Graphology Serialization Utilities\n * ===================================\n *\n * Collection of functions used by the graph serialization schemes.\n */\nimport {InvalidArgumentsGraphError} from './errors';\nimport {assign, isPlainObject, isEmpty} from './utils';\n\n/**\n * Formats internal node data into a serialized node.\n *\n * @param  {any}    key  - The node's key.\n * @param  {object} data - Internal node's data.\n * @return {array}       - The serialized node.\n */\nexport function serializeNode(key, data) {\n  const serialized = {key};\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  return serialized;\n}\n\n/**\n * Formats internal edge data into a serialized edge.\n *\n * @param  {string} type - The graph's type.\n * @param  {any}    key  - The edge's key.\n * @param  {object} data - Internal edge's data.\n * @return {array}       - The serialized edge.\n */\nexport function serializeEdge(type, key, data) {\n  const serialized = {\n    key,\n    source: data.source.key,\n    target: data.target.key\n  };\n\n  if (!isEmpty(data.attributes))\n    serialized.attributes = assign({}, data.attributes);\n\n  if (type === 'mixed' && data.undirected) serialized.undirected = true;\n\n  return serialized;\n}\n\n/**\n * Checks whether the given value is a serialized node.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedNode(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized node. A serialized node should be a plain object with at least a \"key\" property.'\n    );\n\n  if (!('key' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized node is missing its key.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n}\n\n/**\n * Checks whether the given value is a serialized edge.\n *\n * @param  {mixed} value - Target value.\n * @return {string|null}\n */\nexport function validateSerializedEdge(value) {\n  if (!isPlainObject(value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a \"source\" & \"target\" property.'\n    );\n\n  if (!('source' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its source.'\n    );\n\n  if (!('target' in value))\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: serialized edge is missing its target.'\n    );\n\n  if (\n    'attributes' in value &&\n    (!isPlainObject(value.attributes) || value.attributes === null)\n  )\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.'\n    );\n\n  if ('undirected' in value && typeof value.undirected !== 'boolean')\n    throw new InvalidArgumentsGraphError(\n      'Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.'\n    );\n}\n","/* eslint no-nested-ternary: 0 */\n/**\n * Graphology Reference Implementation\n * ====================================\n *\n * Reference implementation of the graphology specs.\n */\nimport {EventEmitter} from 'events';\nimport Iterator from 'obliterator/iterator';\nimport take from 'obliterator/take';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\nimport {\n  MixedNodeData,\n  DirectedNodeData,\n  UndirectedNodeData,\n  EdgeData\n} from './data';\n\nimport attachNodeAttributesMethods from './attributes/nodes';\nimport attachEdgeAttributesMethods from './attributes/edges';\nimport attachEdgeIterationMethods from './iteration/edges';\nimport attachNeighborIterationMethods from './iteration/neighbors';\nimport {forEachAdjacency} from './iteration/adjacency';\n\nimport {\n  serializeNode,\n  serializeEdge,\n  validateSerializedNode,\n  validateSerializedEdge\n} from './serialization';\n\nimport {\n  assign,\n  getMatchingEdge,\n  isPlainObject,\n  privateProperty,\n  readOnlyProperty,\n  incrementalIdStartingFromRandomByte,\n  validateHints\n} from './utils';\n\n/**\n * Constants.\n */\nconst INSTANCE_ID = incrementalIdStartingFromRandomByte();\n\n/**\n * Enums.\n */\nconst TYPES = new Set(['directed', 'undirected', 'mixed']);\n\nconst EMITTER_PROPS = new Set([\n  'domain',\n  '_events',\n  '_eventsCount',\n  '_maxListeners'\n]);\n\nconst EDGE_ADD_METHODS = [\n  {\n    name: verb => `${verb}Edge`,\n    generateKey: true\n  },\n  {\n    name: verb => `${verb}DirectedEdge`,\n    generateKey: true,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdge`,\n    generateKey: true,\n    type: 'undirected'\n  },\n  {\n    name: verb => `${verb}EdgeWithKey`\n  },\n  {\n    name: verb => `${verb}DirectedEdgeWithKey`,\n    type: 'directed'\n  },\n  {\n    name: verb => `${verb}UndirectedEdgeWithKey`,\n    type: 'undirected'\n  }\n];\n\n/**\n * Default options.\n */\nconst DEFAULTS = {\n  allowSelfLoops: true,\n  multi: false,\n  type: 'mixed'\n};\n\n/**\n * Abstract functions used by the Graph class for various methods.\n */\n\n/**\n * Internal method used to add a node to the given graph\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {any}     node            - The node's key.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {NodeData}                - Created node data.\n */\nfunction addNode(graph, node, attributes) {\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.addNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // String coercion\n  node = '' + node;\n  attributes = attributes || {};\n\n  if (graph._nodes.has(node))\n    throw new UsageGraphError(\n      `Graph.addNode: the \"${node}\" node already exist in the graph.`\n    );\n\n  const data = new graph.NodeDataClass(node, attributes);\n\n  // Adding the node to internal register\n  graph._nodes.set(node, data);\n\n  // Emitting\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Same as the above but without sanity checks because we call this in contexts\n * where necessary checks were already done.\n */\nfunction unsafeAddNode(graph, node, attributes) {\n  const data = new graph.NodeDataClass(node, attributes);\n\n  graph._nodes.set(node, data);\n\n  graph.emit('nodeAdded', {\n    key: node,\n    attributes\n  });\n\n  return data;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction addEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes && !isPlainObject(attributes))\n    throw new InvalidArgumentsGraphError(\n      `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n    );\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n  attributes = attributes || {};\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  const sourceData = graph._nodes.get(source),\n    targetData = graph._nodes.get(target);\n\n  if (!sourceData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: source node \"${source}\" not found.`\n    );\n\n  if (!targetData)\n    throw new NotFoundGraphError(\n      `Graph.${name}: target node \"${target}\" not found.`\n    );\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  // Here, we might have a source / target collision\n  if (\n    !graph.multi &&\n    (undirected\n      ? typeof sourceData.undirected[target] !== 'undefined'\n      : typeof sourceData.out[target] !== 'undefined')\n  ) {\n    throw new UsageGraphError(\n      `Graph.${name}: an edge linking \"${source}\" to \"${target}\" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`\n    );\n  }\n\n  // Storing some data\n  const edgeData = new EdgeData(\n    undirected,\n    edge,\n    sourceData,\n    targetData,\n    attributes\n  );\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return edge;\n}\n\n/**\n * Internal method used to add an arbitrary edge to the given graph.\n *\n * @param  {Graph}   graph           - Target graph.\n * @param  {string}  name            - Name of the child method for errors.\n * @param  {boolean} mustGenerateKey - Should the graph generate an id?\n * @param  {boolean} undirected      - Whether the edge is undirected.\n * @param  {any}     edge            - The edge's key.\n * @param  {any}     source          - The source node.\n * @param  {any}     target          - The target node.\n * @param  {object}  [attributes]    - Optional attributes.\n * @param  {boolean} [asUpdater]       - Are we updating or merging?\n * @return {any}                     - The edge.\n *\n * @throws {Error} - Will throw if the graph is of the wrong type.\n * @throws {Error} - Will throw if the given attributes are not an object.\n * @throws {Error} - Will throw if source or target doesn't exist.\n * @throws {Error} - Will throw if the edge already exist.\n */\nfunction mergeEdge(\n  graph,\n  name,\n  mustGenerateKey,\n  undirected,\n  edge,\n  source,\n  target,\n  attributes,\n  asUpdater\n) {\n  // Checking validity of operation\n  if (!undirected && graph.type === 'undirected')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`\n    );\n\n  if (undirected && graph.type === 'directed')\n    throw new UsageGraphError(\n      `Graph.${name}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`\n    );\n\n  if (attributes) {\n    if (asUpdater) {\n      if (typeof attributes !== 'function')\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid updater function. Expecting a function but got \"${attributes}\"`\n        );\n    } else {\n      if (!isPlainObject(attributes))\n        throw new InvalidArgumentsGraphError(\n          `Graph.${name}: invalid attributes. Expecting an object but got \"${attributes}\"`\n        );\n    }\n  }\n\n  // Coercion of source & target:\n  source = '' + source;\n  target = '' + target;\n\n  let updater;\n\n  if (asUpdater) {\n    updater = attributes;\n    attributes = undefined;\n  }\n\n  if (!graph.allowSelfLoops && source === target)\n    throw new UsageGraphError(\n      `Graph.${name}: source & target are the same (\"${source}\"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`\n    );\n\n  let sourceData = graph._nodes.get(source);\n  let targetData = graph._nodes.get(target);\n  let edgeData;\n\n  // Do we need to handle duplicate?\n  let alreadyExistingEdgeData;\n\n  if (!mustGenerateKey) {\n    edgeData = graph._edges.get(edge);\n\n    if (edgeData) {\n      // Here, we need to ensure, if the user gave a key, that source & target\n      // are consistent\n      if (edgeData.source.key !== source || edgeData.target.key !== target) {\n        // If source or target inconsistent\n        if (\n          !undirected ||\n          edgeData.source.key !== target ||\n          edgeData.target.key !== source\n        ) {\n          // If directed, or source/target aren't flipped\n          throw new UsageGraphError(\n            `Graph.${name}: inconsistency detected when attempting to merge the \"${edge}\" edge with \"${source}\" source & \"${target}\" target vs. (\"${edgeData.source.key}\", \"${edgeData.target.key}\").`\n          );\n        }\n      }\n\n      alreadyExistingEdgeData = edgeData;\n    }\n  }\n\n  // Here, we might have a source / target collision\n  if (!alreadyExistingEdgeData && !graph.multi && sourceData) {\n    alreadyExistingEdgeData = undirected\n      ? sourceData.undirected[target]\n      : sourceData.out[target];\n  }\n\n  // Handling duplicates\n  if (alreadyExistingEdgeData) {\n    const info = [alreadyExistingEdgeData.key, false, false, false];\n\n    // We can skip the attribute merging part if the user did not provide them\n    if (asUpdater ? !updater : !attributes) return info;\n\n    // Updating the attributes\n    if (asUpdater) {\n      const oldAttributes = alreadyExistingEdgeData.attributes;\n      alreadyExistingEdgeData.attributes = updater(oldAttributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'replace',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes\n      });\n    }\n\n    // Merging the attributes\n    else {\n      assign(alreadyExistingEdgeData.attributes, attributes);\n\n      graph.emit('edgeAttributesUpdated', {\n        type: 'merge',\n        key: alreadyExistingEdgeData.key,\n        attributes: alreadyExistingEdgeData.attributes,\n        data: attributes\n      });\n    }\n\n    return info;\n  }\n\n  attributes = attributes || {};\n\n  if (asUpdater && updater) attributes = updater(attributes);\n\n  // Must the graph generate an id for this edge?\n  const eventData = {\n    key: null,\n    undirected,\n    source,\n    target,\n    attributes\n  };\n\n  if (mustGenerateKey) {\n    // NOTE: in this case we can guarantee that the key does not already\n    // exist and is already correctly casted as a string\n    edge = graph._edgeKeyGenerator();\n  } else {\n    // Coercion of edge key\n    edge = '' + edge;\n\n    // Here, we have a key collision\n    if (graph._edges.has(edge))\n      throw new UsageGraphError(\n        `Graph.${name}: the \"${edge}\" edge already exists in the graph.`\n      );\n  }\n\n  let sourceWasAdded = false;\n  let targetWasAdded = false;\n\n  if (!sourceData) {\n    sourceData = unsafeAddNode(graph, source, {});\n    sourceWasAdded = true;\n\n    if (source === target) {\n      targetData = sourceData;\n      targetWasAdded = true;\n    }\n  }\n  if (!targetData) {\n    targetData = unsafeAddNode(graph, target, {});\n    targetWasAdded = true;\n  }\n\n  // Storing some data\n  edgeData = new EdgeData(undirected, edge, sourceData, targetData, attributes);\n\n  // Adding the edge to the internal register\n  graph._edges.set(edge, edgeData);\n\n  // Incrementing node degree counters\n  const isSelfLoop = source === target;\n\n  if (undirected) {\n    sourceData.undirectedDegree++;\n    targetData.undirectedDegree++;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops++;\n      graph._undirectedSelfLoopCount++;\n    }\n  } else {\n    sourceData.outDegree++;\n    targetData.inDegree++;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops++;\n      graph._directedSelfLoopCount++;\n    }\n  }\n\n  // Updating relevant index\n  if (graph.multi) edgeData.attachMulti();\n  else edgeData.attach();\n\n  if (undirected) graph._undirectedSize++;\n  else graph._directedSize++;\n\n  // Emitting\n  eventData.key = edge;\n\n  graph.emit('edgeAdded', eventData);\n\n  return [edge, true, sourceWasAdded, targetWasAdded];\n}\n\n/**\n * Internal method used to drop an edge.\n *\n * @param  {Graph}    graph    - Target graph.\n * @param  {EdgeData} edgeData - Data of the edge to drop.\n */\nfunction dropEdgeFromData(graph, edgeData) {\n  // Dropping the edge from the register\n  graph._edges.delete(edgeData.key);\n\n  // Updating related degrees\n  const {source: sourceData, target: targetData, attributes} = edgeData;\n\n  const undirected = edgeData.undirected;\n\n  const isSelfLoop = sourceData === targetData;\n\n  if (undirected) {\n    sourceData.undirectedDegree--;\n    targetData.undirectedDegree--;\n\n    if (isSelfLoop) {\n      sourceData.undirectedLoops--;\n      graph._undirectedSelfLoopCount--;\n    }\n  } else {\n    sourceData.outDegree--;\n    targetData.inDegree--;\n\n    if (isSelfLoop) {\n      sourceData.directedLoops--;\n      graph._directedSelfLoopCount--;\n    }\n  }\n\n  // Clearing index\n  if (graph.multi) edgeData.detachMulti();\n  else edgeData.detach();\n\n  if (undirected) graph._undirectedSize--;\n  else graph._directedSize--;\n\n  // Emitting\n  graph.emit('edgeDropped', {\n    key: edgeData.key,\n    attributes,\n    source: sourceData.key,\n    target: targetData.key,\n    undirected\n  });\n}\n\n/**\n * Graph class\n *\n * @constructor\n * @param  {object}  [options] - Options:\n * @param  {boolean}   [allowSelfLoops] - Allow self loops?\n * @param  {string}    [type]           - Type of the graph.\n * @param  {boolean}   [map]            - Allow references as keys?\n * @param  {boolean}   [multi]          - Allow parallel edges?\n *\n * @throws {Error} - Will throw if the arguments are not valid.\n */\nexport default class Graph extends EventEmitter {\n  constructor(options) {\n    super();\n\n    //-- Solving options\n    options = assign({}, DEFAULTS, options);\n\n    // Enforcing options validity\n    if (typeof options.multi !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'multi' option. Expecting a boolean but got \"${options.multi}\".`\n      );\n\n    if (!TYPES.has(options.type))\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'type' option. Should be one of \"mixed\", \"directed\" or \"undirected\" but got \"${options.type}\".`\n      );\n\n    if (typeof options.allowSelfLoops !== 'boolean')\n      throw new InvalidArgumentsGraphError(\n        `Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got \"${options.allowSelfLoops}\".`\n      );\n\n    //-- Private properties\n\n    // Utilities\n    const NodeDataClass =\n      options.type === 'mixed'\n        ? MixedNodeData\n        : options.type === 'directed'\n        ? DirectedNodeData\n        : UndirectedNodeData;\n\n    privateProperty(this, 'NodeDataClass', NodeDataClass);\n\n    // Internal edge key generator\n\n    // NOTE: this internal generator produce keys that are strings\n    // composed of a weird prefix, an incremental instance id starting from\n    // a random byte and finally an internal instance incremental id.\n    // All this to avoid intra-frame and cross-frame adversarial inputs\n    // that can force a single #.addEdge call to degenerate into a O(n)\n    // available key search loop.\n\n    // It also ensures that automatically generated edge keys are unlikely\n    // to produce collisions with arbitrary keys given by users.\n    const instancePrefix = 'geid_' + INSTANCE_ID() + '_';\n    let edgeId = 0;\n\n    const edgeKeyGenerator = () => {\n      let availableEdgeKey;\n\n      do {\n        availableEdgeKey = instancePrefix + edgeId++;\n      } while (this._edges.has(availableEdgeKey));\n\n      return availableEdgeKey;\n    };\n\n    // Indexes\n    privateProperty(this, '_attributes', {});\n    privateProperty(this, '_nodes', new Map());\n    privateProperty(this, '_edges', new Map());\n    privateProperty(this, '_directedSize', 0);\n    privateProperty(this, '_undirectedSize', 0);\n    privateProperty(this, '_directedSelfLoopCount', 0);\n    privateProperty(this, '_undirectedSelfLoopCount', 0);\n    privateProperty(this, '_edgeKeyGenerator', edgeKeyGenerator);\n\n    // Options\n    privateProperty(this, '_options', options);\n\n    // Emitter properties\n    EMITTER_PROPS.forEach(prop => privateProperty(this, prop, this[prop]));\n\n    //-- Properties readers\n    readOnlyProperty(this, 'order', () => this._nodes.size);\n    readOnlyProperty(this, 'size', () => this._edges.size);\n    readOnlyProperty(this, 'directedSize', () => this._directedSize);\n    readOnlyProperty(this, 'undirectedSize', () => this._undirectedSize);\n    readOnlyProperty(\n      this,\n      'selfLoopCount',\n      () => this._directedSelfLoopCount + this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'directedSelfLoopCount',\n      () => this._directedSelfLoopCount\n    );\n    readOnlyProperty(\n      this,\n      'undirectedSelfLoopCount',\n      () => this._undirectedSelfLoopCount\n    );\n    readOnlyProperty(this, 'multi', this._options.multi);\n    readOnlyProperty(this, 'type', this._options.type);\n    readOnlyProperty(this, 'allowSelfLoops', this._options.allowSelfLoops);\n    readOnlyProperty(this, 'implementation', () => 'graphology');\n  }\n\n  _resetInstanceCounters() {\n    this._directedSize = 0;\n    this._undirectedSize = 0;\n    this._directedSelfLoopCount = 0;\n    this._undirectedSelfLoopCount = 0;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Read\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning whether the given node is found in the graph.\n   *\n   * @param  {any}     node - The node.\n   * @return {boolean}\n   */\n  hasNode(node) {\n    return this._nodes.has('' + node);\n  }\n\n  /**\n   * Method returning whether the given directed edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasDirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'undirected') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && !edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.out.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given undirected edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasUndirectedEdge(source, target) {\n    // Early termination\n    if (this.type === 'directed') return false;\n\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      const edgeData = this._edges.get(edge);\n\n      return !!edgeData && edgeData.undirected;\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return nodeData.undirected.hasOwnProperty(target);\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning whether the given edge is found in the graph.\n   *\n   * Arity 1:\n   * @param  {any}     edge - The edge's key.\n   *\n   * Arity 2:\n   * @param  {any}     source - The edge's source.\n   * @param  {any}     target - The edge's target.\n   *\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the arguments are invalid.\n   */\n  hasEdge(source, target) {\n    if (arguments.length === 1) {\n      const edge = '' + source;\n\n      return this._edges.has(edge);\n    } else if (arguments.length === 2) {\n      source = '' + source;\n      target = '' + target;\n\n      // If the node source or the target is not in the graph we break\n      const nodeData = this._nodes.get(source);\n\n      if (!nodeData) return false;\n\n      // Is there a directed edge pointing toward target?\n      return (\n        (typeof nodeData.out !== 'undefined' &&\n          nodeData.out.hasOwnProperty(target)) ||\n        (typeof nodeData.undirected !== 'undefined' &&\n          nodeData.undirected.hasOwnProperty(target))\n      );\n    }\n\n    throw new InvalidArgumentsGraphError(\n      `Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`\n    );\n  }\n\n  /**\n   * Method returning the edge matching source & target in a directed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  directedEdge(source, target) {\n    if (this.type === 'undirected') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.directedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData = (sourceData.out && sourceData.out[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a undirected fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  undirectedEdge(source, target) {\n    if (this.type === 'directed') return;\n\n    source = '' + source;\n    target = '' + target;\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.'\n      );\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.undirectedEdge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.undirected && sourceData.undirected[target]) || undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning the edge matching source & target in a mixed fashion.\n   *\n   * @param  {any} source - The edge's source.\n   * @param  {any} target - The edge's target.\n   *\n   * @return {any|undefined}\n   *\n   * @throws {Error} - Will throw if the graph is multi.\n   * @throws {Error} - Will throw if source or target doesn't exist.\n   */\n  edge(source, target) {\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const sourceData = this._nodes.get(source);\n\n    if (!sourceData)\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${source}\" source node in the graph.`\n      );\n\n    if (!this._nodes.has(target))\n      throw new NotFoundGraphError(\n        `Graph.edge: could not find the \"${target}\" target node in the graph.`\n      );\n\n    const edgeData =\n      (sourceData.out && sourceData.out[target]) ||\n      (sourceData.undirected && sourceData.undirected[target]) ||\n      undefined;\n\n    if (edgeData) return edgeData.key;\n  }\n\n  /**\n   * Method returning whether two nodes are directed neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areDirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areDirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in || neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are out neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.out;\n  }\n\n  /**\n   * Method returning whether two nodes are in neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return false;\n\n    return neighbor in nodeData.in;\n  }\n\n  /**\n   * Method returning whether two nodes are undirected neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areUndirectedNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areUndirectedNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return false;\n\n    return neighbor in nodeData.undirected;\n  }\n\n  /**\n   * Method returning whether two nodes are neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in || neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are inbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areInboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areInboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.in) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether two nodes are outbound neighbors.\n   *\n   * @param  {any}     node     - The node's key.\n   * @param  {any}     neighbor - The neighbor's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  areOutboundNeighbors(node, neighbor) {\n    node = '' + node;\n    neighbor = '' + neighbor;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.areOutboundNeighbors: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type !== 'undirected') {\n      if (neighbor in nodeData.out) return true;\n    }\n\n    if (this.type !== 'directed') {\n      if (neighbor in nodeData.undirected) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning the given node's in degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree;\n  }\n\n  /**\n   * Method returning the given node's out degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree;\n  }\n\n  /**\n   * Method returning the given node's undirected degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree;\n  }\n\n  /**\n   * Method returning the given node's inbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's outbound degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's directed degree.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degree(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degree: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * Method returning the given node's in degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's out degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.outDegree - nodeData.directedLoops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  directedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.directedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'undirected') return 0;\n\n    return nodeData.inDegree + nodeData.outDegree - nodeData.directedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's undirected degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's in degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  undirectedDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.undirectedDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    if (this.type === 'directed') return 0;\n\n    return nodeData.undirectedDegree - nodeData.undirectedLoops * 2;\n  }\n\n  /**\n   * Method returning the given node's inbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's inbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  inboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.inboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's outbound degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's outbound degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  outboundDegreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.outboundDegreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.outDegree;\n      loops += nodeData.directedLoops;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given node's directed degree without considering self loops.\n   *\n   * @param  {any}     node - The node's key.\n   * @return {number}       - The node's degree.\n   *\n   * @throws {Error} - Will throw if the node isn't in the graph.\n   */\n  degreeWithoutSelfLoops(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.degreeWithoutSelfLoops: could not find the \"${node}\" node in the graph.`\n      );\n\n    let degree = 0;\n    let loops = 0;\n\n    if (this.type !== 'directed') {\n      degree += nodeData.undirectedDegree;\n      loops += nodeData.undirectedLoops * 2;\n    }\n\n    if (this.type !== 'undirected') {\n      degree += nodeData.inDegree + nodeData.outDegree;\n      loops += nodeData.directedLoops * 2;\n    }\n\n    return degree - loops;\n  }\n\n  /**\n   * Method returning the given edge's source.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's source.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  source(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.source: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key;\n  }\n\n  /**\n   * Method returning the given edge's target.\n   *\n   * @param  {any} edge - The edge's key.\n   * @return {any}      - The edge's target.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  target(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.target: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.target.key;\n  }\n\n  /**\n   * Method returning the given edge's extremities.\n   *\n   * @param  {any}   edge - The edge's key.\n   * @return {array}      - The edge's extremities.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  extremities(edge) {\n    edge = '' + edge;\n\n    const edgeData = this._edges.get(edge);\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.extremities: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return [edgeData.source.key, edgeData.target.key];\n  }\n\n  /**\n   * Given a node & an edge, returns the other extremity of the edge.\n   *\n   * @param  {any}   node - The node's key.\n   * @param  {any}   edge - The edge's key.\n   * @return {any}        - The related node.\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph or if the\n   *                   edge & node are not related.\n   */\n  opposite(node, edge) {\n    node = '' + node;\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.opposite: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    const source = data.source.key;\n    const target = data.target.key;\n\n    if (node === source) return target;\n    if (node === target) return source;\n\n    throw new NotFoundGraphError(\n      `Graph.opposite: the \"${node}\" node is not attached to the \"${edge}\" edge (${source}, ${target}).`\n    );\n  }\n\n  /**\n   * Returns whether the given edge has the given node as extremity.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @param  {any}     node - The node's key.\n   * @return {boolean}      - The related node.\n   *\n   * @throws {Error} - Will throw if either the node or the edge isn't in the graph.\n   */\n  hasExtremity(edge, node) {\n    edge = '' + edge;\n    node = '' + node;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.hasExtremity: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source.key === node || data.target.key === node;\n  }\n\n  /**\n   * Method returning whether the given edge is undirected.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isUndirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isUndirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is directed.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isDirected(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isDirected: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return !data.undirected;\n  }\n\n  /**\n   * Method returning whether the given edge is a self loop.\n   *\n   * @param  {any}     edge - The edge's key.\n   * @return {boolean}\n   *\n   * @throws {Error} - Will throw if the edge isn't in the graph.\n   */\n  isSelfLoop(edge) {\n    edge = '' + edge;\n\n    const data = this._edges.get(edge);\n\n    if (!data)\n      throw new NotFoundGraphError(\n        `Graph.isSelfLoop: could not find the \"${edge}\" edge in the graph.`\n      );\n\n    return data.source === data.target;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Mutation\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to add a node to the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   *\n   * @throws {Error} - Will throw if the given node already exist.\n   * @throws {Error} - Will throw if the given attributes are not an object.\n   */\n  addNode(node, attributes) {\n    const nodeData = addNode(this, node, attributes);\n\n    return nodeData.key;\n  }\n\n  /**\n   * Method used to merge a node into the graph.\n   *\n   * @param  {any}    node         - The node.\n   * @param  {object} [attributes] - Optional attributes.\n   * @return {any}                 - The node.\n   */\n  mergeNode(node, attributes) {\n    if (attributes && !isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        `Graph.mergeNode: invalid attributes. Expecting an object but got \"${attributes}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n    attributes = attributes || {};\n\n    // If the node already exists, we merge the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (attributes) {\n        assign(data.attributes, attributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'merge',\n          key: node,\n          attributes: data.attributes,\n          data: attributes\n        });\n      }\n      return [node, false];\n    }\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to add a node if it does not exist in the graph or else to\n   * update its attributes using a function.\n   *\n   * @param  {any}      node      - The node.\n   * @param  {function} [updater] - Optional updater function.\n   * @return {any}                - The node.\n   */\n  updateNode(node, updater) {\n    if (updater && typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        `Graph.updateNode: invalid updater function. Expecting a function but got \"${updater}\"`\n      );\n\n    // String coercion\n    node = '' + node;\n\n    // If the node already exists, we update the attributes\n    let data = this._nodes.get(node);\n\n    if (data) {\n      if (updater) {\n        const oldAttributes = data.attributes;\n        data.attributes = updater(oldAttributes);\n\n        this.emit('nodeAttributesUpdated', {\n          type: 'replace',\n          key: node,\n          attributes: data.attributes\n        });\n      }\n      return [node, false];\n    }\n\n    const attributes = updater ? updater({}) : {};\n\n    data = new this.NodeDataClass(node, attributes);\n\n    // Adding the node to internal register\n    this._nodes.set(node, data);\n\n    // Emitting\n    this.emit('nodeAdded', {\n      key: node,\n      attributes\n    });\n\n    return [node, true];\n  }\n\n  /**\n   * Method used to drop a single node & all its attached edges from the graph.\n   *\n   * @param  {any}    node - The node.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the node doesn't exist.\n   */\n  dropNode(node) {\n    node = '' + node;\n\n    const nodeData = this._nodes.get(node);\n\n    if (!nodeData)\n      throw new NotFoundGraphError(\n        `Graph.dropNode: could not find the \"${node}\" node in the graph.`\n      );\n\n    let edgeData;\n\n    // Removing attached edges\n    // NOTE: we could be faster here, but this is such a pain to maintain\n    if (this.type !== 'undirected') {\n      for (const neighbor in nodeData.out) {\n        edgeData = nodeData.out[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n\n      for (const neighbor in nodeData.in) {\n        edgeData = nodeData.in[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    if (this.type !== 'directed') {\n      for (const neighbor in nodeData.undirected) {\n        edgeData = nodeData.undirected[neighbor];\n\n        do {\n          dropEdgeFromData(this, edgeData);\n          edgeData = edgeData.next;\n        } while (edgeData);\n      }\n    }\n\n    // Dropping the node from the register\n    this._nodes.delete(node);\n\n    // Emitting\n    this.emit('nodeDropped', {\n      key: node,\n      attributes: nodeData.attributes\n    });\n  }\n\n  /**\n   * Method used to drop a single edge from the graph.\n   *\n   * Arity 1:\n   * @param  {any}    edge - The edge.\n   *\n   * Arity 2:\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropEdge(edge) {\n    let edgeData;\n\n    if (arguments.length > 1) {\n      const source = '' + arguments[0];\n      const target = '' + arguments[1];\n\n      edgeData = getMatchingEdge(this, source, target, this.type);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${source}\" -> \"${target}\" edge in the graph.`\n        );\n    } else {\n      edge = '' + edge;\n\n      edgeData = this._edges.get(edge);\n\n      if (!edgeData)\n        throw new NotFoundGraphError(\n          `Graph.dropEdge: could not find the \"${edge}\" edge in the graph.`\n        );\n    }\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single directed edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropDirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    source = '' + source;\n    target = '' + target;\n\n    const edgeData = getMatchingEdge(this, source, target, 'directed');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropDirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to drop a single undirected edge from the graph.\n   *\n   * @param  {any}    source - Source node.\n   * @param  {any}    target - Target node.\n   *\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if the edge doesn't exist.\n   */\n  dropUndirectedEdge(source, target) {\n    if (arguments.length < 2)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.'\n      );\n\n    if (this.multi)\n      throw new UsageGraphError(\n        'Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.'\n      );\n\n    const edgeData = getMatchingEdge(this, source, target, 'undirected');\n\n    if (!edgeData)\n      throw new NotFoundGraphError(\n        `Graph.dropUndirectedEdge: could not find a \"${source}\" -> \"${target}\" edge in the graph.`\n      );\n\n    dropEdgeFromData(this, edgeData);\n\n    return this;\n  }\n\n  /**\n   * Method used to remove every edge & every node from the graph.\n   *\n   * @return {Graph}\n   */\n  clear() {\n    // Clearing edges\n    this._edges.clear();\n\n    // Clearing nodes\n    this._nodes.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('cleared');\n  }\n\n  /**\n   * Method used to remove every edge from the graph.\n   *\n   * @return {Graph}\n   */\n  clearEdges() {\n    // Clearing structure index\n    const iterator = this._nodes.values();\n\n    let step;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      step.value.clear();\n    }\n\n    // Clearing edges\n    this._edges.clear();\n\n    // Reset counters\n    this._resetInstanceCounters();\n\n    // Emitting\n    this.emit('edgesCleared');\n  }\n\n  /**---------------------------------------------------------------------------\n   * Attributes-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning the desired graph's attribute.\n   *\n   * @param  {string} name - Name of the attribute.\n   * @return {any}\n   */\n  getAttribute(name) {\n    return this._attributes[name];\n  }\n\n  /**\n   * Method returning the graph's attributes.\n   *\n   * @return {object}\n   */\n  getAttributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Method returning whether the graph has the desired attribute.\n   *\n   * @param  {string}  name - Name of the attribute.\n   * @return {boolean}\n   */\n  hasAttribute(name) {\n    return this._attributes.hasOwnProperty(name);\n  }\n\n  /**\n   * Method setting a value for the desired graph's attribute.\n   *\n   * @param  {string}  name  - Name of the attribute.\n   * @param  {any}     value - Value for the attribute.\n   * @return {Graph}\n   */\n  setAttribute(name, value) {\n    this._attributes[name] = value;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method using a function to update the desired graph's attribute's value.\n   *\n   * @param  {string}   name    - Name of the attribute.\n   * @param  {function} updater - Function use to update the attribute's value.\n   * @return {Graph}\n   */\n  updateAttribute(name, updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttribute: updater should be a function.'\n      );\n\n    const value = this._attributes[name];\n\n    this._attributes[name] = updater(value);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'set',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method removing the desired graph's attribute.\n   *\n   * @param  {string} name  - Name of the attribute.\n   * @return {Graph}\n   */\n  removeAttribute(name) {\n    delete this._attributes[name];\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'remove',\n      attributes: this._attributes,\n      name\n    });\n\n    return this;\n  }\n\n  /**\n   * Method replacing the graph's attributes.\n   *\n   * @param  {object} attributes - New attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  replaceAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.replaceAttributes: provided attributes are not a plain object.'\n      );\n\n    this._attributes = attributes;\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'replace',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method merging the graph's attributes.\n   *\n   * @param  {object} attributes - Attributes to merge.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given attributes are not a plain object.\n   */\n  mergeAttributes(attributes) {\n    if (!isPlainObject(attributes))\n      throw new InvalidArgumentsGraphError(\n        'Graph.mergeAttributes: provided attributes are not a plain object.'\n      );\n\n    assign(this._attributes, attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'merge',\n      attributes: this._attributes,\n      data: attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method updating the graph's attributes.\n   *\n   * @param  {function} updater - Function used to update the attributes.\n   * @return {Graph}\n   *\n   * @throws {Error} - Will throw if given updater is not a function.\n   */\n  updateAttributes(updater) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateAttributes: provided updater is not a function.'\n      );\n\n    this._attributes = updater(this._attributes);\n\n    // Emitting\n    this.emit('attributesUpdated', {\n      type: 'update',\n      attributes: this._attributes\n    });\n\n    return this;\n  }\n\n  /**\n   * Method used to update each node's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachNodeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      nodeData.attributes = updater(nodeData.key, nodeData.attributes);\n    }\n\n    this.emit('eachNodeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**\n   * Method used to update each edge's attributes using the given function.\n   *\n   * @param {function}  updater - Updater function to use.\n   * @param {object}    [hints] - Optional hints.\n   */\n  updateEachEdgeAttributes(updater, hints) {\n    if (typeof updater !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: expecting an updater function.'\n      );\n\n    if (hints && !validateHints(hints))\n      throw new InvalidArgumentsGraphError(\n        'Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}'\n      );\n\n    const iterator = this._edges.values();\n\n    let step, edgeData, sourceData, targetData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n      sourceData = edgeData.source;\n      targetData = edgeData.target;\n\n      edgeData.attributes = updater(\n        edgeData.key,\n        edgeData.attributes,\n        sourceData.key,\n        targetData.key,\n        sourceData.attributes,\n        targetData.attributes,\n        edgeData.undirected\n      );\n    }\n\n    this.emit('eachEdgeAttributesUpdated', {\n      hints: hints ? hints : null\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Iteration-related methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method iterating over the graph's adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, false, this, callback);\n  }\n  forEachAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, false, true, this, callback);\n  }\n\n  /**\n   * Method iterating over the graph's assymetric adjacency using the given callback.\n   *\n   * @param  {function}  callback - Callback to use.\n   */\n  forEachAssymetricAdjacencyEntry(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntry: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, false, this, callback);\n  }\n  forEachAssymetricAdjacencyEntryWithOrphans(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.'\n      );\n\n    forEachAdjacency(false, true, true, this, callback);\n  }\n\n  /**\n   * Method returning the list of the graph's nodes.\n   *\n   * @return {array} - The nodes.\n   */\n  nodes() {\n    if (typeof Array.from === 'function') return Array.from(this._nodes.keys());\n\n    return take(this._nodes.keys(), this._nodes.size);\n  }\n\n  /**\n   * Method iterating over the graph's nodes using the given callback.\n   *\n   * @param  {function}  callback - Callback (key, attributes, index).\n   */\n  forEachNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.forEachNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      callback(nodeData.key, nodeData.attributes);\n    }\n  }\n\n  /**\n   * Method iterating attempting to find a node matching the given predicate\n   * function.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  findNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.findNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return nodeData.key;\n    }\n\n    return;\n  }\n\n  /**\n   * Method mapping nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  mapNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.mapNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = new Array(this.order);\n    let i = 0;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      result[i++] = callback(nodeData.key, nodeData.attributes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method returning whether some node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  someNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.someNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes)) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Method returning whether all node verify the given predicate.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  everyNode(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.everyNode: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (!callback(nodeData.key, nodeData.attributes)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Method filtering nodes.\n   *\n   * @param  {function}  callback - Callback (key, attributes).\n   */\n  filterNodes(callback) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.filterNodes: expecting a callback.'\n      );\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    const result = [];\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n\n      if (callback(nodeData.key, nodeData.attributes))\n        result.push(nodeData.key);\n    }\n\n    return result;\n  }\n\n  /**\n   * Method reducing nodes.\n   *\n   * @param  {function}  callback - Callback (accumulator, key, attributes).\n   */\n  reduceNodes(callback, initialValue) {\n    if (typeof callback !== 'function')\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: expecting a callback.'\n      );\n\n    if (arguments.length < 2)\n      throw new InvalidArgumentsGraphError(\n        'Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.'\n      );\n\n    let accumulator = initialValue;\n\n    const iterator = this._nodes.values();\n\n    let step, nodeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      nodeData = step.value;\n      accumulator = callback(accumulator, nodeData.key, nodeData.attributes);\n    }\n\n    return accumulator;\n  }\n\n  /**\n   * Method returning an iterator over the graph's node entries.\n   *\n   * @return {Iterator}\n   */\n  nodeEntries() {\n    const iterator = this._nodes.values();\n\n    return new Iterator(() => {\n      const step = iterator.next();\n\n      if (step.done) return step;\n\n      const data = step.value;\n\n      return {\n        value: {node: data.key, attributes: data.attributes},\n        done: false\n      };\n    });\n  }\n\n  /**---------------------------------------------------------------------------\n   * Serialization\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used to export the whole graph.\n   *\n   * @return {object} - The serialized graph.\n   */\n  export() {\n    const nodes = new Array(this._nodes.size);\n\n    let i = 0;\n\n    this._nodes.forEach((data, key) => {\n      nodes[i++] = serializeNode(key, data);\n    });\n\n    const edges = new Array(this._edges.size);\n\n    i = 0;\n\n    this._edges.forEach((data, key) => {\n      edges[i++] = serializeEdge(this.type, key, data);\n    });\n\n    return {\n      options: {\n        type: this.type,\n        multi: this.multi,\n        allowSelfLoops: this.allowSelfLoops\n      },\n      attributes: this.getAttributes(),\n      nodes,\n      edges\n    };\n  }\n\n  /**\n   * Method used to import a serialized graph.\n   *\n   * @param  {object|Graph} data  - The serialized graph.\n   * @param  {boolean}      merge - Whether to merge data.\n   * @return {Graph}              - Returns itself for chaining.\n   */\n  import(data, merge = false) {\n    // Importing a Graph instance directly\n    if (data instanceof Graph) {\n      // Nodes\n      data.forEachNode((n, a) => {\n        if (merge) this.mergeNode(n, a);\n        else this.addNode(n, a);\n      });\n\n      // Edges\n      data.forEachEdge((e, a, s, t, _sa, _ta, u) => {\n        if (merge) {\n          if (u) this.mergeUndirectedEdgeWithKey(e, s, t, a);\n          else this.mergeDirectedEdgeWithKey(e, s, t, a);\n        } else {\n          if (u) this.addUndirectedEdgeWithKey(e, s, t, a);\n          else this.addDirectedEdgeWithKey(e, s, t, a);\n        }\n      });\n\n      return this;\n    }\n\n    // Importing a serialized graph\n    if (!isPlainObject(data))\n      throw new InvalidArgumentsGraphError(\n        'Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.'\n      );\n\n    if (data.attributes) {\n      if (!isPlainObject(data.attributes))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid attributes. Expecting a plain object.'\n        );\n\n      if (merge) this.mergeAttributes(data.attributes);\n      else this.replaceAttributes(data.attributes);\n    }\n\n    let i, l, list, node, edge;\n\n    if (data.nodes) {\n      list = data.nodes;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid nodes. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        node = list[i];\n\n        // Validating\n        validateSerializedNode(node);\n\n        // Adding the node\n        const {key, attributes} = node;\n\n        if (merge) this.mergeNode(key, attributes);\n        else this.addNode(key, attributes);\n      }\n    }\n\n    if (data.edges) {\n      let undirectedByDefault = false;\n\n      if (this.type === 'undirected') {\n        undirectedByDefault = true;\n      }\n\n      list = data.edges;\n\n      if (!Array.isArray(list))\n        throw new InvalidArgumentsGraphError(\n          'Graph.import: invalid edges. Expecting an array.'\n        );\n\n      for (i = 0, l = list.length; i < l; i++) {\n        edge = list[i];\n\n        // Validating\n        validateSerializedEdge(edge);\n\n        // Adding the edge\n        const {\n          source,\n          target,\n          attributes,\n          undirected = undirectedByDefault\n        } = edge;\n\n        let method;\n\n        if ('key' in edge) {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdgeWithKey\n              : this.mergeDirectedEdgeWithKey\n            : undirected\n            ? this.addUndirectedEdgeWithKey\n            : this.addDirectedEdgeWithKey;\n\n          method.call(this, edge.key, source, target, attributes);\n        } else {\n          method = merge\n            ? undirected\n              ? this.mergeUndirectedEdge\n              : this.mergeDirectedEdge\n            : undirected\n            ? this.addUndirectedEdge\n            : this.addDirectedEdge;\n\n          method.call(this, source, target, attributes);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Utils\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method returning a null copy of the graph, i.e. a graph without nodes\n   * & edges but with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The null copy.\n   */\n  nullCopy(options) {\n    const graph = new Graph(assign({}, this._options, options));\n    graph.replaceAttributes(assign({}, this.getAttributes()));\n    return graph;\n  }\n\n  /**\n   * Method returning an empty copy of the graph, i.e. a graph without edges but\n   * with the exact same options.\n   *\n   * @param  {object} options - Options to merge with the current ones.\n   * @return {Graph}          - The empty copy.\n   */\n  emptyCopy(options) {\n    const graph = this.nullCopy(options);\n\n    this._nodes.forEach((nodeData, key) => {\n      const attributes = assign({}, nodeData.attributes);\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      nodeData = new graph.NodeDataClass(key, attributes);\n      graph._nodes.set(key, nodeData);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Method returning an exact copy of the graph.\n   *\n   * @param  {object} options - Upgrade options.\n   * @return {Graph}          - The copy.\n   */\n  copy(options) {\n    options = options || {};\n\n    if (\n      typeof options.type === 'string' &&\n      options.type !== this.type &&\n      options.type !== 'mixed'\n    )\n      throw new UsageGraphError(\n        `Graph.copy: cannot create an incompatible copy from \"${this.type}\" type to \"${options.type}\" because this would mean losing information about the current graph.`\n      );\n\n    if (\n      typeof options.multi === 'boolean' &&\n      options.multi !== this.multi &&\n      options.multi !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.'\n      );\n\n    if (\n      typeof options.allowSelfLoops === 'boolean' &&\n      options.allowSelfLoops !== this.allowSelfLoops &&\n      options.allowSelfLoops !== true\n    )\n      throw new UsageGraphError(\n        'Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.'\n      );\n\n    const graph = this.emptyCopy(options);\n\n    const iterator = this._edges.values();\n\n    let step, edgeData;\n\n    while (((step = iterator.next()), step.done !== true)) {\n      edgeData = step.value;\n\n      // NOTE: no need to emit events since user cannot access the instance yet\n      addEdge(\n        graph,\n        'copy',\n        false,\n        edgeData.undirected,\n        edgeData.key,\n        edgeData.source.key,\n        edgeData.target.key,\n        assign({}, edgeData.attributes)\n      );\n    }\n\n    return graph;\n  }\n\n  /**---------------------------------------------------------------------------\n   * Known methods\n   **---------------------------------------------------------------------------\n   */\n\n  /**\n   * Method used by JavaScript to perform JSON serialization.\n   *\n   * @return {object} - The serialized graph.\n   */\n  toJSON() {\n    return this.export();\n  }\n\n  /**\n   * Method returning [object Graph].\n   */\n  toString() {\n    return '[object Graph]';\n  }\n\n  /**\n   * Method used internally by node's console to display a custom object.\n   *\n   * @return {object} - Formatted object representation of the graph.\n   */\n  inspect() {\n    const nodes = {};\n    this._nodes.forEach((data, key) => {\n      nodes[key] = data.attributes;\n    });\n\n    const edges = {},\n      multiIndex = {};\n\n    this._edges.forEach((data, key) => {\n      const direction = data.undirected ? '--' : '->';\n\n      let label = '';\n\n      let source = data.source.key;\n      let target = data.target.key;\n      let tmp;\n\n      if (data.undirected && source > target) {\n        tmp = source;\n        source = target;\n        target = tmp;\n      }\n\n      const desc = `(${source})${direction}(${target})`;\n\n      if (!key.startsWith('geid_')) {\n        label += `[${key}]: `;\n      } else if (this.multi) {\n        if (typeof multiIndex[desc] === 'undefined') {\n          multiIndex[desc] = 0;\n        } else {\n          multiIndex[desc]++;\n        }\n\n        label += `${multiIndex[desc]}. `;\n      }\n\n      label += desc;\n\n      edges[label] = data.attributes;\n    });\n\n    const dummy = {};\n\n    for (const k in this) {\n      if (\n        this.hasOwnProperty(k) &&\n        !EMITTER_PROPS.has(k) &&\n        typeof this[k] !== 'function' &&\n        typeof k !== 'symbol'\n      )\n        dummy[k] = this[k];\n    }\n\n    dummy.attributes = this._attributes;\n    dummy.nodes = nodes;\n    dummy.edges = edges;\n\n    privateProperty(dummy, 'constructor', this.constructor);\n\n    return dummy;\n  }\n}\n\n/**\n * Attaching methods to the prototype.\n *\n * Here, we are attaching a wide variety of methods to the Graph class'\n * prototype when those are very numerous and when their creation is\n * abstracted.\n */\n\n/**\n * Attaching custom inspect method for node >= 10.\n */\nif (typeof Symbol !== 'undefined')\n  Graph.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    Graph.prototype.inspect;\n\n/**\n * Related to edge addition.\n */\nEDGE_ADD_METHODS.forEach(method => {\n  ['add', 'merge', 'update'].forEach(verb => {\n    const name = method.name(verb);\n    const fn = verb === 'add' ? addEdge : mergeEdge;\n\n    if (method.generateKey) {\n      Graph.prototype[name] = function (source, target, attributes) {\n        return fn(\n          this,\n          name,\n          true,\n          (method.type || this.type) === 'undirected',\n          null,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    } else {\n      Graph.prototype[name] = function (edge, source, target, attributes) {\n        return fn(\n          this,\n          name,\n          false,\n          (method.type || this.type) === 'undirected',\n          edge,\n          source,\n          target,\n          attributes,\n          verb === 'update'\n        );\n      };\n    }\n  });\n});\n\n/**\n * Attributes-related.\n */\nattachNodeAttributesMethods(Graph);\nattachEdgeAttributesMethods(Graph);\n\n/**\n * Edge iteration-related.\n */\nattachEdgeIterationMethods(Graph);\n\n/**\n * Neighbor iteration-related.\n */\nattachNeighborIterationMethods(Graph);\n","/**\n * Graphology Helper Classes\n * ==========================\n *\n * Building some higher-order classes instantiating the graph with\n * predefinite options.\n */\nimport {assign} from './utils';\nimport Graph from './graph';\n\nimport {\n  InvalidArgumentsGraphError,\n  NotFoundGraphError,\n  UsageGraphError\n} from './errors';\n\n/**\n * Alternative constructors.\n */\nclass DirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'DirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass UndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected'}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== false)\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'UndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiDirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'directed', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'directed')\n      throw new InvalidArgumentsGraphError(\n        'MultiDirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\nclass MultiUndirectedGraph extends Graph {\n  constructor(options) {\n    const finalOptions = assign({type: 'undirected', multi: true}, options);\n\n    if ('multi' in finalOptions && finalOptions.multi !== true)\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!'\n      );\n\n    if (finalOptions.type !== 'undirected')\n      throw new InvalidArgumentsGraphError(\n        'MultiUndirectedGraph.from: inconsistent \"' +\n          finalOptions.type +\n          '\" type in given options!'\n      );\n\n    super(finalOptions);\n  }\n}\n\n/**\n * Attaching static #.from method to each of the constructors.\n */\nfunction attachStaticFromMethod(Class) {\n  /**\n   * Builds a graph from serialized data or another graph's data.\n   *\n   * @param  {Graph|SerializedGraph} data      - Hydratation data.\n   * @param  {object}                [options] - Options.\n   * @return {Class}\n   */\n  Class.from = function (data, options) {\n    // Merging given options with serialized ones\n    const finalOptions = assign({}, data.options, options);\n\n    const instance = new Class(finalOptions);\n    instance.import(data);\n\n    return instance;\n  };\n}\n\nattachStaticFromMethod(Graph);\nattachStaticFromMethod(DirectedGraph);\nattachStaticFromMethod(UndirectedGraph);\nattachStaticFromMethod(MultiGraph);\nattachStaticFromMethod(MultiDirectedGraph);\nattachStaticFromMethod(MultiUndirectedGraph);\n\nGraph.Graph = Graph;\nGraph.DirectedGraph = DirectedGraph;\nGraph.UndirectedGraph = UndirectedGraph;\nGraph.MultiGraph = MultiGraph;\nGraph.MultiDirectedGraph = MultiDirectedGraph;\nGraph.MultiUndirectedGraph = MultiUndirectedGraph;\n\nGraph.InvalidArgumentsGraphError = InvalidArgumentsGraphError;\nGraph.NotFoundGraphError = NotFoundGraphError;\nGraph.UsageGraphError = UsageGraphError;\n\nexport {\n  Graph,\n  DirectedGraph,\n  UndirectedGraph,\n  MultiGraph,\n  MultiDirectedGraph,\n  MultiUndirectedGraph\n};\n","/**\n * Graphology CommonJS Endoint\n * ============================\n *\n * Endpoint for CommonJS modules consumers.\n */\nimport {Graph} from './classes';\n\nexport default Graph;\n"],"names":["assignPolyfill","target","arguments","i","l","length","k","assign","Object","getMatchingEdge","graph","source","type","sourceData","_nodes","get","edge","out","undirected","isPlainObject","value","isEmpty","o","privateProperty","name","defineProperty","enumerable","configurable","writable","readOnlyProperty","descriptor","validateHints","hints","attributes","Array","isArray","incrementalIdStartingFromRandomByte","Math","floor","random","GraphError","message","Error","InvalidArgumentsGraphError","captureStackTrace","prototype","constructor","NotFoundGraphError","UsageGraphError","MixedNodeData","key","clear","inDegree","outDegree","undirectedDegree","undirectedLoops","directedLoops","DirectedNodeData","UndirectedNodeData","EdgeData","attach","outKey","inKey","attachMulti","adj","head","previous","next","detach","detachMulti","undefined","NODE","SOURCE","TARGET","OPPOSITE","findRelevantNodeData","method","mode","nodeOrEdge","nameOrEdge","add1","add2","nodeData","edgeData","arg1","arg2","_edges","attachNodeAttributeGetter","Class","data","attachNodeAttributesGetter","attachNodeAttributeChecker","hasOwnProperty","attachNodeAttributeSetter","emit","attachNodeAttributeUpdater","updater","attachNodeAttributeRemover","attachNodeAttributesReplacer","attachNodeAttributesMerger","attachNodeAttributesUpdater","NODE_ATTRIBUTES_METHODS","element","attacher","attachNodeAttributesMethods","Graph","forEach","attachEdgeAttributeGetter","multi","attachEdgeAttributesGetter","attachEdgeAttributeChecker","attachEdgeAttributeSetter","attachEdgeAttributeUpdater","attachEdgeAttributeRemover","attachEdgeAttributesReplacer","attachEdgeAttributesMerger","attachEdgeAttributesUpdater","EDGE_ATTRIBUTES_METHODS","attachEdgeAttributesMethods","EDGES_ITERATION","direction","forEachSimple","breakable","object","callback","avoid","shouldBreak","forEachMulti","createIterator","keys","Iterator","done","sourceAttributes","targetAttributes","forEachForKeySimple","targetData","forEachForKeyMulti","createIteratorForKey","of","createEdgeArray","size","from","take","undirectedSize","directedSize","list","mask","iterator","values","step","forEachEdge","shouldFilter","createEdgeIterator","empty","forEachEdgeForNode","fn","found","createEdgeArrayForNode","edges","push","createEdgeIteratorForNode","chain","forEachEdgeForPath","createEdgeArrayForPath","createEdgeIteratorForPath","attachEdgeArrayCreator","description","has","attachForEachEdge","forEachName","toUpperCase","slice","mapName","args","call","pop","result","e","ea","s","t","sa","ta","u","apply","filterName","reduceName","initialValue","accumulator","attachFindEdge","findEdgeName","someName","everyName","attachEdgeIteratorCreator","originalName","attachEdgeIterationMethods","NEIGHBORS_ITERATION","CompositeSetWrapper","A","B","wrap","set","forEachInObjectOnce","visited","neighborData","forEachNeighbor","createNeighborArrayForNode","neighbors","createDedupedObjectIterator","neighbor","createNeighborIterator","attachNeighborArrayCreator","node","attachForEachNeighbor","n","a","attachFindNeighbor","capitalizedSingular","findName","attachNeighborIteratorCreator","iteratorName","attachNeighborIterationMethods","forEachAdjacency","assymetric","disconnectedNodes","hasEdges","serializeNode","serialized","serializeEdge","validateSerializedNode","validateSerializedEdge","INSTANCE_ID","TYPES","Set","EMITTER_PROPS","EDGE_ADD_METHODS","verb","generateKey","DEFAULTS","allowSelfLoops","addNode","NodeDataClass","unsafeAddNode","addEdge","mustGenerateKey","eventData","_edgeKeyGenerator","isSelfLoop","_undirectedSelfLoopCount","_directedSelfLoopCount","_undirectedSize","_directedSize","mergeEdge","asUpdater","alreadyExistingEdgeData","info","oldAttributes","sourceWasAdded","targetWasAdded","dropEdgeFromData","options","instancePrefix","edgeId","edgeKeyGenerator","availableEdgeKey","Map","prop","_options","_resetInstanceCounters","hasNode","hasDirectedEdge","hasUndirectedEdge","hasEdge","directedEdge","undirectedEdge","areDirectedNeighbors","areOutNeighbors","areInNeighbors","areUndirectedNeighbors","areNeighbors","areInboundNeighbors","areOutboundNeighbors","directedDegree","inboundDegree","degree","outboundDegree","inDegreeWithoutSelfLoops","outDegreeWithoutSelfLoops","directedDegreeWithoutSelfLoops","undirectedDegreeWithoutSelfLoops","inboundDegreeWithoutSelfLoops","loops","outboundDegreeWithoutSelfLoops","degreeWithoutSelfLoops","extremities","opposite","hasExtremity","isUndirected","isDirected","mergeNode","updateNode","dropNode","dropEdge","dropDirectedEdge","dropUndirectedEdge","clearEdges","getAttribute","_attributes","getAttributes","hasAttribute","setAttribute","updateAttribute","removeAttribute","replaceAttributes","mergeAttributes","updateAttributes","updateEachNodeAttributes","updateEachEdgeAttributes","forEachAdjacencyEntry","forEachAdjacencyEntryWithOrphans","forEachAssymetricAdjacencyEntry","forEachAssymetricAdjacencyEntryWithOrphans","nodes","forEachNode","findNode","mapNodes","order","someNode","everyNode","filterNodes","reduceNodes","nodeEntries","merge","_sa","_ta","mergeUndirectedEdgeWithKey","mergeDirectedEdgeWithKey","addUndirectedEdgeWithKey","addDirectedEdgeWithKey","undirectedByDefault","mergeUndirectedEdge","mergeDirectedEdge","addUndirectedEdge","addDirectedEdge","nullCopy","emptyCopy","copy","toJSON","toString","inspect","multiIndex","label","tmp","desc","startsWith","dummy","EventEmitter","Symbol","DirectedGraph","finalOptions","UndirectedGraph","MultiGraph","MultiDirectedGraph","MultiUndirectedGraph","attachStaticFromMethod","instance"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,GAAG;AACxB,EAAA,IAAMC,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC,CAAA;AAE3B,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AAChD,IAAA,IAAI,CAACD,SAAS,CAACC,CAAC,CAAC,EAAE,SAAA;AAEnB,IAAA,KAAK,IAAMG,CAAC,IAAIJ,SAAS,CAACC,CAAC,CAAC,EAAA;MAAEF,MAAM,CAACK,CAAC,CAAC,GAAGJ,SAAS,CAACC,CAAC,CAAC,CAACG,CAAC,CAAC,CAAA;AAAC,KAAA;AAC5D,GAAA;AAEA,EAAA,OAAOL,MAAM,CAAA;AACf,CAAA;AAEA,IAAIM,MAAM,GAAGP,cAAc,CAAA;AAE3B,IAAI,OAAOQ,MAAM,CAACD,MAAM,KAAK,UAAU,EAAEA,MAAM,GAAGC,MAAM,CAACD,MAAM,CAAA;;AAI/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,eAAe,CAACC,KAAK,EAAEC,MAAM,EAAEV,MAAM,EAAEW,IAAI,EAAE;EAC3D,IAAMC,UAAU,GAAGH,KAAK,CAACI,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;EAE3C,IAAIK,IAAI,GAAG,IAAI,CAAA;AAEf,EAAA,IAAI,CAACH,UAAU,EAAE,OAAOG,IAAI,CAAA;EAE5B,IAAIJ,IAAI,KAAK,OAAO,EAAE;IACpBI,IAAI,GACDH,UAAU,CAACI,GAAG,IAAIJ,UAAU,CAACI,GAAG,CAAChB,MAAM,CAAC,IACxCY,UAAU,CAACK,UAAU,IAAIL,UAAU,CAACK,UAAU,CAACjB,MAAM,CAAE,CAAA;AAC5D,GAAC,MAAM,IAAIW,IAAI,KAAK,UAAU,EAAE;IAC9BI,IAAI,GAAGH,UAAU,CAACI,GAAG,IAAIJ,UAAU,CAACI,GAAG,CAAChB,MAAM,CAAC,CAAA;AACjD,GAAC,MAAM;IACLe,IAAI,GAAGH,UAAU,CAACK,UAAU,IAAIL,UAAU,CAACK,UAAU,CAACjB,MAAM,CAAC,CAAA;AAC/D,GAAA;AAEA,EAAA,OAAOe,IAAI,CAAA;AACb,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,aAAa,CAACC,KAAK,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,OAAO,QAAOA,KAAK,CAAA,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,CAAA;AACpD,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,OAAO,CAACC,CAAC,EAAE;AACzB,EAAA,IAAIhB,CAAC,CAAA;EAEL,KAAKA,CAAC,IAAIgB,CAAC,EAAA;AAAE,IAAA,OAAO,KAAK,CAAA;AAAC,GAAA;AAE1B,EAAA,OAAO,IAAI,CAAA;AACb,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,eAAe,CAACtB,MAAM,EAAEuB,IAAI,EAAEJ,KAAK,EAAE;AACnDZ,EAAAA,MAAM,CAACiB,cAAc,CAACxB,MAAM,EAAEuB,IAAI,EAAE;AAClCE,IAAAA,UAAU,EAAE,KAAK;AACjBC,IAAAA,YAAY,EAAE,KAAK;AACnBC,IAAAA,QAAQ,EAAE,IAAI;AACdR,IAAAA,KAAK,EAALA,KAAAA;AACF,GAAC,CAAC,CAAA;AACJ,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASS,gBAAgB,CAAC5B,MAAM,EAAEuB,IAAI,EAAEJ,KAAK,EAAE;AACpD,EAAA,IAAMU,UAAU,GAAG;AACjBJ,IAAAA,UAAU,EAAE,IAAI;AAChBC,IAAAA,YAAY,EAAE,IAAA;GACf,CAAA;AAED,EAAA,IAAI,OAAOP,KAAK,KAAK,UAAU,EAAE;IAC/BU,UAAU,CAACf,GAAG,GAAGK,KAAK,CAAA;AACxB,GAAC,MAAM;IACLU,UAAU,CAACV,KAAK,GAAGA,KAAK,CAAA;IACxBU,UAAU,CAACF,QAAQ,GAAG,KAAK,CAAA;AAC7B,GAAA;EAEApB,MAAM,CAACiB,cAAc,CAACxB,MAAM,EAAEuB,IAAI,EAAEM,UAAU,CAAC,CAAA;AACjD,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAa,CAACC,KAAK,EAAE;AACnC,EAAA,IAAI,CAACb,aAAa,CAACa,KAAK,CAAC,EAAE,OAAO,KAAK,CAAA;AAEvC,EAAA,IAAIA,KAAK,CAACC,UAAU,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,KAAK,CAACC,UAAU,CAAC,EAAE,OAAO,KAAK,CAAA;AAEtE,EAAA,OAAO,IAAI,CAAA;AACb,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASG,mCAAmC,GAAG;AACpD,EAAA,IAAIjC,CAAC,GAAGkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,IAAI,CAAA;AAE9C,EAAA,OAAO,YAAM;AACX,IAAA,OAAOpC,CAAC,EAAE,CAAA;GACX,CAAA;AACH;;AC5JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAaqC,UAAU,gBAAA,UAAA,MAAA,EAAA;AAAA,EAAA,cAAA,CAAA,UAAA,EAAA,MAAA,CAAA,CAAA;AACrB,EAAA,SAAA,UAAA,CAAYC,OAAO,EAAE;AAAA,IAAA,IAAA,KAAA,CAAA;IACnB,KAAO,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA;IACP,KAAKjB,CAAAA,IAAI,GAAG,YAAY,CAAA;IACxB,KAAKiB,CAAAA,OAAO,GAAGA,OAAO,CAAA;AAAC,IAAA,OAAA,KAAA,CAAA;AACzB,GAAA;AAAC,EAAA,OAAA,UAAA,CAAA;AAAA,CAAA,eAAA,gBAAA,CAL6BC,KAAK,CAAA,CAAA,CAAA;AAQrC,IAAaC,0BAA0B,gBAAA,UAAA,WAAA,EAAA;AAAA,EAAA,cAAA,CAAA,0BAAA,EAAA,WAAA,CAAA,CAAA;AACrC,EAAA,SAAA,0BAAA,CAAYF,OAAO,EAAE;AAAA,IAAA,IAAA,MAAA,CAAA;AACnB,IAAA,MAAA,GAAA,WAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAO,CAAC,IAAA,IAAA,CAAA;IACd,MAAKjB,CAAAA,IAAI,GAAG,4BAA4B,CAAA;;AAExC;AACA,IAAA,IAAI,OAAOkB,KAAK,CAACE,iBAAiB,KAAK,UAAU,EAC/CF,KAAK,CAACE,iBAAiB,iCAErBD,0BAA0B,CAACE,SAAS,CAACC,WAAW,CACjD,CAAA;AAAC,IAAA,OAAA,MAAA,CAAA;AACN,GAAA;AAAC,EAAA,OAAA,0BAAA,CAAA;AAAA,CAAA,CAX6CN,UAAU,CAAA,CAAA;AAc1D,IAAaO,kBAAkB,gBAAA,UAAA,YAAA,EAAA;AAAA,EAAA,cAAA,CAAA,kBAAA,EAAA,YAAA,CAAA,CAAA;AAC7B,EAAA,SAAA,kBAAA,CAAYN,OAAO,EAAE;AAAA,IAAA,IAAA,MAAA,CAAA;AACnB,IAAA,MAAA,GAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAO,CAAC,IAAA,IAAA,CAAA;IACd,MAAKjB,CAAAA,IAAI,GAAG,oBAAoB,CAAA;;AAEhC;AACA,IAAA,IAAI,OAAOkB,KAAK,CAACE,iBAAiB,KAAK,UAAU,EAC/CF,KAAK,CAACE,iBAAiB,iCAAOG,kBAAkB,CAACF,SAAS,CAACC,WAAW,CAAC,CAAA;AAAC,IAAA,OAAA,MAAA,CAAA;AAC5E,GAAA;AAAC,EAAA,OAAA,kBAAA,CAAA;AAAA,CAAA,CARqCN,UAAU,CAAA,CAAA;AAWlD,IAAaQ,eAAe,gBAAA,UAAA,YAAA,EAAA;AAAA,EAAA,cAAA,CAAA,eAAA,EAAA,YAAA,CAAA,CAAA;AAC1B,EAAA,SAAA,eAAA,CAAYP,OAAO,EAAE;AAAA,IAAA,IAAA,MAAA,CAAA;AACnB,IAAA,MAAA,GAAA,YAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAO,CAAC,IAAA,IAAA,CAAA;IACd,MAAKjB,CAAAA,IAAI,GAAG,iBAAiB,CAAA;;AAE7B;AACA,IAAA,IAAI,OAAOkB,KAAK,CAACE,iBAAiB,KAAK,UAAU,EAC/CF,KAAK,CAACE,iBAAiB,iCAAOI,eAAe,CAACH,SAAS,CAACC,WAAW,CAAC,CAAA;AAAC,IAAA,OAAA,MAAA,CAAA;AACzE,GAAA;AAAC,EAAA,OAAA,eAAA,CAAA;AAAA,CAAA,CARkCN,UAAU,CAAA;;ACzC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASS,aAAa,CAACC,GAAG,EAAEjB,UAAU,EAAE;AAC7C;EACA,IAAI,CAACiB,GAAG,GAAGA,GAAG,CAAA;EACd,IAAI,CAACjB,UAAU,GAAGA,UAAU,CAAA;EAE5B,IAAI,CAACkB,KAAK,EAAE,CAAA;AACd,CAAA;AAEAF,aAAa,CAACJ,SAAS,CAACM,KAAK,GAAG,YAAY;AAC1C;EACA,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAA;EACjB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAA;EAClB,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAA;EACzB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAA;EACxB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAA;;AAEtB;EACA,IAAI,CAAA,IAAA,CAAG,GAAG,EAAE,CAAA;AACZ,EAAA,IAAI,CAACvC,GAAG,GAAG,EAAE,CAAA;AACb,EAAA,IAAI,CAACC,UAAU,GAAG,EAAE,CAAA;AACtB,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASuC,gBAAgB,CAACP,GAAG,EAAEjB,UAAU,EAAE;AAChD;EACA,IAAI,CAACiB,GAAG,GAAGA,GAAG,CAAA;EACd,IAAI,CAACjB,UAAU,GAAGA,UAAU,CAAA;EAE5B,IAAI,CAACkB,KAAK,EAAE,CAAA;AACd,CAAA;AAEAM,gBAAgB,CAACZ,SAAS,CAACM,KAAK,GAAG,YAAY;AAC7C;EACA,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAA;EACjB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAA;EAClB,IAAI,CAACG,aAAa,GAAG,CAAC,CAAA;;AAEtB;EACA,IAAI,CAAA,IAAA,CAAG,GAAG,EAAE,CAAA;AACZ,EAAA,IAAI,CAACvC,GAAG,GAAG,EAAE,CAAA;AACf,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASyC,kBAAkB,CAACR,GAAG,EAAEjB,UAAU,EAAE;AAClD;EACA,IAAI,CAACiB,GAAG,GAAGA,GAAG,CAAA;EACd,IAAI,CAACjB,UAAU,GAAGA,UAAU,CAAA;EAE5B,IAAI,CAACkB,KAAK,EAAE,CAAA;AACd,CAAA;AAEAO,kBAAkB,CAACb,SAAS,CAACM,KAAK,GAAG,YAAY;AAC/C;EACA,IAAI,CAACG,gBAAgB,GAAG,CAAC,CAAA;EACzB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAA;;AAExB;AACA,EAAA,IAAI,CAACrC,UAAU,GAAG,EAAE,CAAA;AACtB,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASyC,QAAQ,CAACzC,UAAU,EAAEgC,GAAG,EAAEvC,MAAM,EAAEV,MAAM,EAAEgC,UAAU,EAAE;AACpE;EACA,IAAI,CAACiB,GAAG,GAAGA,GAAG,CAAA;EACd,IAAI,CAACjB,UAAU,GAAGA,UAAU,CAAA;EAC5B,IAAI,CAACf,UAAU,GAAGA,UAAU,CAAA;;AAE5B;EACA,IAAI,CAACP,MAAM,GAAGA,MAAM,CAAA;EACpB,IAAI,CAACV,MAAM,GAAGA,MAAM,CAAA;AACtB,CAAA;AAEA0D,QAAQ,CAACd,SAAS,CAACe,MAAM,GAAG,YAAY;EACtC,IAAIC,MAAM,GAAG,KAAK,CAAA;EAClB,IAAIC,KAAK,GAAG,IAAI,CAAA;EAEhB,IAAI,IAAI,CAAC5C,UAAU,EAAE2C,MAAM,GAAGC,KAAK,GAAG,YAAY,CAAA;AAElD,EAAA,IAAMnD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACuC,GAAG,CAAA;AAC9B,EAAA,IAAMjD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiD,GAAG,CAAA;;AAE9B;EACA,IAAI,CAACvC,MAAM,CAACkD,MAAM,CAAC,CAAC5D,MAAM,CAAC,GAAG,IAAI,CAAA;AAElC,EAAA,IAAI,IAAI,CAACiB,UAAU,IAAIP,MAAM,KAAKV,MAAM,EAAE,OAAA;;AAE1C;EACA,IAAI,CAACA,MAAM,CAAC6D,KAAK,CAAC,CAACnD,MAAM,CAAC,GAAG,IAAI,CAAA;AACnC,CAAC,CAAA;AAEDgD,QAAQ,CAACd,SAAS,CAACkB,WAAW,GAAG,YAAY;EAC3C,IAAIF,MAAM,GAAG,KAAK,CAAA;EAClB,IAAIC,KAAK,GAAG,IAAI,CAAA;AAEhB,EAAA,IAAMnD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACuC,GAAG,CAAA;AAC9B,EAAA,IAAMjD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiD,GAAG,CAAA;EAE9B,IAAI,IAAI,CAAChC,UAAU,EAAE2C,MAAM,GAAGC,KAAK,GAAG,YAAY,CAAA;;AAElD;AACA,EAAA,IAAME,GAAG,GAAG,IAAI,CAACrD,MAAM,CAACkD,MAAM,CAAC,CAAA;AAC/B,EAAA,IAAMI,IAAI,GAAGD,GAAG,CAAC/D,MAAM,CAAC,CAAA;AAExB,EAAA,IAAI,OAAOgE,IAAI,KAAK,WAAW,EAAE;AAC/BD,IAAAA,GAAG,CAAC/D,MAAM,CAAC,GAAG,IAAI,CAAA;;AAElB;IACA,IAAI,EAAE,IAAI,CAACiB,UAAU,IAAIP,MAAM,KAAKV,MAAM,CAAC,EAAE;AAC3C;MACA,IAAI,CAACA,MAAM,CAAC6D,KAAK,CAAC,CAACnD,MAAM,CAAC,GAAG,IAAI,CAAA;AACnC,KAAA;AAEA,IAAA,OAAA;AACF,GAAA;;AAEA;EACAsD,IAAI,CAACC,QAAQ,GAAG,IAAI,CAAA;EACpB,IAAI,CAACC,IAAI,GAAGF,IAAI,CAAA;;AAEhB;AACA;AACAD,EAAAA,GAAG,CAAC/D,MAAM,CAAC,GAAG,IAAI,CAAA;EAClB,IAAI,CAACA,MAAM,CAAC6D,KAAK,CAAC,CAACnD,MAAM,CAAC,GAAG,IAAI,CAAA;AACnC,CAAC,CAAA;AAEDgD,QAAQ,CAACd,SAAS,CAACuB,MAAM,GAAG,YAAY;AACtC,EAAA,IAAMzD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACuC,GAAG,CAAA;AAC9B,EAAA,IAAMjD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiD,GAAG,CAAA;EAE9B,IAAIW,MAAM,GAAG,KAAK,CAAA;EAClB,IAAIC,KAAK,GAAG,IAAI,CAAA;EAEhB,IAAI,IAAI,CAAC5C,UAAU,EAAE2C,MAAM,GAAGC,KAAK,GAAG,YAAY,CAAA;EAElD,OAAO,IAAI,CAACnD,MAAM,CAACkD,MAAM,CAAC,CAAC5D,MAAM,CAAC,CAAA;;AAElC;EACA,OAAO,IAAI,CAACA,MAAM,CAAC6D,KAAK,CAAC,CAACnD,MAAM,CAAC,CAAA;AACnC,CAAC,CAAA;AAEDgD,QAAQ,CAACd,SAAS,CAACwB,WAAW,GAAG,YAAY;AAC3C,EAAA,IAAM1D,MAAM,GAAG,IAAI,CAACA,MAAM,CAACuC,GAAG,CAAA;AAC9B,EAAA,IAAMjD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiD,GAAG,CAAA;EAE9B,IAAIW,MAAM,GAAG,KAAK,CAAA;EAClB,IAAIC,KAAK,GAAG,IAAI,CAAA;EAEhB,IAAI,IAAI,CAAC5C,UAAU,EAAE2C,MAAM,GAAGC,KAAK,GAAG,YAAY,CAAA;;AAElD;AACA,EAAA,IAAI,IAAI,CAACI,QAAQ,KAAKI,SAAS,EAAE;AAC/B;;AAEA;AACA,IAAA,IAAI,IAAI,CAACH,IAAI,KAAKG,SAAS,EAAE;MAC3B,OAAO,IAAI,CAAC3D,MAAM,CAACkD,MAAM,CAAC,CAAC5D,MAAM,CAAC,CAAA;;AAElC;MACA,OAAO,IAAI,CAACA,MAAM,CAAC6D,KAAK,CAAC,CAACnD,MAAM,CAAC,CAAA;AACnC,KAAC,MAAM;AACL;AACA,MAAA,IAAI,CAACwD,IAAI,CAACD,QAAQ,GAAGI,SAAS,CAAA;;AAE9B;MACA,IAAI,CAAC3D,MAAM,CAACkD,MAAM,CAAC,CAAC5D,MAAM,CAAC,GAAG,IAAI,CAACkE,IAAI,CAAA;;AAEvC;MACA,IAAI,CAAClE,MAAM,CAAC6D,KAAK,CAAC,CAACnD,MAAM,CAAC,GAAG,IAAI,CAACwD,IAAI,CAAA;AACxC,KAAA;AACF,GAAC,MAAM;AACL;AACA,IAAA,IAAI,CAACD,QAAQ,CAACC,IAAI,GAAG,IAAI,CAACA,IAAI,CAAA;;AAE9B;AACA,IAAA,IAAI,IAAI,CAACA,IAAI,KAAKG,SAAS,EAAE;AAC3B,MAAA,IAAI,CAACH,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAA;AACpC,KAAA;AACF,GAAA;AACF,CAAC;;ACzND;AACA;AACA;AACA;AAKA,IAAMK,IAAI,GAAG,CAAC,CAAA;AACd,IAAMC,MAAM,GAAG,CAAC,CAAA;AAChB,IAAMC,MAAM,GAAG,CAAC,CAAA;AAChB,IAAMC,QAAQ,GAAG,CAAC,CAAA;AAElB,SAASC,oBAAoB,CAC3BjE,KAAK,EACLkE,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,EACJC,IAAI,EACJ;AACA,EAAA,IAAIC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,CAAA;EAElCP,UAAU,GAAG,EAAE,GAAGA,UAAU,CAAA;EAE5B,IAAID,IAAI,KAAKN,IAAI,EAAE;IACjBW,QAAQ,GAAGxE,KAAK,CAACI,MAAM,CAACC,GAAG,CAAC+D,UAAU,CAAC,CAAA;IAEvC,IAAI,CAACI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyBE,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,UAAU,EACnD,uBAAA,CAAA,CAAA,CAAA;AAEHM,IAAAA,IAAI,GAAGL,UAAU,CAAA;AACjBM,IAAAA,IAAI,GAAGL,IAAI,CAAA;AACb,GAAC,MAAM,IAAIH,IAAI,KAAKH,QAAQ,EAAE;IAC5BK,UAAU,GAAG,EAAE,GAAGA,UAAU,CAAA;IAE5BI,QAAQ,GAAGzE,KAAK,CAAC4E,MAAM,CAACvE,GAAG,CAACgE,UAAU,CAAC,CAAA;IAEvC,IAAI,CAACI,QAAQ,EACX,MAAM,IAAIpC,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyBG,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,UAAU,EACnD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAMpE,MAAM,GAAGwE,QAAQ,CAACxE,MAAM,CAACuC,GAAG,CAAA;AAClC,IAAA,IAAMjD,MAAM,GAAGkF,QAAQ,CAAClF,MAAM,CAACiD,GAAG,CAAA;IAElC,IAAI4B,UAAU,KAAKnE,MAAM,EAAE;MACzBuE,QAAQ,GAAGC,QAAQ,CAAClF,MAAM,CAAA;AAC5B,KAAC,MAAM,IAAI6E,UAAU,KAAK7E,MAAM,EAAE;MAChCiF,QAAQ,GAAGC,QAAQ,CAACxE,MAAM,CAAA;AAC5B,KAAC,MAAM;AACL,MAAA,MAAM,IAAIoC,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAUE,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,UAAU,EAAkCC,mCAAAA,CAAAA,CAAAA,MAAAA,CAAAA,UAAU,EAAWpE,WAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAKV,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAC5G,IAAA,CAAA,CAAA,CAAA;AACH,KAAA;AAEAmF,IAAAA,IAAI,GAAGJ,IAAI,CAAA;AACXK,IAAAA,IAAI,GAAGJ,IAAI,CAAA;AACb,GAAC,MAAM;IACLE,QAAQ,GAAGzE,KAAK,CAAC4E,MAAM,CAACvE,GAAG,CAAC+D,UAAU,CAAC,CAAA;IAEvC,IAAI,CAACK,QAAQ,EACX,MAAM,IAAIpC,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyBE,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,UAAU,EACnD,uBAAA,CAAA,CAAA,CAAA;IAEH,IAAID,IAAI,KAAKL,MAAM,EAAE;MACnBU,QAAQ,GAAGC,QAAQ,CAACxE,MAAM,CAAA;AAC5B,KAAC,MAAM;MACLuE,QAAQ,GAAGC,QAAQ,CAAClF,MAAM,CAAA;AAC5B,KAAA;AAEAmF,IAAAA,IAAI,GAAGL,UAAU,CAAA;AACjBM,IAAAA,IAAI,GAAGL,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,OAAO,CAACE,QAAQ,EAAEE,IAAI,EAAEC,IAAI,CAAC,CAAA;AAC/B,CAAA;AAEA,SAASE,yBAAyB,CAACC,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;AACtDW,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAEC,IAAI,EAAE;AAChE,IAAA,IAAA,qBAAA,GAAqBL,oBAAoB,CACvC,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,CACL;MAPMS,IAAI,GAAA,qBAAA,CAAA,CAAA,CAAA;MAAEjE,IAAI,GAAA,qBAAA,CAAA,CAAA,CAAA,CAAA;AASjB,IAAA,OAAOiE,IAAI,CAACxD,UAAU,CAACT,IAAI,CAAC,CAAA;GAC7B,CAAA;AACH,CAAA;AAEA,SAASkE,0BAA0B,CAACF,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;EACvDW,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAE;IAC1D,IAAeJ,sBAAAA,GAAAA,oBAAoB,CACjC,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,CACX;MANMU,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;IAQX,OAAOA,IAAI,CAACxD,UAAU,CAAA;GACvB,CAAA;AACH,CAAA;AAEA,SAAS0D,0BAA0B,CAACH,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;AACvDW,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAEC,IAAI,EAAE;AAChE,IAAA,IAAA,sBAAA,GAAqBL,oBAAoB,CACvC,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,CACL;MAPMS,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAEjE,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;AASjB,IAAA,OAAOiE,IAAI,CAACxD,UAAU,CAAC2D,cAAc,CAACpE,IAAI,CAAC,CAAA;GAC5C,CAAA;AACH,CAAA;AAEA,SAASqE,yBAAyB,CAACL,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;AACtDW,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAEC,IAAI,EAAEC,IAAI,EAAE;AACtE,IAAA,IAAA,sBAAA,GAA4BN,oBAAoB,CAC9C,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,EACJC,IAAI,CACL;MARMQ,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAEjE,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAEJ,KAAK,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;AAUxBqE,IAAAA,IAAI,CAACxD,UAAU,CAACT,IAAI,CAAC,GAAGJ,KAAK,CAAA;;AAE7B;AACA,IAAA,IAAI,CAAC0E,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,KAAK;MACXqB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BT,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;AAEA,SAASuE,0BAA0B,CAACP,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;AACvDW,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAEC,IAAI,EAAEC,IAAI,EAAE;AACtE,IAAA,IAAA,sBAAA,GAA8BN,oBAAoB,CAChD,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,EACJC,IAAI,CACL;MARMQ,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAEjE,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAEwE,OAAO,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;IAU1B,IAAI,OAAOA,OAAO,KAAK,UAAU,EAC/B,MAAM,IAAIrD,0BAA0B,CACzBiC,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,iCAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAM3C,UAAU,GAAGwD,IAAI,CAACxD,UAAU,CAAA;IAClC,IAAMb,KAAK,GAAG4E,OAAO,CAAC/D,UAAU,CAACT,IAAI,CAAC,CAAC,CAAA;AAEvCS,IAAAA,UAAU,CAACT,IAAI,CAAC,GAAGJ,KAAK,CAAA;;AAExB;AACA,IAAA,IAAI,CAAC0E,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,KAAK;MACXqB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BT,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;AAEA,SAASyE,0BAA0B,CAACT,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;AACvDW,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAEC,IAAI,EAAE;AAChE,IAAA,IAAA,sBAAA,GAAqBL,oBAAoB,CACvC,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,CACL;MAPMS,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAEjE,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;AASjB,IAAA,OAAOiE,IAAI,CAACxD,UAAU,CAACT,IAAI,CAAC,CAAA;;AAE5B;AACA,IAAA,IAAI,CAACsE,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,QAAQ;MACdqB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BT,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;AAEA,SAAS0E,4BAA4B,CAACV,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;AACzDW,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAEC,IAAI,EAAE;AAChE,IAAA,IAAA,sBAAA,GAA2BL,oBAAoB,CAC7C,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,CACL;MAPMS,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAExD,UAAU,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;IASvB,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC,EAC5B,MAAM,IAAIU,0BAA0B,CACzBiC,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,+CAAA,CAAA,CAAA,CAAA;IAEHa,IAAI,CAACxD,UAAU,GAAGA,UAAU,CAAA;;AAE5B;AACA,IAAA,IAAI,CAAC6D,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,SAAS;MACfqB,UAAU,EAAEwD,IAAI,CAACxD,UAAAA;AACnB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;AAEA,SAASkE,0BAA0B,CAACX,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;AACvDW,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAEC,IAAI,EAAE;AAChE,IAAA,IAAA,sBAAA,GAA2BL,oBAAoB,CAC7C,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,CACL;MAPMS,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAExD,UAAU,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;IASvB,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC,EAC5B,MAAM,IAAIU,0BAA0B,CACzBiC,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,+CAAA,CAAA,CAAA,CAAA;AAEHrE,IAAAA,MAAM,CAACkF,IAAI,CAACxD,UAAU,EAAEA,UAAU,CAAC,CAAA;;AAEnC;AACA,IAAA,IAAI,CAAC6D,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,OAAO;MACbqB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BwD,MAAAA,IAAI,EAAExD,UAAAA;AACR,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;AAEA,SAASmE,2BAA2B,CAACZ,KAAK,EAAEZ,MAAM,EAAEC,IAAI,EAAE;AACxDW,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAUE,UAAU,EAAEC,UAAU,EAAEC,IAAI,EAAE;AAChE,IAAA,IAAA,sBAAA,GAAwBL,oBAAoB,CAC1C,IAAI,EACJC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,CACL;MAPMS,IAAI,GAAA,sBAAA,CAAA,CAAA,CAAA;MAAEO,OAAO,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;IASpB,IAAI,OAAOA,OAAO,KAAK,UAAU,EAC/B,MAAM,IAAIrD,0BAA0B,CACzBiC,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uCAAA,CAAA,CAAA,CAAA;IAEHa,IAAI,CAACxD,UAAU,GAAG+D,OAAO,CAACP,IAAI,CAACxD,UAAU,CAAC,CAAA;;AAE1C;AACA,IAAA,IAAI,CAAC6D,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,QAAQ;MACdqB,UAAU,EAAEwD,IAAI,CAACxD,UAAAA;AACnB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA,IAAMoE,uBAAuB,GAAG,CAC9B;EACE7E,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAUA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AACzCC,EAAAA,QAAQ,EAAEhB,yBAAAA;AACZ,CAAC,EACD;EACE/D,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAUA,OAAO,EAAA,YAAA,CAAA,CAAA;GAAY;AAC1CC,EAAAA,QAAQ,EAAEb,0BAAAA;AACZ,CAAC,EACD;EACElE,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAUA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AACzCC,EAAAA,QAAQ,EAAEZ,0BAAAA;AACZ,CAAC,EACD;EACEnE,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAUA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AACzCC,EAAAA,QAAQ,EAAEV,yBAAAA;AACZ,CAAC,EACD;EACErE,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,QAAA,CAAA,MAAA,CAAaA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AAC5CC,EAAAA,QAAQ,EAAER,0BAAAA;AACZ,CAAC,EACD;EACEvE,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,QAAA,CAAA,MAAA,CAAaA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AAC5CC,EAAAA,QAAQ,EAAEN,0BAAAA;AACZ,CAAC,EACD;EACEzE,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,SAAA,CAAA,MAAA,CAAcA,OAAO,EAAA,YAAA,CAAA,CAAA;GAAY;AAC9CC,EAAAA,QAAQ,EAAEL,4BAAAA;AACZ,CAAC,EACD;EACE1E,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,OAAA,CAAA,MAAA,CAAYA,OAAO,EAAA,YAAA,CAAA,CAAA;GAAY;AAC5CC,EAAAA,QAAQ,EAAEJ,0BAAAA;AACZ,CAAC,EACD;EACE3E,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,QAAA,CAAA,MAAA,CAAaA,OAAO,EAAA,YAAA,CAAA,CAAA;GAAY;AAC7CC,EAAAA,QAAQ,EAAEH,2BAAAA;AACZ,CAAC,CACF,CAAA;;AAED;AACA;AACA;AACA;AACA;AACe,SAASI,2BAA2B,CAACC,KAAK,EAAE;EACzDJ,uBAAuB,CAACK,OAAO,CAAC,UAA4B,IAAA,EAAA;IAAA,IAAjBlF,IAAI,QAAJA,IAAI;AAAE+E,MAAAA,QAAQ,QAARA,QAAQ,CAAA;AACvD;IACAA,QAAQ,CAACE,KAAK,EAAEjF,IAAI,CAAC,MAAM,CAAC,EAAE+C,IAAI,CAAC,CAAA;;AAEnC;IACAgC,QAAQ,CAACE,KAAK,EAAEjF,IAAI,CAAC,QAAQ,CAAC,EAAEgD,MAAM,CAAC,CAAA;;AAEvC;IACA+B,QAAQ,CAACE,KAAK,EAAEjF,IAAI,CAAC,QAAQ,CAAC,EAAEiD,MAAM,CAAC,CAAA;;AAEvC;IACA8B,QAAQ,CAACE,KAAK,EAAEjF,IAAI,CAAC,UAAU,CAAC,EAAEkD,QAAQ,CAAC,CAAA;AAC7C,GAAC,CAAC,CAAA;AACJ;;ACxWA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiC,yBAAyB,CAACnB,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAE9E,IAAI,EAAE;AACjD,IAAA,IAAIiE,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO,CAAA;AAC3B,MAAA,IAAMrG,MAAM,GAAG,EAAE,GAAGuB,IAAI,CAAA;AAExBA,MAAAA,IAAI,GAAGtB,SAAS,CAAC,CAAC,CAAC,CAAA;MAEnBuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;AAEA,IAAA,OAAOb,IAAI,CAACxD,UAAU,CAACT,IAAI,CAAC,CAAA;GAC7B,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqF,0BAA0B,CAACrB,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAE;AAC3C,IAAA,IAAIb,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO;AACzBrG,QAAAA,MAAM,GAAG,EAAE,GAAGC,SAAS,CAAC,CAAC,CAAC,CAAA;MAE5BuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;IAEA,OAAOb,IAAI,CAACxD,UAAU,CAAA;GACvB,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6E,0BAA0B,CAACtB,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAE9E,IAAI,EAAE;AACjD,IAAA,IAAIiE,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO,CAAA;AAC3B,MAAA,IAAMrG,MAAM,GAAG,EAAE,GAAGuB,IAAI,CAAA;AAExBA,MAAAA,IAAI,GAAGtB,SAAS,CAAC,CAAC,CAAC,CAAA;MAEnBuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;AAEA,IAAA,OAAOb,IAAI,CAACxD,UAAU,CAAC2D,cAAc,CAACpE,IAAI,CAAC,CAAA;GAC5C,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuF,yBAAyB,CAACvB,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE4E,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAE9E,IAAI,EAAEJ,KAAK,EAAE;AACxD,IAAA,IAAIqE,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO,CAAA;AAC3B,MAAA,IAAMrG,MAAM,GAAG,EAAE,GAAGuB,IAAI,CAAA;AAExBA,MAAAA,IAAI,GAAGtB,SAAS,CAAC,CAAC,CAAC,CAAA;AACnBkB,MAAAA,KAAK,GAAGlB,SAAS,CAAC,CAAC,CAAC,CAAA;MAEpBuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;AAEAb,IAAAA,IAAI,CAACxD,UAAU,CAACT,IAAI,CAAC,GAAGJ,KAAK,CAAA;;AAE7B;AACA,IAAA,IAAI,CAAC0E,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,KAAK;MACXqB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BT,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwF,0BAA0B,CAACxB,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE4E,EAAAA,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAE9E,IAAI,EAAEwE,OAAO,EAAE;AAC1D,IAAA,IAAIP,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO,CAAA;AAC3B,MAAA,IAAMrG,MAAM,GAAG,EAAE,GAAGuB,IAAI,CAAA;AAExBA,MAAAA,IAAI,GAAGtB,SAAS,CAAC,CAAC,CAAC,CAAA;AACnB8F,MAAAA,OAAO,GAAG9F,SAAS,CAAC,CAAC,CAAC,CAAA;MAEtBuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;IAEA,IAAI,OAAON,OAAO,KAAK,UAAU,EAC/B,MAAM,IAAIrD,0BAA0B,CACzBiC,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,iCAAA,CAAA,CAAA,CAAA;AAEHa,IAAAA,IAAI,CAACxD,UAAU,CAACT,IAAI,CAAC,GAAGwE,OAAO,CAACP,IAAI,CAACxD,UAAU,CAACT,IAAI,CAAC,CAAC,CAAA;;AAEtD;AACA,IAAA,IAAI,CAACsE,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,KAAK;MACXqB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BT,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyF,0BAA0B,CAACzB,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAE9E,IAAI,EAAE;AACjD,IAAA,IAAIiE,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO,CAAA;AAC3B,MAAA,IAAMrG,MAAM,GAAG,EAAE,GAAGuB,IAAI,CAAA;AAExBA,MAAAA,IAAI,GAAGtB,SAAS,CAAC,CAAC,CAAC,CAAA;MAEnBuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;AAEA,IAAA,OAAOb,IAAI,CAACxD,UAAU,CAACT,IAAI,CAAC,CAAA;;AAE5B;AACA,IAAA,IAAI,CAACsE,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,QAAQ;MACdqB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BT,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0F,4BAA4B,CAAC1B,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACzD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAErE,UAAU,EAAE;AACvD,IAAA,IAAIwD,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO;QACzBrG,MAAM,GAAG,EAAE,GAAGgC,UAAU,CAAA;AAE1BA,MAAAA,UAAU,GAAG/B,SAAS,CAAC,CAAC,CAAC,CAAA;MAEzBuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;IAEA,IAAI,CAACnF,aAAa,CAACc,UAAU,CAAC,EAC5B,MAAM,IAAIU,0BAA0B,CACzBiC,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,+CAAA,CAAA,CAAA,CAAA;IAEHa,IAAI,CAACxD,UAAU,GAAGA,UAAU,CAAA;;AAE5B;AACA,IAAA,IAAI,CAAC6D,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,SAAS;MACfqB,UAAU,EAAEwD,IAAI,CAACxD,UAAAA;AACnB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkF,0BAA0B,CAAC3B,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAErE,UAAU,EAAE;AACvD,IAAA,IAAIwD,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO;QACzBrG,MAAM,GAAG,EAAE,GAAGgC,UAAU,CAAA;AAE1BA,MAAAA,UAAU,GAAG/B,SAAS,CAAC,CAAC,CAAC,CAAA;MAEzBuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;IAEA,IAAI,CAACnF,aAAa,CAACc,UAAU,CAAC,EAC5B,MAAM,IAAIU,0BAA0B,CACzBiC,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,+CAAA,CAAA,CAAA,CAAA;AAEHrE,IAAAA,MAAM,CAACkF,IAAI,CAACxD,UAAU,EAAEA,UAAU,CAAC,CAAA;;AAEnC;AACA,IAAA,IAAI,CAAC6D,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,OAAO;MACbqB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BwD,MAAAA,IAAI,EAAExD,UAAAA;AACR,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmF,2BAA2B,CAAC5B,KAAK,EAAEZ,MAAM,EAAEhE,IAAI,EAAE;AACxD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,KAAK,CAAC3C,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAU0B,OAAO,EAAEN,OAAO,EAAE;AACpD,IAAA,IAAIP,IAAI,CAAA;IAER,IAAI,IAAI,CAAC7E,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAA4C,2CAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAChE,IAAI,EACrE,SAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIV,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,IAAI,IAAI,CAACuG,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uJAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAMjE,MAAM,GAAG,EAAE,GAAG2F,OAAO;QACzBrG,MAAM,GAAG,EAAE,GAAG+F,OAAO,CAAA;AAEvBA,MAAAA,OAAO,GAAG9F,SAAS,CAAC,CAAC,CAAC,CAAA;MAEtBuF,IAAI,GAAGhF,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAEW,IAAI,CAAC,CAAA;AAElD,MAAA,IAAI,CAAC6E,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAiDjE,iDAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQV,SAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrF,MAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACL,IAAIW,IAAI,KAAK,OAAO,EAClB,MAAM,IAAIoC,eAAe,CACd4B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,4IAAA,CAAA,CAAA,CAAA;MAEH0B,OAAO,GAAG,EAAE,GAAGA,OAAO,CAAA;MACtBb,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACuF,OAAO,CAAC,CAAA;MAE/B,IAAI,CAACb,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CACjB6B,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAyB0B,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAO,EAChD,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;IAEA,IAAI,OAAON,OAAO,KAAK,UAAU,EAC/B,MAAM,IAAIrD,0BAA0B,CACzBiC,QAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAChB,uCAAA,CAAA,CAAA,CAAA;IAEHa,IAAI,CAACxD,UAAU,GAAG+D,OAAO,CAACP,IAAI,CAACxD,UAAU,CAAC,CAAA;;AAE1C;AACA,IAAA,IAAI,CAAC6D,IAAI,CAAC,uBAAuB,EAAE;MACjC5C,GAAG,EAAEuC,IAAI,CAACvC,GAAG;AACbtC,MAAAA,IAAI,EAAE,QAAQ;MACdqB,UAAU,EAAEwD,IAAI,CAACxD,UAAAA;AACnB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA,IAAMoF,uBAAuB,GAAG,CAC9B;EACE7F,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAUA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AACzCC,EAAAA,QAAQ,EAAEI,yBAAAA;AACZ,CAAC,EACD;EACEnF,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAUA,OAAO,EAAA,YAAA,CAAA,CAAA;GAAY;AAC1CC,EAAAA,QAAQ,EAAEM,0BAAAA;AACZ,CAAC,EACD;EACErF,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAUA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AACzCC,EAAAA,QAAQ,EAAEO,0BAAAA;AACZ,CAAC,EACD;EACEtF,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAUA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AACzCC,EAAAA,QAAQ,EAAEQ,yBAAAA;AACZ,CAAC,EACD;EACEvF,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,QAAA,CAAA,MAAA,CAAaA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AAC5CC,EAAAA,QAAQ,EAAES,0BAAAA;AACZ,CAAC,EACD;EACExF,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,QAAA,CAAA,MAAA,CAAaA,OAAO,EAAA,WAAA,CAAA,CAAA;GAAW;AAC5CC,EAAAA,QAAQ,EAAEU,0BAAAA;AACZ,CAAC,EACD;EACEzF,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,SAAA,CAAA,MAAA,CAAcA,OAAO,EAAA,YAAA,CAAA,CAAA;GAAY;AAC9CC,EAAAA,QAAQ,EAAEW,4BAAAA;AACZ,CAAC,EACD;EACE1F,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,OAAA,CAAA,MAAA,CAAYA,OAAO,EAAA,YAAA,CAAA,CAAA;GAAY;AAC5CC,EAAAA,QAAQ,EAAEY,0BAAAA;AACZ,CAAC,EACD;EACE3F,IAAI,EAAE,cAAA8E,OAAO,EAAA;AAAA,IAAA,OAAA,QAAA,CAAA,MAAA,CAAaA,OAAO,EAAA,YAAA,CAAA,CAAA;GAAY;AAC7CC,EAAAA,QAAQ,EAAEa,2BAAAA;AACZ,CAAC,CACF,CAAA;;AAED;AACA;AACA;AACA;AACA;AACe,SAASE,2BAA2B,CAACb,KAAK,EAAE;EACzDY,uBAAuB,CAACX,OAAO,CAAC,UAA4B,IAAA,EAAA;IAAA,IAAjBlF,IAAI,QAAJA,IAAI;AAAE+E,MAAAA,QAAQ,QAARA,QAAQ,CAAA;AACvD;IACAA,QAAQ,CAACE,KAAK,EAAEjF,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAA;;AAEtC;IACA+E,QAAQ,CAACE,KAAK,EAAEjF,IAAI,CAAC,cAAc,CAAC,EAAE,UAAU,CAAC,CAAA;;AAEjD;IACA+E,QAAQ,CAACE,KAAK,EAAEjF,IAAI,CAAC,gBAAgB,CAAC,EAAE,YAAY,CAAC,CAAA;AACvD,GAAC,CAAC,CAAA;AACJ;;ACpwBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA,IAAM+F,eAAe,GAAG,CACtB;AACE/F,EAAAA,IAAI,EAAE,OAAO;AACbZ,EAAAA,IAAI,EAAE,OAAA;AACR,CAAC,EACD;AACEY,EAAAA,IAAI,EAAE,SAAS;AACfZ,EAAAA,IAAI,EAAE,UAAU;AAChB4G,EAAAA,SAAS,EAAE,IAAA;AACb,CAAC,EACD;AACEhG,EAAAA,IAAI,EAAE,UAAU;AAChBZ,EAAAA,IAAI,EAAE,UAAU;AAChB4G,EAAAA,SAAS,EAAE,KAAA;AACb,CAAC,EACD;AACEhG,EAAAA,IAAI,EAAE,cAAc;AACpBZ,EAAAA,IAAI,EAAE,OAAO;AACb4G,EAAAA,SAAS,EAAE,IAAA;AACb,CAAC,EACD;AACEhG,EAAAA,IAAI,EAAE,eAAe;AACrBZ,EAAAA,IAAI,EAAE,OAAO;AACb4G,EAAAA,SAAS,EAAE,KAAA;AACb,CAAC,EACD;AACEhG,EAAAA,IAAI,EAAE,eAAe;AACrBZ,EAAAA,IAAI,EAAE,UAAA;AACR,CAAC,EACD;AACEY,EAAAA,IAAI,EAAE,iBAAiB;AACvBZ,EAAAA,IAAI,EAAE,YAAA;AACR,CAAC,CACF,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6G,aAAa,CAACC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE;EACzD,IAAIC,WAAW,GAAG,KAAK,CAAA;AAEvB,EAAA,KAAK,IAAMxH,CAAC,IAAIqH,MAAM,EAAE;IACtB,IAAIrH,CAAC,KAAKuH,KAAK,EAAE,SAAA;AAEjB,IAAA,IAAM1C,QAAQ,GAAGwC,MAAM,CAACrH,CAAC,CAAC,CAAA;AAE1BwH,IAAAA,WAAW,GAAGF,QAAQ,CACpBzC,QAAQ,CAACjC,GAAG,EACZiC,QAAQ,CAAClD,UAAU,EACnBkD,QAAQ,CAACxE,MAAM,CAACuC,GAAG,EACnBiC,QAAQ,CAAClF,MAAM,CAACiD,GAAG,EACnBiC,QAAQ,CAACxE,MAAM,CAACsB,UAAU,EAC1BkD,QAAQ,CAAClF,MAAM,CAACgC,UAAU,EAC1BkD,QAAQ,CAACjE,UAAU,CACpB,CAAA;AAED,IAAA,IAAIwG,SAAS,IAAII,WAAW,EAAE,OAAO3C,QAAQ,CAACjC,GAAG,CAAA;AACnD,GAAA;AAEA,EAAA,OAAA;AACF,CAAA;AAEA,SAAS6E,YAAY,CAACL,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE;AACxD,EAAA,IAAI1C,QAAQ,EAAExE,MAAM,EAAEV,MAAM,CAAA;EAE5B,IAAI6H,WAAW,GAAG,KAAK,CAAA;AAEvB,EAAA,KAAK,IAAMxH,CAAC,IAAIqH,MAAM,EAAE;IACtB,IAAIrH,CAAC,KAAKuH,KAAK,EAAE,SAAA;AAEjB1C,IAAAA,QAAQ,GAAGwC,MAAM,CAACrH,CAAC,CAAC,CAAA;IAEpB,GAAG;MACDK,MAAM,GAAGwE,QAAQ,CAACxE,MAAM,CAAA;MACxBV,MAAM,GAAGkF,QAAQ,CAAClF,MAAM,CAAA;AAExB6H,MAAAA,WAAW,GAAGF,QAAQ,CACpBzC,QAAQ,CAACjC,GAAG,EACZiC,QAAQ,CAAClD,UAAU,EACnBtB,MAAM,CAACuC,GAAG,EACVjD,MAAM,CAACiD,GAAG,EACVvC,MAAM,CAACsB,UAAU,EACjBhC,MAAM,CAACgC,UAAU,EACjBkD,QAAQ,CAACjE,UAAU,CACpB,CAAA;AAED,MAAA,IAAIwG,SAAS,IAAII,WAAW,EAAE,OAAO3C,QAAQ,CAACjC,GAAG,CAAA;MAEjDiC,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;KACzB,QAAQgB,QAAQ,KAAKb,SAAS,EAAA;AACjC,GAAA;AAEA,EAAA,OAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0D,cAAc,CAACL,MAAM,EAAEE,KAAK,EAAE;AACrC,EAAA,IAAMI,IAAI,GAAGzH,MAAM,CAACyH,IAAI,CAACN,MAAM,CAAC,CAAA;AAChC,EAAA,IAAMvH,CAAC,GAAG6H,IAAI,CAAC5H,MAAM,CAAA;AAErB,EAAA,IAAI8E,QAAQ,CAAA;EACZ,IAAIhF,CAAC,GAAG,CAAC,CAAA;AAET,EAAA,OAAO,IAAI+H,4BAAQ,CAAC,SAAS/D,IAAI,GAAG;IAClC,GAAG;MACD,IAAI,CAACgB,QAAQ,EAAE;AACb,QAAA,IAAIhF,CAAC,IAAIC,CAAC,EAAE,OAAO;AAAC+H,UAAAA,IAAI,EAAE,IAAA;SAAK,CAAA;AAE/B,QAAA,IAAM7H,CAAC,GAAG2H,IAAI,CAAC9H,CAAC,EAAE,CAAC,CAAA;QAEnB,IAAIG,CAAC,KAAKuH,KAAK,EAAE;AACf1C,UAAAA,QAAQ,GAAGb,SAAS,CAAA;AACpB,UAAA,SAAA;AACF,SAAA;AAEAa,QAAAA,QAAQ,GAAGwC,MAAM,CAACrH,CAAC,CAAC,CAAA;AACtB,OAAC,MAAM;QACL6E,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;AAC1B,OAAA;KACD,QAAQ,CAACgB,QAAQ,EAAA;IAElB,OAAO;AACLgD,MAAAA,IAAI,EAAE,KAAK;AACX/G,MAAAA,KAAK,EAAE;QACLJ,IAAI,EAAEmE,QAAQ,CAACjC,GAAG;QAClBjB,UAAU,EAAEkD,QAAQ,CAAClD,UAAU;AAC/BtB,QAAAA,MAAM,EAAEwE,QAAQ,CAACxE,MAAM,CAACuC,GAAG;AAC3BjD,QAAAA,MAAM,EAAEkF,QAAQ,CAAClF,MAAM,CAACiD,GAAG;AAC3BkF,QAAAA,gBAAgB,EAAEjD,QAAQ,CAACxE,MAAM,CAACsB,UAAU;AAC5CoG,QAAAA,gBAAgB,EAAElD,QAAQ,CAAClF,MAAM,CAACgC,UAAU;QAC5Cf,UAAU,EAAEiE,QAAQ,CAACjE,UAAAA;AACvB,OAAA;KACD,CAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoH,mBAAmB,CAACZ,SAAS,EAAEC,MAAM,EAAErH,CAAC,EAAEsH,QAAQ,EAAE;AAC3D,EAAA,IAAMzC,QAAQ,GAAGwC,MAAM,CAACrH,CAAC,CAAC,CAAA;EAE1B,IAAI,CAAC6E,QAAQ,EAAE,OAAA;AAEf,EAAA,IAAMtE,UAAU,GAAGsE,QAAQ,CAACxE,MAAM,CAAA;AAClC,EAAA,IAAM4H,UAAU,GAAGpD,QAAQ,CAAClF,MAAM,CAAA;AAElC,EAAA,IACE2H,QAAQ,CACNzC,QAAQ,CAACjC,GAAG,EACZiC,QAAQ,CAAClD,UAAU,EACnBpB,UAAU,CAACqC,GAAG,EACdqF,UAAU,CAACrF,GAAG,EACdrC,UAAU,CAACoB,UAAU,EACrBsG,UAAU,CAACtG,UAAU,EACrBkD,QAAQ,CAACjE,UAAU,CACpB,IACDwG,SAAS,EAET,OAAOvC,QAAQ,CAACjC,GAAG,CAAA;AACvB,CAAA;AAEA,SAASsF,kBAAkB,CAACd,SAAS,EAAEC,MAAM,EAAErH,CAAC,EAAEsH,QAAQ,EAAE;AAC1D,EAAA,IAAIzC,QAAQ,GAAGwC,MAAM,CAACrH,CAAC,CAAC,CAAA;EAExB,IAAI,CAAC6E,QAAQ,EAAE,OAAA;EAEf,IAAI2C,WAAW,GAAG,KAAK,CAAA;EAEvB,GAAG;AACDA,IAAAA,WAAW,GAAGF,QAAQ,CACpBzC,QAAQ,CAACjC,GAAG,EACZiC,QAAQ,CAAClD,UAAU,EACnBkD,QAAQ,CAACxE,MAAM,CAACuC,GAAG,EACnBiC,QAAQ,CAAClF,MAAM,CAACiD,GAAG,EACnBiC,QAAQ,CAACxE,MAAM,CAACsB,UAAU,EAC1BkD,QAAQ,CAAClF,MAAM,CAACgC,UAAU,EAC1BkD,QAAQ,CAACjE,UAAU,CACpB,CAAA;AAED,IAAA,IAAIwG,SAAS,IAAII,WAAW,EAAE,OAAO3C,QAAQ,CAACjC,GAAG,CAAA;IAEjDiC,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;GACzB,QAAQgB,QAAQ,KAAKb,SAAS,EAAA;AAE/B,EAAA,OAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmE,oBAAoB,CAACd,MAAM,EAAErH,CAAC,EAAE;AACvC,EAAA,IAAI6E,QAAQ,GAAGwC,MAAM,CAACrH,CAAC,CAAC,CAAA;AAExB,EAAA,IAAI6E,QAAQ,CAAChB,IAAI,KAAKG,SAAS,EAAE;IAC/B,OAAO,IAAI4D,4BAAQ,CAAC,YAAY;MAC9B,IAAI,CAAC/C,QAAQ,EAAE,OAAO;AAACgD,QAAAA,IAAI,EAAE,IAAA;OAAK,CAAA;AAElC,MAAA,IAAM/G,KAAK,GAAG;QACZJ,IAAI,EAAEmE,QAAQ,CAACjC,GAAG;QAClBjB,UAAU,EAAEkD,QAAQ,CAAClD,UAAU;AAC/BtB,QAAAA,MAAM,EAAEwE,QAAQ,CAACxE,MAAM,CAACuC,GAAG;AAC3BjD,QAAAA,MAAM,EAAEkF,QAAQ,CAAClF,MAAM,CAACiD,GAAG;AAC3BkF,QAAAA,gBAAgB,EAAEjD,QAAQ,CAACxE,MAAM,CAACsB,UAAU;AAC5CoG,QAAAA,gBAAgB,EAAElD,QAAQ,CAAClF,MAAM,CAACgC,UAAU;QAC5Cf,UAAU,EAAEiE,QAAQ,CAACjE,UAAAA;OACtB,CAAA;MAEDiE,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;MAExB,OAAO;AACLgE,QAAAA,IAAI,EAAE,KAAK;AACX/G,QAAAA,KAAK,EAALA,KAAAA;OACD,CAAA;AACH,KAAC,CAAC,CAAA;AACJ,GAAA;EAEA,OAAO8G,4BAAQ,CAACQ,EAAE,CAAC;IACjB1H,IAAI,EAAEmE,QAAQ,CAACjC,GAAG;IAClBjB,UAAU,EAAEkD,QAAQ,CAAClD,UAAU;AAC/BtB,IAAAA,MAAM,EAAEwE,QAAQ,CAACxE,MAAM,CAACuC,GAAG;AAC3BjD,IAAAA,MAAM,EAAEkF,QAAQ,CAAClF,MAAM,CAACiD,GAAG;AAC3BkF,IAAAA,gBAAgB,EAAEjD,QAAQ,CAACxE,MAAM,CAACsB,UAAU;AAC5CoG,IAAAA,gBAAgB,EAAElD,QAAQ,CAAClF,MAAM,CAACgC,UAAU;IAC5Cf,UAAU,EAAEiE,QAAQ,CAACjE,UAAAA;AACvB,GAAC,CAAC,CAAA;AACJ,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyH,eAAe,CAACjI,KAAK,EAAEE,IAAI,EAAE;AACpC,EAAA,IAAIF,KAAK,CAACkI,IAAI,KAAK,CAAC,EAAE,OAAO,EAAE,CAAA;EAE/B,IAAIhI,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAKF,KAAK,CAACE,IAAI,EAAE;AAC3C,IAAA,IAAI,OAAOsB,KAAK,CAAC2G,IAAI,KAAK,UAAU,EAClC,OAAO3G,KAAK,CAAC2G,IAAI,CAACnI,KAAK,CAAC4E,MAAM,CAAC2C,IAAI,EAAE,CAAC,CAAA;AAExC,IAAA,OAAOa,wBAAI,CAACpI,KAAK,CAAC4E,MAAM,CAAC2C,IAAI,EAAE,EAAEvH,KAAK,CAAC4E,MAAM,CAACsD,IAAI,CAAC,CAAA;AACrD,GAAA;AAEA,EAAA,IAAMA,IAAI,GACRhI,IAAI,KAAK,YAAY,GAAGF,KAAK,CAACqI,cAAc,GAAGrI,KAAK,CAACsI,YAAY,CAAA;AAEnE,EAAA,IAAMC,IAAI,GAAG,IAAI/G,KAAK,CAAC0G,IAAI,CAAC;IAC1BM,IAAI,GAAGtI,IAAI,KAAK,YAAY,CAAA;AAE9B,EAAA,IAAMuI,QAAQ,GAAGzI,KAAK,CAAC4E,MAAM,CAAC8D,MAAM,EAAE,CAAA;EAEtC,IAAIjJ,CAAC,GAAG,CAAC,CAAA;EACT,IAAIkJ,IAAI,EAAE5D,IAAI,CAAA;AAEd,EAAA,OAAS4D,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;IACrD1C,IAAI,GAAG4D,IAAI,CAACjI,KAAK,CAAA;AAEjB,IAAA,IAAIqE,IAAI,CAACvE,UAAU,KAAKgI,IAAI,EAAED,IAAI,CAAC9I,CAAC,EAAE,CAAC,GAAGsF,IAAI,CAACvC,GAAG,CAAA;AACpD,GAAA;AAEA,EAAA,OAAO+F,IAAI,CAAA;AACb,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,WAAW,CAAC5B,SAAS,EAAEhH,KAAK,EAAEE,IAAI,EAAEgH,QAAQ,EAAE;AACrD,EAAA,IAAIlH,KAAK,CAACkI,IAAI,KAAK,CAAC,EAAE,OAAA;EAEtB,IAAMW,YAAY,GAAG3I,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAKF,KAAK,CAACE,IAAI,CAAA;AAC5D,EAAA,IAAMsI,IAAI,GAAGtI,IAAI,KAAK,YAAY,CAAA;EAElC,IAAIyI,IAAI,EAAE5D,IAAI,CAAA;EACd,IAAIqC,WAAW,GAAG,KAAK,CAAA;AACvB,EAAA,IAAMqB,QAAQ,GAAGzI,KAAK,CAAC4E,MAAM,CAAC8D,MAAM,EAAE,CAAA;AAEtC,EAAA,OAASC,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;IACrD1C,IAAI,GAAG4D,IAAI,CAACjI,KAAK,CAAA;AAEjB,IAAA,IAAImI,YAAY,IAAI9D,IAAI,CAACvE,UAAU,KAAKgI,IAAI,EAAE,SAAA;AAE9C,IAAA,IAAA,KAAA,GAA0CzD,IAAI;AAAvCvC,MAAAA,GAAG,SAAHA,GAAG;AAAEjB,MAAAA,UAAU,SAAVA,UAAU;AAAEtB,MAAAA,MAAM,SAANA,MAAM;AAAEV,MAAAA,MAAM,SAANA,MAAM,CAAA;IAEtC6H,WAAW,GAAGF,QAAQ,CACpB1E,GAAG,EACHjB,UAAU,EACVtB,MAAM,CAACuC,GAAG,EACVjD,MAAM,CAACiD,GAAG,EACVvC,MAAM,CAACsB,UAAU,EACjBhC,MAAM,CAACgC,UAAU,EACjBwD,IAAI,CAACvE,UAAU,CAChB,CAAA;AAED,IAAA,IAAIwG,SAAS,IAAII,WAAW,EAAE,OAAO5E,GAAG,CAAA;AAC1C,GAAA;AAEA,EAAA,OAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsG,kBAAkB,CAAC9I,KAAK,EAAEE,IAAI,EAAE;EACvC,IAAIF,KAAK,CAACkI,IAAI,KAAK,CAAC,EAAE,OAAOV,4BAAQ,CAACuB,KAAK,EAAE,CAAA;EAE7C,IAAMF,YAAY,GAAG3I,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAKF,KAAK,CAACE,IAAI,CAAA;AAC5D,EAAA,IAAMsI,IAAI,GAAGtI,IAAI,KAAK,YAAY,CAAA;AAElC,EAAA,IAAMuI,QAAQ,GAAGzI,KAAK,CAAC4E,MAAM,CAAC8D,MAAM,EAAE,CAAA;AAEtC,EAAA,OAAO,IAAIlB,4BAAQ,CAAC,SAAS/D,IAAI,GAAG;IAClC,IAAIkF,IAAI,EAAE5D,IAAI,CAAA;;AAEd;AACA,IAAA,OAAO,IAAI,EAAE;AACX4D,MAAAA,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,CAAA;AAEtB,MAAA,IAAIkF,IAAI,CAAClB,IAAI,EAAE,OAAOkB,IAAI,CAAA;MAE1B5D,IAAI,GAAG4D,IAAI,CAACjI,KAAK,CAAA;AAEjB,MAAA,IAAImI,YAAY,IAAI9D,IAAI,CAACvE,UAAU,KAAKgI,IAAI,EAAE,SAAA;AAE9C,MAAA,MAAA;AACF,KAAA;AAEA,IAAA,IAAM9H,KAAK,GAAG;MACZJ,IAAI,EAAEyE,IAAI,CAACvC,GAAG;MACdjB,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BtB,MAAAA,MAAM,EAAE8E,IAAI,CAAC9E,MAAM,CAACuC,GAAG;AACvBjD,MAAAA,MAAM,EAAEwF,IAAI,CAACxF,MAAM,CAACiD,GAAG;AACvBkF,MAAAA,gBAAgB,EAAE3C,IAAI,CAAC9E,MAAM,CAACsB,UAAU;AACxCoG,MAAAA,gBAAgB,EAAE5C,IAAI,CAACxF,MAAM,CAACgC,UAAU;MACxCf,UAAU,EAAEuE,IAAI,CAACvE,UAAAA;KAClB,CAAA;IAED,OAAO;AAACE,MAAAA,KAAK,EAALA,KAAK;AAAE+G,MAAAA,IAAI,EAAE,KAAA;KAAM,CAAA;AAC7B,GAAC,CAAC,CAAA;AACJ,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuB,kBAAkB,CACzBhC,SAAS,EACTd,KAAK,EACLhG,IAAI,EACJ4G,SAAS,EACTtC,QAAQ,EACR0C,QAAQ,EACR;AACA,EAAA,IAAM+B,EAAE,GAAG/C,KAAK,GAAGmB,YAAY,GAAGN,aAAa,CAAA;AAE/C,EAAA,IAAImC,KAAK,CAAA;EAET,IAAIhJ,IAAI,KAAK,YAAY,EAAE;IACzB,IAAI4G,SAAS,KAAK,KAAK,EAAE;MACvBoC,KAAK,GAAGD,EAAE,CAACjC,SAAS,EAAExC,QAAQ,CAAA,IAAA,CAAG,EAAE0C,QAAQ,CAAC,CAAA;AAE5C,MAAA,IAAIF,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AACtC,KAAA;IACA,IAAIpC,SAAS,KAAK,IAAI,EAAE;AACtBoC,MAAAA,KAAK,GAAGD,EAAE,CACRjC,SAAS,EACTxC,QAAQ,CAACjE,GAAG,EACZ2G,QAAQ,EACR,CAACJ,SAAS,GAAGtC,QAAQ,CAAChC,GAAG,GAAGoB,SAAS,CACtC,CAAA;AAED,MAAA,IAAIoD,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AACtC,KAAA;AACF,GAAA;EAEA,IAAIhJ,IAAI,KAAK,UAAU,EAAE;IACvBgJ,KAAK,GAAGD,EAAE,CAACjC,SAAS,EAAExC,QAAQ,CAAChE,UAAU,EAAE0G,QAAQ,CAAC,CAAA;AAEpD,IAAA,IAAIF,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AACtC,GAAA;AAEA,EAAA,OAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsB,CAACjD,KAAK,EAAEhG,IAAI,EAAE4G,SAAS,EAAEtC,QAAQ,EAAE;AAChE,EAAA,IAAM4E,KAAK,GAAG,EAAE,CAAC;;AAEjBJ,EAAAA,kBAAkB,CAAC,KAAK,EAAE9C,KAAK,EAAEhG,IAAI,EAAE4G,SAAS,EAAEtC,QAAQ,EAAE,UAAUhC,GAAG,EAAE;AACzE4G,IAAAA,KAAK,CAACC,IAAI,CAAC7G,GAAG,CAAC,CAAA;AACjB,GAAC,CAAC,CAAA;AAEF,EAAA,OAAO4G,KAAK,CAAA;AACd,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,yBAAyB,CAACpJ,IAAI,EAAE4G,SAAS,EAAEtC,QAAQ,EAAE;AAC5D,EAAA,IAAIiE,QAAQ,GAAGjB,4BAAQ,CAACuB,KAAK,EAAE,CAAA;EAE/B,IAAI7I,IAAI,KAAK,YAAY,EAAE;IACzB,IAAI4G,SAAS,KAAK,KAAK,IAAI,OAAOtC,QAAQ,CAAA,IAAA,CAAG,KAAK,WAAW,EAC3DiE,QAAQ,GAAGc,yBAAK,CAACd,QAAQ,EAAEnB,cAAc,CAAC9C,QAAQ,CAAG,IAAA,CAAA,CAAC,CAAC,CAAA;AACzD,IAAA,IAAIsC,SAAS,KAAK,IAAI,IAAI,OAAOtC,QAAQ,CAACjE,GAAG,KAAK,WAAW,EAC3DkI,QAAQ,GAAGc,yBAAK,CACdd,QAAQ,EACRnB,cAAc,CAAC9C,QAAQ,CAACjE,GAAG,EAAE,CAACuG,SAAS,GAAGtC,QAAQ,CAAChC,GAAG,GAAGoB,SAAS,CAAC,CACpE,CAAA;AACL,GAAA;EAEA,IAAI1D,IAAI,KAAK,UAAU,IAAI,OAAOsE,QAAQ,CAAChE,UAAU,KAAK,WAAW,EAAE;IACrEiI,QAAQ,GAAGc,yBAAK,CAACd,QAAQ,EAAEnB,cAAc,CAAC9C,QAAQ,CAAChE,UAAU,CAAC,CAAC,CAAA;AACjE,GAAA;AAEA,EAAA,OAAOiI,QAAQ,CAAA;AACjB,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,kBAAkB,CACzBxC,SAAS,EACT9G,IAAI,EACJgG,KAAK,EACLY,SAAS,EACT3G,UAAU,EACVZ,MAAM,EACN2H,QAAQ,EACR;AACA,EAAA,IAAM+B,EAAE,GAAG/C,KAAK,GAAG4B,kBAAkB,GAAGF,mBAAmB,CAAA;AAE3D,EAAA,IAAIsB,KAAK,CAAA;EAET,IAAIhJ,IAAI,KAAK,YAAY,EAAE;IACzB,IAAI,OAAOC,UAAU,CAAG,IAAA,CAAA,KAAK,WAAW,IAAI2G,SAAS,KAAK,KAAK,EAAE;MAC/DoC,KAAK,GAAGD,EAAE,CAACjC,SAAS,EAAE7G,UAAU,CAAA,IAAA,CAAG,EAAEZ,MAAM,EAAE2H,QAAQ,CAAC,CAAA;AAEtD,MAAA,IAAIF,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AACtC,KAAA;AAEA,IAAA,IACE,OAAO/I,UAAU,CAACI,GAAG,KAAK,WAAW,IACrCuG,SAAS,KAAK,IAAI,KACjBA,SAAS,IAAI3G,UAAU,CAACqC,GAAG,KAAKjD,MAAM,CAAC,EACxC;AACA2J,MAAAA,KAAK,GAAGD,EAAE,CAACjC,SAAS,EAAE7G,UAAU,CAACI,GAAG,EAAEhB,MAAM,EAAE2H,QAAQ,CAAC,CAAA;AAEvD,MAAA,IAAIF,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AACtC,KAAA;AACF,GAAA;EAEA,IAAIhJ,IAAI,KAAK,UAAU,EAAE;AACvB,IAAA,IAAI,OAAOC,UAAU,CAACK,UAAU,KAAK,WAAW,EAAE;AAChD0I,MAAAA,KAAK,GAAGD,EAAE,CAACjC,SAAS,EAAE7G,UAAU,CAACK,UAAU,EAAEjB,MAAM,EAAE2H,QAAQ,CAAC,CAAA;AAE9D,MAAA,IAAIF,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AACtC,KAAA;AACF,GAAA;AAEA,EAAA,OAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,sBAAsB,CAACvJ,IAAI,EAAEgG,KAAK,EAAEY,SAAS,EAAE3G,UAAU,EAAEZ,MAAM,EAAE;AAC1E,EAAA,IAAM6J,KAAK,GAAG,EAAE,CAAC;;AAEjBI,EAAAA,kBAAkB,CAChB,KAAK,EACLtJ,IAAI,EACJgG,KAAK,EACLY,SAAS,EACT3G,UAAU,EACVZ,MAAM,EACN,UAAUiD,GAAG,EAAE;AACb4G,IAAAA,KAAK,CAACC,IAAI,CAAC7G,GAAG,CAAC,CAAA;AACjB,GAAC,CACF,CAAA;AAED,EAAA,OAAO4G,KAAK,CAAA;AACd,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,yBAAyB,CAACxJ,IAAI,EAAE4G,SAAS,EAAE3G,UAAU,EAAEZ,MAAM,EAAE;AACtE,EAAA,IAAIkJ,QAAQ,GAAGjB,4BAAQ,CAACuB,KAAK,EAAE,CAAA;EAE/B,IAAI7I,IAAI,KAAK,YAAY,EAAE;AACzB,IAAA,IACE,OAAOC,UAAU,CAAG,IAAA,CAAA,KAAK,WAAW,IACpC2G,SAAS,KAAK,KAAK,IACnBvH,MAAM,IAAIY,UAAU,CAAA,IAAA,CAAG,EAEvBsI,QAAQ,GAAGc,yBAAK,CAACd,QAAQ,EAAEV,oBAAoB,CAAC5H,UAAU,CAAG,IAAA,CAAA,EAAEZ,MAAM,CAAC,CAAC,CAAA;AAEzE,IAAA,IACE,OAAOY,UAAU,CAACI,GAAG,KAAK,WAAW,IACrCuG,SAAS,KAAK,IAAI,IAClBvH,MAAM,IAAIY,UAAU,CAACI,GAAG,KACvBuG,SAAS,IAAI3G,UAAU,CAACqC,GAAG,KAAKjD,MAAM,CAAC,EAExCkJ,QAAQ,GAAGc,yBAAK,CAACd,QAAQ,EAAEV,oBAAoB,CAAC5H,UAAU,CAACI,GAAG,EAAEhB,MAAM,CAAC,CAAC,CAAA;AAC5E,GAAA;EAEA,IAAIW,IAAI,KAAK,UAAU,EAAE;IACvB,IACE,OAAOC,UAAU,CAACK,UAAU,KAAK,WAAW,IAC5CjB,MAAM,IAAIY,UAAU,CAACK,UAAU,EAE/BiI,QAAQ,GAAGc,yBAAK,CACdd,QAAQ,EACRV,oBAAoB,CAAC5H,UAAU,CAACK,UAAU,EAAEjB,MAAM,CAAC,CACpD,CAAA;AACL,GAAA;AAEA,EAAA,OAAOkJ,QAAQ,CAAA;AACjB,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,sBAAsB,CAAC7E,KAAK,EAAE8E,WAAW,EAAE;AAClD,EAAA,IAAO9I,IAAI,GAAqB8I,WAAW,CAApC9I,IAAI;IAAEZ,IAAI,GAAe0J,WAAW,CAA9B1J,IAAI;IAAE4G,SAAS,GAAI8C,WAAW,CAAxB9C,SAAS,CAAA;;AAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhC,KAAK,CAAC3C,SAAS,CAACrB,IAAI,CAAC,GAAG,UAAUb,MAAM,EAAEV,MAAM,EAAE;AAChD;AACA,IAAA,IAAIW,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,OAAO,EAAE,CAAA;IAEX,IAAI,CAACV,SAAS,CAACG,MAAM,EAAE,OAAOsI,eAAe,CAAC,IAAI,EAAE/H,IAAI,CAAC,CAAA;AAEzD,IAAA,IAAIV,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MAEpB,IAAMuE,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;AAExC,MAAA,IAAI,OAAOuE,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAInC,kBAAkB,CACjBvB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAAyBb,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAC7C,uBAAA,CAAA,CAAA,CAAA;;AAEH;AACA,MAAA,OAAOkJ,sBAAsB,CAC3B,IAAI,CAACjD,KAAK,EACVhG,IAAI,KAAK,OAAO,GAAG,IAAI,CAACA,IAAI,GAAGA,IAAI,EACnC4G,SAAS,EACTtC,QAAQ,CACT,CAAA;AACH,KAAA;AAEA,IAAA,IAAIhF,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MAEpB,IAAMY,UAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;MAE1C,IAAI,CAACE,UAAU,EACb,MAAM,IAAIkC,kBAAkB,CACjBvB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAA0Bb,0BAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAC9C,8BAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAI,CAAC,IAAI,CAACG,MAAM,CAACyJ,GAAG,CAACtK,MAAM,CAAC,EAC1B,MAAM,IAAI8C,kBAAkB,iBACjBvB,IAAI,EAAA,0BAAA,CAAA,CAAA,MAAA,CAA0BvB,MAAM,EAC9C,8BAAA,CAAA,CAAA,CAAA;;AAEH;AACA,MAAA,OAAOkK,sBAAsB,CAC3BvJ,IAAI,EACJ,IAAI,CAACgG,KAAK,EACVY,SAAS,EACT3G,UAAU,EACVZ,MAAM,CACP,CAAA;AACH,KAAA;IAEA,MAAM,IAAI0C,0BAA0B,CACzBnB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,+DAAqDtB,SAAS,CAACG,MAAM,EACnF,IAAA,CAAA,CAAA,CAAA;GACF,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmK,iBAAiB,CAAChF,KAAK,EAAE8E,WAAW,EAAE;AAC7C,EAAA,IAAO9I,IAAI,GAAqB8I,WAAW,CAApC9I,IAAI;IAAEZ,IAAI,GAAe0J,WAAW,CAA9B1J,IAAI;IAAE4G,SAAS,GAAI8C,WAAW,CAAxB9C,SAAS,CAAA;EAE5B,IAAMiD,WAAW,GAAG,SAAS,GAAGjJ,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;;AAEzE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEnF,EAAAA,KAAK,CAAC3C,SAAS,CAAC4H,WAAW,CAAC,GAAG,UAAU9J,MAAM,EAAEV,MAAM,EAAE2H,QAAQ,EAAE;AACjE;AACA,IAAA,IAAIhH,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE,OAAA;AAErE,IAAA,IAAIV,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;AAC1BuH,MAAAA,QAAQ,GAAGjH,MAAM,CAAA;MACjB,OAAO2I,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE1I,IAAI,EAAEgH,QAAQ,CAAC,CAAA;AACjD,KAAA;AAEA,IAAA,IAAI1H,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;AACpBiH,MAAAA,QAAQ,GAAG3H,MAAM,CAAA;MAEjB,IAAMiF,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;AAExC,MAAA,IAAI,OAAOuE,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAInC,kBAAkB,CACjB0H,QAAAA,CAAAA,MAAAA,CAAAA,WAAW,EAAyB9J,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACpD,uBAAA,CAAA,CAAA,CAAA;;AAEH;AACA;MACA,OAAO+I,kBAAkB,CACvB,KAAK,EACL,IAAI,CAAC9C,KAAK,EACVhG,IAAI,KAAK,OAAO,GAAG,IAAI,CAACA,IAAI,GAAGA,IAAI,EACnC4G,SAAS,EACTtC,QAAQ,EACR0C,QAAQ,CACT,CAAA;AACH,KAAA;AAEA,IAAA,IAAI1H,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MAEpB,IAAMY,UAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;MAE1C,IAAI,CAACE,UAAU,EACb,MAAM,IAAIkC,kBAAkB,CACjB0H,QAAAA,CAAAA,MAAAA,CAAAA,WAAW,EAA0B9J,0BAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrD,8BAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAI,CAAC,IAAI,CAACG,MAAM,CAACyJ,GAAG,CAACtK,MAAM,CAAC,EAC1B,MAAM,IAAI8C,kBAAkB,iBACjB0H,WAAW,EAAA,0BAAA,CAAA,CAAA,MAAA,CAA0BxK,MAAM,EACrD,8BAAA,CAAA,CAAA,CAAA;;AAEH;AACA,MAAA,OAAOiK,kBAAkB,CACvB,KAAK,EACLtJ,IAAI,EACJ,IAAI,CAACgG,KAAK,EACVY,SAAS,EACT3G,UAAU,EACVZ,MAAM,EACN2H,QAAQ,CACT,CAAA;AACH,KAAA;IAEA,MAAM,IAAIjF,0BAA0B,CACzB8H,QAAAA,CAAAA,MAAAA,CAAAA,WAAW,+DAAqDvK,SAAS,CAACG,MAAM,EAC1F,IAAA,CAAA,CAAA,CAAA;GACF,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,IAAMuK,OAAO,GAAG,KAAK,GAAGpJ,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,CAAC,CAAA;AAE7DnF,EAAAA,KAAK,CAAC3C,SAAS,CAAC+H,OAAO,CAAC,GAAG,YAAY;IACrC,IAAMC,IAAI,GAAG3I,KAAK,CAACW,SAAS,CAAC8H,KAAK,CAACG,IAAI,CAAC5K,SAAS,CAAC,CAAA;AAClD,IAAA,IAAM0H,QAAQ,GAAGiD,IAAI,CAACE,GAAG,EAAE,CAAA;AAE3B,IAAA,IAAIC,MAAM,CAAA;;AAEV;AACA,IAAA,IAAIH,IAAI,CAACxK,MAAM,KAAK,CAAC,EAAE;MACrB,IAAIA,MAAM,GAAG,CAAC,CAAA;MAEd,IAAIO,IAAI,KAAK,UAAU,EAAEP,MAAM,IAAI,IAAI,CAAC0I,cAAc,CAAA;MACtD,IAAInI,IAAI,KAAK,YAAY,EAAEP,MAAM,IAAI,IAAI,CAAC2I,YAAY,CAAA;AAEtDgC,MAAAA,MAAM,GAAG,IAAI9I,KAAK,CAAC7B,MAAM,CAAC,CAAA;MAE1B,IAAIF,CAAC,GAAG,CAAC,CAAA;AAET0K,MAAAA,IAAI,CAACd,IAAI,CAAC,UAACkB,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAK;QACpCP,MAAM,CAAC7K,CAAC,EAAE,CAAC,GAAGyH,QAAQ,CAACqD,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,CAAC,CAAA;AAChD,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;AACA;SACK;AACHP,MAAAA,MAAM,GAAG,EAAE,CAAA;AAEXH,MAAAA,IAAI,CAACd,IAAI,CAAC,UAACkB,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAK;AACpCP,QAAAA,MAAM,CAACjB,IAAI,CAACnC,QAAQ,CAACqD,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,CAAC,CAAC,CAAA;AAC/C,OAAC,CAAC,CAAA;AACJ,KAAA;IAEA,IAAI,CAACd,WAAW,CAAC,CAACe,KAAK,CAAC,IAAI,EAAEX,IAAI,CAAC,CAAA;AAEnC,IAAA,OAAOG,MAAM,CAAA;GACd,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,IAAMS,UAAU,GAAG,QAAQ,GAAGjK,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,CAAC,CAAA;AAEnEnF,EAAAA,KAAK,CAAC3C,SAAS,CAAC4I,UAAU,CAAC,GAAG,YAAY;IACxC,IAAMZ,IAAI,GAAG3I,KAAK,CAACW,SAAS,CAAC8H,KAAK,CAACG,IAAI,CAAC5K,SAAS,CAAC,CAAA;AAClD,IAAA,IAAM0H,QAAQ,GAAGiD,IAAI,CAACE,GAAG,EAAE,CAAA;IAE3B,IAAMC,MAAM,GAAG,EAAE,CAAA;AAEjBH,IAAAA,IAAI,CAACd,IAAI,CAAC,UAACkB,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAK;MACpC,IAAI3D,QAAQ,CAACqD,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,CAAC,EAAEP,MAAM,CAACjB,IAAI,CAACkB,CAAC,CAAC,CAAA;AACtD,KAAC,CAAC,CAAA;IAEF,IAAI,CAACR,WAAW,CAAC,CAACe,KAAK,CAAC,IAAI,EAAEX,IAAI,CAAC,CAAA;AAEnC,IAAA,OAAOG,MAAM,CAAA;GACd,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,IAAMU,UAAU,GAAG,QAAQ,GAAGlK,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,CAAC,CAAA;AAEnEnF,EAAAA,KAAK,CAAC3C,SAAS,CAAC6I,UAAU,CAAC,GAAG,YAAY;IACxC,IAAIb,IAAI,GAAG3I,KAAK,CAACW,SAAS,CAAC8H,KAAK,CAACG,IAAI,CAAC5K,SAAS,CAAC,CAAA;IAEhD,IAAI2K,IAAI,CAACxK,MAAM,GAAG,CAAC,IAAIwK,IAAI,CAACxK,MAAM,GAAG,CAAC,EAAE;MACtC,MAAM,IAAIsC,0BAA0B,CACzB+I,QAAAA,CAAAA,MAAAA,CAAAA,UAAU,wEAA8Db,IAAI,CAACxK,MAAM,EAC7F,IAAA,CAAA,CAAA,CAAA;AACH,KAAA;IAEA,IACE,OAAOwK,IAAI,CAACA,IAAI,CAACxK,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,IAC3C,OAAOwK,IAAI,CAACA,IAAI,CAACxK,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,EAC3C;AACA,MAAA,MAAM,IAAIsC,0BAA0B,CACzB+I,QAAAA,CAAAA,MAAAA,CAAAA,UAAU,EACpB,kMAAA,CAAA,CAAA,CAAA;AACH,KAAA;AAEA,IAAA,IAAI9D,QAAQ,CAAA;AACZ,IAAA,IAAI+D,YAAY,CAAA;AAEhB,IAAA,IAAId,IAAI,CAACxK,MAAM,KAAK,CAAC,EAAE;AACrBuH,MAAAA,QAAQ,GAAGiD,IAAI,CAAC,CAAC,CAAC,CAAA;AAClBc,MAAAA,YAAY,GAAGd,IAAI,CAAC,CAAC,CAAC,CAAA;AACtBA,MAAAA,IAAI,GAAG,EAAE,CAAA;AACX,KAAC,MAAM,IAAIA,IAAI,CAACxK,MAAM,KAAK,CAAC,EAAE;AAC5BuH,MAAAA,QAAQ,GAAGiD,IAAI,CAAC,CAAC,CAAC,CAAA;AAClBc,MAAAA,YAAY,GAAGd,IAAI,CAAC,CAAC,CAAC,CAAA;AACtBA,MAAAA,IAAI,GAAG,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AAClB,KAAC,MAAM,IAAIA,IAAI,CAACxK,MAAM,KAAK,CAAC,EAAE;AAC5BuH,MAAAA,QAAQ,GAAGiD,IAAI,CAAC,CAAC,CAAC,CAAA;AAClBc,MAAAA,YAAY,GAAGd,IAAI,CAAC,CAAC,CAAC,CAAA;MACtBA,IAAI,GAAG,CAACA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AAC3B,KAAA;IAEA,IAAIe,WAAW,GAAGD,YAAY,CAAA;AAE9Bd,IAAAA,IAAI,CAACd,IAAI,CAAC,UAACkB,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAK;AACpCK,MAAAA,WAAW,GAAGhE,QAAQ,CAACgE,WAAW,EAAEX,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,CAAC,CAAA;AAC7D,KAAC,CAAC,CAAA;IAEF,IAAI,CAACd,WAAW,CAAC,CAACe,KAAK,CAAC,IAAI,EAAEX,IAAI,CAAC,CAAA;AAEnC,IAAA,OAAOe,WAAW,CAAA;GACnB,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACrG,KAAK,EAAE8E,WAAW,EAAE;AAC1C,EAAA,IAAO9I,IAAI,GAAqB8I,WAAW,CAApC9I,IAAI;IAAEZ,IAAI,GAAe0J,WAAW,CAA9B1J,IAAI;IAAE4G,SAAS,GAAI8C,WAAW,CAAxB9C,SAAS,CAAA;EAE5B,IAAMsE,YAAY,GAAG,MAAM,GAAGtK,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;;AAEvE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEnF,EAAAA,KAAK,CAAC3C,SAAS,CAACiJ,YAAY,CAAC,GAAG,UAAUnL,MAAM,EAAEV,MAAM,EAAE2H,QAAQ,EAAE;AAClE;AACA,IAAA,IAAIhH,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,OAAO,KAAK,CAAA;AAEd,IAAA,IAAIV,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;AAC1BuH,MAAAA,QAAQ,GAAGjH,MAAM,CAAA;MACjB,OAAO2I,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE1I,IAAI,EAAEgH,QAAQ,CAAC,CAAA;AAChD,KAAA;AAEA,IAAA,IAAI1H,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;AACpBiH,MAAAA,QAAQ,GAAG3H,MAAM,CAAA;MAEjB,IAAMiF,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;AAExC,MAAA,IAAI,OAAOuE,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAInC,kBAAkB,CACjB+I,QAAAA,CAAAA,MAAAA,CAAAA,YAAY,EAAyBnL,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrD,uBAAA,CAAA,CAAA,CAAA;;AAEH;AACA;MACA,OAAO+I,kBAAkB,CACvB,IAAI,EACJ,IAAI,CAAC9C,KAAK,EACVhG,IAAI,KAAK,OAAO,GAAG,IAAI,CAACA,IAAI,GAAGA,IAAI,EACnC4G,SAAS,EACTtC,QAAQ,EACR0C,QAAQ,CACT,CAAA;AACH,KAAA;AAEA,IAAA,IAAI1H,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MAEpB,IAAMY,UAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;MAE1C,IAAI,CAACE,UAAU,EACb,MAAM,IAAIkC,kBAAkB,CACjB+I,QAAAA,CAAAA,MAAAA,CAAAA,YAAY,EAA0BnL,0BAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACtD,8BAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAI,CAAC,IAAI,CAACG,MAAM,CAACyJ,GAAG,CAACtK,MAAM,CAAC,EAC1B,MAAM,IAAI8C,kBAAkB,iBACjB+I,YAAY,EAAA,0BAAA,CAAA,CAAA,MAAA,CAA0B7L,MAAM,EACtD,8BAAA,CAAA,CAAA,CAAA;;AAEH;AACA,MAAA,OAAOiK,kBAAkB,CACvB,IAAI,EACJtJ,IAAI,EACJ,IAAI,CAACgG,KAAK,EACVY,SAAS,EACT3G,UAAU,EACVZ,MAAM,EACN2H,QAAQ,CACT,CAAA;AACH,KAAA;IAEA,MAAM,IAAIjF,0BAA0B,CACzBmJ,QAAAA,CAAAA,MAAAA,CAAAA,YAAY,+DAAqD5L,SAAS,CAACG,MAAM,EAC3F,IAAA,CAAA,CAAA,CAAA;GACF,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAM0L,QAAQ,GAAG,MAAM,GAAGvK,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAEnEnF,EAAAA,KAAK,CAAC3C,SAAS,CAACkJ,QAAQ,CAAC,GAAG,YAAY;IACtC,IAAMlB,IAAI,GAAG3I,KAAK,CAACW,SAAS,CAAC8H,KAAK,CAACG,IAAI,CAAC5K,SAAS,CAAC,CAAA;AAClD,IAAA,IAAM0H,QAAQ,GAAGiD,IAAI,CAACE,GAAG,EAAE,CAAA;AAE3BF,IAAAA,IAAI,CAACd,IAAI,CAAC,UAACkB,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAK;AACpC,MAAA,OAAO3D,QAAQ,CAACqD,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,CAAC,CAAA;AACzC,KAAC,CAAC,CAAA;AAEF,IAAA,IAAM3B,KAAK,GAAG,IAAI,CAACkC,YAAY,CAAC,CAACN,KAAK,CAAC,IAAI,EAAEX,IAAI,CAAC,CAAA;IAElD,IAAIjB,KAAK,EAAE,OAAO,IAAI,CAAA;AAEtB,IAAA,OAAO,KAAK,CAAA;GACb,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAMoC,SAAS,GAAG,OAAO,GAAGxK,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAErEnF,EAAAA,KAAK,CAAC3C,SAAS,CAACmJ,SAAS,CAAC,GAAG,YAAY;IACvC,IAAMnB,IAAI,GAAG3I,KAAK,CAACW,SAAS,CAAC8H,KAAK,CAACG,IAAI,CAAC5K,SAAS,CAAC,CAAA;AAClD,IAAA,IAAM0H,QAAQ,GAAGiD,IAAI,CAACE,GAAG,EAAE,CAAA;AAE3BF,IAAAA,IAAI,CAACd,IAAI,CAAC,UAACkB,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAK;AACpC,MAAA,OAAO,CAAC3D,QAAQ,CAACqD,CAAC,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,CAAC,CAAA;AAC1C,KAAC,CAAC,CAAA;AAEF,IAAA,IAAM3B,KAAK,GAAG,IAAI,CAACkC,YAAY,CAAC,CAACN,KAAK,CAAC,IAAI,EAAEX,IAAI,CAAC,CAAA;IAElD,IAAIjB,KAAK,EAAE,OAAO,KAAK,CAAA;AAEvB,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqC,yBAAyB,CAACzG,KAAK,EAAE8E,WAAW,EAAE;AACrD,EAAA,IAAa4B,YAAY,GAAqB5B,WAAW,CAAlD9I,IAAI;IAAgBZ,IAAI,GAAe0J,WAAW,CAA9B1J,IAAI;IAAE4G,SAAS,GAAI8C,WAAW,CAAxB9C,SAAS,CAAA;AAE1C,EAAA,IAAMhG,IAAI,GAAG0K,YAAY,CAACvB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,SAAS,CAAA;;AAElD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEnF,KAAK,CAAC3C,SAAS,CAACrB,IAAI,CAAC,GAAG,UAAUb,MAAM,EAAEV,MAAM,EAAE;AAChD;IACA,IAAIW,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,OAAOsH,4BAAQ,CAACuB,KAAK,EAAE,CAAA;IAEzB,IAAI,CAACvJ,SAAS,CAACG,MAAM,EAAE,OAAOmJ,kBAAkB,CAAC,IAAI,EAAE5I,IAAI,CAAC,CAAA;AAE5D,IAAA,IAAIV,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MAEpB,IAAME,UAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;MAE1C,IAAI,CAACE,UAAU,EACb,MAAM,IAAIkC,kBAAkB,CACjBvB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAAyBb,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAC7C,uBAAA,CAAA,CAAA,CAAA;;AAEH;AACA,MAAA,OAAOqJ,yBAAyB,CAACpJ,IAAI,EAAE4G,SAAS,EAAE3G,UAAU,CAAC,CAAA;AAC/D,KAAA;AAEA,IAAA,IAAIX,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MAEpB,IAAMY,WAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;MAE1C,IAAI,CAACE,WAAU,EACb,MAAM,IAAIkC,kBAAkB,CACjBvB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAA0Bb,0BAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAC9C,8BAAA,CAAA,CAAA,CAAA;AAEH,MAAA,IAAI,CAAC,IAAI,CAACG,MAAM,CAACyJ,GAAG,CAACtK,MAAM,CAAC,EAC1B,MAAM,IAAI8C,kBAAkB,iBACjBvB,IAAI,EAAA,0BAAA,CAAA,CAAA,MAAA,CAA0BvB,MAAM,EAC9C,8BAAA,CAAA,CAAA,CAAA;;AAEH;MACA,OAAOmK,yBAAyB,CAACxJ,IAAI,EAAE4G,SAAS,EAAE3G,WAAU,EAAEZ,MAAM,CAAC,CAAA;AACvE,KAAA;IAEA,MAAM,IAAI0C,0BAA0B,CACzBnB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,+DAAqDtB,SAAS,CAACG,MAAM,EACnF,IAAA,CAAA,CAAA,CAAA;GACF,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACe,SAAS8L,0BAA0B,CAAC1F,KAAK,EAAE;AACxDc,EAAAA,eAAe,CAACb,OAAO,CAAC,UAAA4D,WAAW,EAAI;AACrCD,IAAAA,sBAAsB,CAAC5D,KAAK,EAAE6D,WAAW,CAAC,CAAA;AAC1CE,IAAAA,iBAAiB,CAAC/D,KAAK,EAAE6D,WAAW,CAAC,CAAA;AACrCuB,IAAAA,cAAc,CAACpF,KAAK,EAAE6D,WAAW,CAAC,CAAA;AAClC2B,IAAAA,yBAAyB,CAACxF,KAAK,EAAE6D,WAAW,CAAC,CAAA;AAC/C,GAAC,CAAC,CAAA;AACJ;;ACzrCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA,IAAM8B,mBAAmB,GAAG,CAC1B;AACE5K,EAAAA,IAAI,EAAE,WAAW;AACjBZ,EAAAA,IAAI,EAAE,OAAA;AACR,CAAC,EACD;AACEY,EAAAA,IAAI,EAAE,aAAa;AACnBZ,EAAAA,IAAI,EAAE,UAAU;AAChB4G,EAAAA,SAAS,EAAE,IAAA;AACb,CAAC,EACD;AACEhG,EAAAA,IAAI,EAAE,cAAc;AACpBZ,EAAAA,IAAI,EAAE,UAAU;AAChB4G,EAAAA,SAAS,EAAE,KAAA;AACb,CAAC,EACD;AACEhG,EAAAA,IAAI,EAAE,kBAAkB;AACxBZ,EAAAA,IAAI,EAAE,OAAO;AACb4G,EAAAA,SAAS,EAAE,IAAA;AACb,CAAC,EACD;AACEhG,EAAAA,IAAI,EAAE,mBAAmB;AACzBZ,EAAAA,IAAI,EAAE,OAAO;AACb4G,EAAAA,SAAS,EAAE,KAAA;AACb,CAAC,EACD;AACEhG,EAAAA,IAAI,EAAE,mBAAmB;AACzBZ,EAAAA,IAAI,EAAE,UAAA;AACR,CAAC,EACD;AACEY,EAAAA,IAAI,EAAE,qBAAqB;AAC3BZ,EAAAA,IAAI,EAAE,YAAA;AACR,CAAC,CACF,CAAA;;AAED;AACA;AACA;AACA,SAASyL,mBAAmB,GAAG;EAC7B,IAAI,CAACC,CAAC,GAAG,IAAI,CAAA;EACb,IAAI,CAACC,CAAC,GAAG,IAAI,CAAA;AACf,CAAA;AAEAF,mBAAmB,CAACxJ,SAAS,CAAC2J,IAAI,GAAG,UAAUC,GAAG,EAAE;EAClD,IAAI,IAAI,CAACH,CAAC,KAAK,IAAI,EAAE,IAAI,CAACA,CAAC,GAAGG,GAAG,CAAC,KAC7B,IAAI,IAAI,CAACF,CAAC,KAAK,IAAI,EAAE,IAAI,CAACA,CAAC,GAAGE,GAAG,CAAA;AACxC,CAAC,CAAA;AAEDJ,mBAAmB,CAACxJ,SAAS,CAAC0H,GAAG,GAAG,UAAUrH,GAAG,EAAE;AACjD,EAAA,IAAI,IAAI,CAACoJ,CAAC,KAAK,IAAI,IAAIpJ,GAAG,IAAI,IAAI,CAACoJ,CAAC,EAAE,OAAO,IAAI,CAAA;AACjD,EAAA,IAAI,IAAI,CAACC,CAAC,KAAK,IAAI,IAAIrJ,GAAG,IAAI,IAAI,CAACqJ,CAAC,EAAE,OAAO,IAAI,CAAA;AACjD,EAAA,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,mBAAmB,CAAChF,SAAS,EAAEiF,OAAO,EAAEzH,QAAQ,EAAEyC,MAAM,EAAEC,QAAQ,EAAE;AAC3E,EAAA,KAAK,IAAMtH,CAAC,IAAIqH,MAAM,EAAE;AACtB,IAAA,IAAMxC,QAAQ,GAAGwC,MAAM,CAACrH,CAAC,CAAC,CAAA;AAE1B,IAAA,IAAMO,UAAU,GAAGsE,QAAQ,CAACxE,MAAM,CAAA;AAClC,IAAA,IAAM4H,UAAU,GAAGpD,QAAQ,CAAClF,MAAM,CAAA;IAElC,IAAM2M,YAAY,GAAG/L,UAAU,KAAKqE,QAAQ,GAAGqD,UAAU,GAAG1H,UAAU,CAAA;IAEtE,IAAI8L,OAAO,IAAIA,OAAO,CAACpC,GAAG,CAACqC,YAAY,CAAC1J,GAAG,CAAC,EAAE,SAAA;IAE9C,IAAM4E,WAAW,GAAGF,QAAQ,CAACgF,YAAY,CAAC1J,GAAG,EAAE0J,YAAY,CAAC3K,UAAU,CAAC,CAAA;AAEvE,IAAA,IAAIyF,SAAS,IAAII,WAAW,EAAE,OAAO8E,YAAY,CAAC1J,GAAG,CAAA;AACvD,GAAA;AAEA,EAAA,OAAA;AACF,CAAA;AAEA,SAAS2J,eAAe,CAACnF,SAAS,EAAE9G,IAAI,EAAE4G,SAAS,EAAEtC,QAAQ,EAAE0C,QAAQ,EAAE;AACvE;EACA,IAAIhH,IAAI,KAAK,OAAO,EAAE;AACpB,IAAA,IAAIA,IAAI,KAAK,YAAY,EACvB,OAAO8L,mBAAmB,CACxBhF,SAAS,EACT,IAAI,EACJxC,QAAQ,EACRA,QAAQ,CAAChE,UAAU,EACnB0G,QAAQ,CACT,CAAA;IAEH,IAAI,OAAOJ,SAAS,KAAK,QAAQ,EAC/B,OAAOkF,mBAAmB,CACxBhF,SAAS,EACT,IAAI,EACJxC,QAAQ,EACRA,QAAQ,CAACsC,SAAS,CAAC,EACnBI,QAAQ,CACT,CAAA;AACL,GAAA;;AAEA;AACA;AACA,EAAA,IAAM+E,OAAO,GAAG,IAAIN,mBAAmB,EAAE,CAAA;AAEzC,EAAA,IAAIzC,KAAK,CAAA;EAET,IAAIhJ,IAAI,KAAK,YAAY,EAAE;IACzB,IAAI4G,SAAS,KAAK,KAAK,EAAE;AACvBoC,MAAAA,KAAK,GAAG8C,mBAAmB,CACzBhF,SAAS,EACT,IAAI,EACJxC,QAAQ,EACRA,QAAQ,CAAG,IAAA,CAAA,EACX0C,QAAQ,CACT,CAAA;AAED,MAAA,IAAIF,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AAEpC+C,MAAAA,OAAO,CAACH,IAAI,CAACtH,QAAQ,MAAG,CAAC,CAAA;AAC3B,KAAA;IACA,IAAIsC,SAAS,KAAK,IAAI,EAAE;AACtBoC,MAAAA,KAAK,GAAG8C,mBAAmB,CACzBhF,SAAS,EACTiF,OAAO,EACPzH,QAAQ,EACRA,QAAQ,CAACjE,GAAG,EACZ2G,QAAQ,CACT,CAAA;AAED,MAAA,IAAIF,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AAEpC+C,MAAAA,OAAO,CAACH,IAAI,CAACtH,QAAQ,CAACjE,GAAG,CAAC,CAAA;AAC5B,KAAA;AACF,GAAA;EAEA,IAAIL,IAAI,KAAK,UAAU,EAAE;AACvBgJ,IAAAA,KAAK,GAAG8C,mBAAmB,CACzBhF,SAAS,EACTiF,OAAO,EACPzH,QAAQ,EACRA,QAAQ,CAAChE,UAAU,EACnB0G,QAAQ,CACT,CAAA;AAED,IAAA,IAAIF,SAAS,IAAIkC,KAAK,EAAE,OAAOA,KAAK,CAAA;AACtC,GAAA;AAEA,EAAA,OAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkD,0BAA0B,CAAClM,IAAI,EAAE4G,SAAS,EAAEtC,QAAQ,EAAE;AAC7D;EACA,IAAItE,IAAI,KAAK,OAAO,EAAE;AACpB,IAAA,IAAIA,IAAI,KAAK,YAAY,EAAE,OAAOJ,MAAM,CAACyH,IAAI,CAAC/C,QAAQ,CAAChE,UAAU,CAAC,CAAA;AAElE,IAAA,IAAI,OAAOsG,SAAS,KAAK,QAAQ,EAAE,OAAOhH,MAAM,CAACyH,IAAI,CAAC/C,QAAQ,CAACsC,SAAS,CAAC,CAAC,CAAA;AAC5E,GAAA;EAEA,IAAMuF,SAAS,GAAG,EAAE,CAAA;EAEpBF,eAAe,CAAC,KAAK,EAAEjM,IAAI,EAAE4G,SAAS,EAAEtC,QAAQ,EAAE,UAAUhC,GAAG,EAAE;AAC/D6J,IAAAA,SAAS,CAAChD,IAAI,CAAC7G,GAAG,CAAC,CAAA;AACrB,GAAC,CAAC,CAAA;AAEF,EAAA,OAAO6J,SAAS,CAAA;AAClB,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,2BAA2B,CAACL,OAAO,EAAEzH,QAAQ,EAAEyC,MAAM,EAAE;AAC9D,EAAA,IAAMM,IAAI,GAAGzH,MAAM,CAACyH,IAAI,CAACN,MAAM,CAAC,CAAA;AAChC,EAAA,IAAMvH,CAAC,GAAG6H,IAAI,CAAC5H,MAAM,CAAA;EAErB,IAAIF,CAAC,GAAG,CAAC,CAAA;AAET,EAAA,OAAO,IAAI+H,4BAAQ,CAAC,SAAS/D,IAAI,GAAG;IAClC,IAAIyI,YAAY,GAAG,IAAI,CAAA;IAEvB,GAAG;MACD,IAAIzM,CAAC,IAAIC,CAAC,EAAE;AACV,QAAA,IAAIuM,OAAO,EAAEA,OAAO,CAACH,IAAI,CAAC7E,MAAM,CAAC,CAAA;QACjC,OAAO;AAACQ,UAAAA,IAAI,EAAE,IAAA;SAAK,CAAA;AACrB,OAAA;MAEA,IAAMhD,QAAQ,GAAGwC,MAAM,CAACM,IAAI,CAAC9H,CAAC,EAAE,CAAC,CAAC,CAAA;AAElC,MAAA,IAAMU,UAAU,GAAGsE,QAAQ,CAACxE,MAAM,CAAA;AAClC,MAAA,IAAM4H,UAAU,GAAGpD,QAAQ,CAAClF,MAAM,CAAA;AAElC2M,MAAAA,YAAY,GAAG/L,UAAU,KAAKqE,QAAQ,GAAGqD,UAAU,GAAG1H,UAAU,CAAA;MAEhE,IAAI8L,OAAO,IAAIA,OAAO,CAACpC,GAAG,CAACqC,YAAY,CAAC1J,GAAG,CAAC,EAAE;AAC5C0J,QAAAA,YAAY,GAAG,IAAI,CAAA;AACnB,QAAA,SAAA;AACF,OAAA;KACD,QAAQA,YAAY,KAAK,IAAI,EAAA;IAE9B,OAAO;AACLzE,MAAAA,IAAI,EAAE,KAAK;AACX/G,MAAAA,KAAK,EAAE;QAAC6L,QAAQ,EAAEL,YAAY,CAAC1J,GAAG;QAAEjB,UAAU,EAAE2K,YAAY,CAAC3K,UAAAA;AAAU,OAAA;KACxE,CAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA,SAASiL,sBAAsB,CAACtM,IAAI,EAAE4G,SAAS,EAAEtC,QAAQ,EAAE;AACzD;EACA,IAAItE,IAAI,KAAK,OAAO,EAAE;AACpB,IAAA,IAAIA,IAAI,KAAK,YAAY,EACvB,OAAOoM,2BAA2B,CAAC,IAAI,EAAE9H,QAAQ,EAAEA,QAAQ,CAAChE,UAAU,CAAC,CAAA;AAEzE,IAAA,IAAI,OAAOsG,SAAS,KAAK,QAAQ,EAC/B,OAAOwF,2BAA2B,CAAC,IAAI,EAAE9H,QAAQ,EAAEA,QAAQ,CAACsC,SAAS,CAAC,CAAC,CAAA;AAC3E,GAAA;AAEA,EAAA,IAAI2B,QAAQ,GAAGjB,4BAAQ,CAACuB,KAAK,EAAE,CAAA;;AAE/B;AACA;AACA,EAAA,IAAMkD,OAAO,GAAG,IAAIN,mBAAmB,EAAE,CAAA;EAEzC,IAAIzL,IAAI,KAAK,YAAY,EAAE;IACzB,IAAI4G,SAAS,KAAK,KAAK,EAAE;AACvB2B,MAAAA,QAAQ,GAAGc,yBAAK,CACdd,QAAQ,EACR6D,2BAA2B,CAACL,OAAO,EAAEzH,QAAQ,EAAEA,QAAQ,CAAA,IAAA,CAAG,CAAC,CAC5D,CAAA;AACH,KAAA;IACA,IAAIsC,SAAS,KAAK,IAAI,EAAE;AACtB2B,MAAAA,QAAQ,GAAGc,yBAAK,CACdd,QAAQ,EACR6D,2BAA2B,CAACL,OAAO,EAAEzH,QAAQ,EAAEA,QAAQ,CAACjE,GAAG,CAAC,CAC7D,CAAA;AACH,KAAA;AACF,GAAA;EAEA,IAAIL,IAAI,KAAK,UAAU,EAAE;AACvBuI,IAAAA,QAAQ,GAAGc,yBAAK,CACdd,QAAQ,EACR6D,2BAA2B,CAACL,OAAO,EAAEzH,QAAQ,EAAEA,QAAQ,CAAChE,UAAU,CAAC,CACpE,CAAA;AACH,GAAA;AAEA,EAAA,OAAOiI,QAAQ,CAAA;AACjB,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgE,0BAA0B,CAAC3H,KAAK,EAAE8E,WAAW,EAAE;AACtD,EAAA,IAAO9I,IAAI,GAAqB8I,WAAW,CAApC9I,IAAI;IAAEZ,IAAI,GAAe0J,WAAW,CAA9B1J,IAAI;IAAE4G,SAAS,GAAI8C,WAAW,CAAxB9C,SAAS,CAAA;;AAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEhC,KAAK,CAAC3C,SAAS,CAACrB,IAAI,CAAC,GAAG,UAAU4L,IAAI,EAAE;AACtC;AACA,IAAA,IAAIxM,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,OAAO,EAAE,CAAA;IAEXwM,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;AAEtC,IAAA,IAAI,OAAOlI,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAInC,kBAAkB,CACjBvB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAAyB4L,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAC3C,uBAAA,CAAA,CAAA,CAAA;;AAEH;AACA,IAAA,OAAON,0BAA0B,CAC/BlM,IAAI,KAAK,OAAO,GAAG,IAAI,CAACA,IAAI,GAAGA,IAAI,EACnC4G,SAAS,EACTtC,QAAQ,CACT,CAAA;GACF,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmI,qBAAqB,CAAC7H,KAAK,EAAE8E,WAAW,EAAE;AACjD,EAAA,IAAO9I,IAAI,GAAqB8I,WAAW,CAApC9I,IAAI;IAAEZ,IAAI,GAAe0J,WAAW,CAA9B1J,IAAI;IAAE4G,SAAS,GAAI8C,WAAW,CAAxB9C,SAAS,CAAA;EAE5B,IAAMiD,WAAW,GAAG,SAAS,GAAGjJ,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;;AAEzE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEnF,KAAK,CAAC3C,SAAS,CAAC4H,WAAW,CAAC,GAAG,UAAU2C,IAAI,EAAExF,QAAQ,EAAE;AACvD;AACA,IAAA,IAAIhH,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE,OAAA;IAErEwM,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;AAEtC,IAAA,IAAI,OAAOlI,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAInC,kBAAkB,CACjB0H,QAAAA,CAAAA,MAAAA,CAAAA,WAAW,EAAyB2C,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAClD,uBAAA,CAAA,CAAA,CAAA;;AAEH;AACAP,IAAAA,eAAe,CACb,KAAK,EACLjM,IAAI,KAAK,OAAO,GAAG,IAAI,CAACA,IAAI,GAAGA,IAAI,EACnC4G,SAAS,EACTtC,QAAQ,EACR0C,QAAQ,CACT,CAAA;GACF,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,IAAMgD,OAAO,GAAG,KAAK,GAAGpJ,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,CAAC,CAAA;EAE7DnF,KAAK,CAAC3C,SAAS,CAAC+H,OAAO,CAAC,GAAG,UAAUwC,IAAI,EAAExF,QAAQ,EAAE;AACnD;IACA,IAAMoD,MAAM,GAAG,EAAE,CAAA;IAEjB,IAAI,CAACP,WAAW,CAAC,CAAC2C,IAAI,EAAE,UAACE,CAAC,EAAEC,CAAC,EAAK;MAChCvC,MAAM,CAACjB,IAAI,CAACnC,QAAQ,CAAC0F,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAA;AAC7B,KAAC,CAAC,CAAA;AAEF,IAAA,OAAOvC,MAAM,CAAA;GACd,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,IAAMS,UAAU,GAAG,QAAQ,GAAGjK,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,CAAC,CAAA;EAEnEnF,KAAK,CAAC3C,SAAS,CAAC4I,UAAU,CAAC,GAAG,UAAU2B,IAAI,EAAExF,QAAQ,EAAE;IACtD,IAAMoD,MAAM,GAAG,EAAE,CAAA;IAEjB,IAAI,CAACP,WAAW,CAAC,CAAC2C,IAAI,EAAE,UAACE,CAAC,EAAEC,CAAC,EAAK;AAChC,MAAA,IAAI3F,QAAQ,CAAC0F,CAAC,EAAEC,CAAC,CAAC,EAAEvC,MAAM,CAACjB,IAAI,CAACuD,CAAC,CAAC,CAAA;AACpC,KAAC,CAAC,CAAA;AAEF,IAAA,OAAOtC,MAAM,CAAA;GACd,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,IAAMU,UAAU,GAAG,QAAQ,GAAGlK,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,CAAC,CAAA;AAEnEnF,EAAAA,KAAK,CAAC3C,SAAS,CAAC6I,UAAU,CAAC,GAAG,UAAU0B,IAAI,EAAExF,QAAQ,EAAE+D,YAAY,EAAE;IACpE,IAAIzL,SAAS,CAACG,MAAM,GAAG,CAAC,EACtB,MAAM,IAAIsC,0BAA0B,CACzB+I,QAAAA,CAAAA,MAAAA,CAAAA,UAAU,EACpB,kMAAA,CAAA,CAAA,CAAA;IAEH,IAAIE,WAAW,GAAGD,YAAY,CAAA;IAE9B,IAAI,CAAClB,WAAW,CAAC,CAAC2C,IAAI,EAAE,UAACE,CAAC,EAAEC,CAAC,EAAK;MAChC3B,WAAW,GAAGhE,QAAQ,CAACgE,WAAW,EAAE0B,CAAC,EAAEC,CAAC,CAAC,CAAA;AAC3C,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO3B,WAAW,CAAA;GACnB,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4B,kBAAkB,CAAChI,KAAK,EAAE8E,WAAW,EAAE;AAC9C,EAAA,IAAO9I,IAAI,GAAqB8I,WAAW,CAApC9I,IAAI;IAAEZ,IAAI,GAAe0J,WAAW,CAA9B1J,IAAI;IAAE4G,SAAS,GAAI8C,WAAW,CAAxB9C,SAAS,CAAA;AAE5B,EAAA,IAAMiG,mBAAmB,GAAGjM,IAAI,CAAC,CAAC,CAAC,CAACkJ,WAAW,EAAE,GAAGlJ,IAAI,CAACmJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAErE,EAAA,IAAM+C,QAAQ,GAAG,MAAM,GAAGD,mBAAmB,CAAA;;AAE7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjI,KAAK,CAAC3C,SAAS,CAAC6K,QAAQ,CAAC,GAAG,UAAUN,IAAI,EAAExF,QAAQ,EAAE;AACpD;AACA,IAAA,IAAIhH,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE,OAAA;IAErEwM,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;AAEtC,IAAA,IAAI,OAAOlI,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAInC,kBAAkB,CACjB2K,QAAAA,CAAAA,MAAAA,CAAAA,QAAQ,EAAyBN,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAC/C,uBAAA,CAAA,CAAA,CAAA;;AAEH;AACA,IAAA,OAAOP,eAAe,CACpB,IAAI,EACJjM,IAAI,KAAK,OAAO,GAAG,IAAI,CAACA,IAAI,GAAGA,IAAI,EACnC4G,SAAS,EACTtC,QAAQ,EACR0C,QAAQ,CACT,CAAA;GACF,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,IAAMmE,QAAQ,GAAG,MAAM,GAAG0B,mBAAmB,CAAA;EAE7CjI,KAAK,CAAC3C,SAAS,CAACkJ,QAAQ,CAAC,GAAG,UAAUqB,IAAI,EAAExF,QAAQ,EAAE;IACpD,IAAMgC,KAAK,GAAG,IAAI,CAAC8D,QAAQ,CAAC,CAACN,IAAI,EAAExF,QAAQ,CAAC,CAAA;IAE5C,IAAIgC,KAAK,EAAE,OAAO,IAAI,CAAA;AAEtB,IAAA,OAAO,KAAK,CAAA;GACb,CAAA;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,IAAMoC,SAAS,GAAG,OAAO,GAAGyB,mBAAmB,CAAA;EAE/CjI,KAAK,CAAC3C,SAAS,CAACmJ,SAAS,CAAC,GAAG,UAAUoB,IAAI,EAAExF,QAAQ,EAAE;AACrD,IAAA,IAAMgC,KAAK,GAAG,IAAI,CAAC8D,QAAQ,CAAC,CAACN,IAAI,EAAE,UAACE,CAAC,EAAEC,CAAC,EAAK;AAC3C,MAAA,OAAO,CAAC3F,QAAQ,CAAC0F,CAAC,EAAEC,CAAC,CAAC,CAAA;AACxB,KAAC,CAAC,CAAA;IAEF,IAAI3D,KAAK,EAAE,OAAO,KAAK,CAAA;AAEvB,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+D,6BAA6B,CAACnI,KAAK,EAAE8E,WAAW,EAAE;AACzD,EAAA,IAAO9I,IAAI,GAAqB8I,WAAW,CAApC9I,IAAI;IAAEZ,IAAI,GAAe0J,WAAW,CAA9B1J,IAAI;IAAE4G,SAAS,GAAI8C,WAAW,CAAxB9C,SAAS,CAAA;AAE5B,EAAA,IAAMoG,YAAY,GAAGpM,IAAI,CAACmJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,SAAS,CAAA;;AAElD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEnF,KAAK,CAAC3C,SAAS,CAAC+K,YAAY,CAAC,GAAG,UAAUR,IAAI,EAAE;AAC9C;IACA,IAAIxM,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EACjE,OAAOsH,4BAAQ,CAACuB,KAAK,EAAE,CAAA;IAEzB2D,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;AAEtC,IAAA,IAAI,OAAOlI,QAAQ,KAAK,WAAW,EACjC,MAAM,IAAInC,kBAAkB,CACjB6K,QAAAA,CAAAA,MAAAA,CAAAA,YAAY,EAAyBR,yBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,IAAI,EACnD,uBAAA,CAAA,CAAA,CAAA;;AAEH;AACA,IAAA,OAAOF,sBAAsB,CAC3BtM,IAAI,KAAK,OAAO,GAAG,IAAI,CAACA,IAAI,GAAGA,IAAI,EACnC4G,SAAS,EACTtC,QAAQ,CACT,CAAA;GACF,CAAA;AACH,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACe,SAAS2I,8BAA8B,CAACpH,KAAK,EAAE;AAC5D2F,EAAAA,mBAAmB,CAAC1F,OAAO,CAAC,UAAA4D,WAAW,EAAI;AACzC6C,IAAAA,0BAA0B,CAAC1G,KAAK,EAAE6D,WAAW,CAAC,CAAA;AAC9C+C,IAAAA,qBAAqB,CAAC5G,KAAK,EAAE6D,WAAW,CAAC,CAAA;AACzCkD,IAAAA,kBAAkB,CAAC/G,KAAK,EAAE6D,WAAW,CAAC,CAAA;AACtCqD,IAAAA,6BAA6B,CAAClH,KAAK,EAAE6D,WAAW,CAAC,CAAA;AACnD,GAAC,CAAC,CAAA;AACJ;;AC3jBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASwD,gBAAgB,CAC9BpG,SAAS,EACTqG,UAAU,EACVC,iBAAiB,EACjBtN,KAAK,EACLkH,QAAQ,EACR;AACA,EAAA,IAAMuB,QAAQ,GAAGzI,KAAK,CAACI,MAAM,CAACsI,MAAM,EAAE,CAAA;AAEtC,EAAA,IAAMxI,IAAI,GAAGF,KAAK,CAACE,IAAI,CAAA;AAEvB,EAAA,IAAIyI,IAAI,EAAExI,UAAU,EAAEoM,QAAQ,EAAEjJ,GAAG,EAAEmB,QAAQ,EAAEoD,UAAU,EAAET,WAAW,CAAA;AAEtE,EAAA,OAASuB,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;IACrD,IAAI8F,QAAQ,GAAG,KAAK,CAAA;IAEpBpN,UAAU,GAAGwI,IAAI,CAACjI,KAAK,CAAA;IAEvB,IAAIR,IAAI,KAAK,YAAY,EAAE;MACzBoD,GAAG,GAAGnD,UAAU,CAACI,GAAG,CAAA;MAEpB,KAAKgM,QAAQ,IAAIjJ,GAAG,EAAE;AACpBmB,QAAAA,QAAQ,GAAGnB,GAAG,CAACiJ,QAAQ,CAAC,CAAA;QAExB,GAAG;UACD1E,UAAU,GAAGpD,QAAQ,CAAClF,MAAM,CAAA;AAE5BgO,UAAAA,QAAQ,GAAG,IAAI,CAAA;AACfnG,UAAAA,WAAW,GAAGF,QAAQ,CACpB/G,UAAU,CAACqC,GAAG,EACdqF,UAAU,CAACrF,GAAG,EACdrC,UAAU,CAACoB,UAAU,EACrBsG,UAAU,CAACtG,UAAU,EACrBkD,QAAQ,CAACjC,GAAG,EACZiC,QAAQ,CAAClD,UAAU,EACnBkD,QAAQ,CAACjE,UAAU,CACpB,CAAA;AAED,UAAA,IAAIwG,SAAS,IAAII,WAAW,EAAE,OAAO3C,QAAQ,CAAA;UAE7CA,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;AAC1B,SAAC,QAAQgB,QAAQ,EAAA;AACnB,OAAA;AACF,KAAA;IAEA,IAAIvE,IAAI,KAAK,UAAU,EAAE;MACvBoD,GAAG,GAAGnD,UAAU,CAACK,UAAU,CAAA;MAE3B,KAAK+L,QAAQ,IAAIjJ,GAAG,EAAE;AACpB,QAAA,IAAI+J,UAAU,IAAIlN,UAAU,CAACqC,GAAG,GAAG+J,QAAQ,EAAE,SAAA;AAE7C9H,QAAAA,QAAQ,GAAGnB,GAAG,CAACiJ,QAAQ,CAAC,CAAA;QAExB,GAAG;UACD1E,UAAU,GAAGpD,QAAQ,CAAClF,MAAM,CAAA;UAE5B,IAAIsI,UAAU,CAACrF,GAAG,KAAK+J,QAAQ,EAAE1E,UAAU,GAAGpD,QAAQ,CAACxE,MAAM,CAAA;AAE7DsN,UAAAA,QAAQ,GAAG,IAAI,CAAA;AACfnG,UAAAA,WAAW,GAAGF,QAAQ,CACpB/G,UAAU,CAACqC,GAAG,EACdqF,UAAU,CAACrF,GAAG,EACdrC,UAAU,CAACoB,UAAU,EACrBsG,UAAU,CAACtG,UAAU,EACrBkD,QAAQ,CAACjC,GAAG,EACZiC,QAAQ,CAAClD,UAAU,EACnBkD,QAAQ,CAACjE,UAAU,CACpB,CAAA;AAED,UAAA,IAAIwG,SAAS,IAAII,WAAW,EAAE,OAAO3C,QAAQ,CAAA;UAE7CA,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;AAC1B,SAAC,QAAQgB,QAAQ,EAAA;AACnB,OAAA;AACF,KAAA;AAEA,IAAA,IAAI6I,iBAAiB,IAAI,CAACC,QAAQ,EAAE;MAClCnG,WAAW,GAAGF,QAAQ,CACpB/G,UAAU,CAACqC,GAAG,EACd,IAAI,EACJrC,UAAU,CAACoB,UAAU,EACrB,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,CACL,CAAA;AAED,MAAA,IAAIyF,SAAS,IAAII,WAAW,EAAE,OAAO,IAAI,CAAA;AAC3C,KAAA;AACF,GAAA;AAEA,EAAA,OAAA;AACF;;AC7GA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASoG,aAAa,CAAChL,GAAG,EAAEuC,IAAI,EAAE;AACvC,EAAA,IAAM0I,UAAU,GAAG;AAACjL,IAAAA,GAAG,EAAHA,GAAAA;GAAI,CAAA;EAExB,IAAI,CAAC7B,OAAO,CAACoE,IAAI,CAACxD,UAAU,CAAC,EAC3BkM,UAAU,CAAClM,UAAU,GAAG1B,MAAM,CAAC,EAAE,EAAEkF,IAAI,CAACxD,UAAU,CAAC,CAAA;AAErD,EAAA,OAAOkM,UAAU,CAAA;AACnB,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAa,CAACxN,IAAI,EAAEsC,GAAG,EAAEuC,IAAI,EAAE;AAC7C,EAAA,IAAM0I,UAAU,GAAG;AACjBjL,IAAAA,GAAG,EAAHA,GAAG;AACHvC,IAAAA,MAAM,EAAE8E,IAAI,CAAC9E,MAAM,CAACuC,GAAG;AACvBjD,IAAAA,MAAM,EAAEwF,IAAI,CAACxF,MAAM,CAACiD,GAAAA;GACrB,CAAA;EAED,IAAI,CAAC7B,OAAO,CAACoE,IAAI,CAACxD,UAAU,CAAC,EAC3BkM,UAAU,CAAClM,UAAU,GAAG1B,MAAM,CAAC,EAAE,EAAEkF,IAAI,CAACxD,UAAU,CAAC,CAAA;AAErD,EAAA,IAAIrB,IAAI,KAAK,OAAO,IAAI6E,IAAI,CAACvE,UAAU,EAAEiN,UAAU,CAACjN,UAAU,GAAG,IAAI,CAAA;AAErE,EAAA,OAAOiN,UAAU,CAAA;AACnB,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,sBAAsB,CAACjN,KAAK,EAAE;EAC5C,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,EACvB,MAAM,IAAIuB,0BAA0B,CAClC,mHAAmH,CACpH,CAAA;EAEH,IAAI,EAAE,KAAK,IAAIvB,KAAK,CAAC,EACnB,MAAM,IAAIuB,0BAA0B,CAClC,mDAAmD,CACpD,CAAA;EAEH,IACE,YAAY,IAAIvB,KAAK,KACpB,CAACD,aAAa,CAACC,KAAK,CAACa,UAAU,CAAC,IAAIb,KAAK,CAACa,UAAU,KAAK,IAAI,CAAC,EAE/D,MAAM,IAAIU,0BAA0B,CAClC,yFAAyF,CAC1F,CAAA;AACL,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS2L,sBAAsB,CAAClN,KAAK,EAAE;EAC5C,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,EACvB,MAAM,IAAIuB,0BAA0B,CAClC,iIAAiI,CAClI,CAAA;EAEH,IAAI,EAAE,QAAQ,IAAIvB,KAAK,CAAC,EACtB,MAAM,IAAIuB,0BAA0B,CAClC,sDAAsD,CACvD,CAAA;EAEH,IAAI,EAAE,QAAQ,IAAIvB,KAAK,CAAC,EACtB,MAAM,IAAIuB,0BAA0B,CAClC,sDAAsD,CACvD,CAAA;EAEH,IACE,YAAY,IAAIvB,KAAK,KACpB,CAACD,aAAa,CAACC,KAAK,CAACa,UAAU,CAAC,IAAIb,KAAK,CAACa,UAAU,KAAK,IAAI,CAAC,EAE/D,MAAM,IAAIU,0BAA0B,CAClC,yFAAyF,CAC1F,CAAA;AAEH,EAAA,IAAI,YAAY,IAAIvB,KAAK,IAAI,OAAOA,KAAK,CAACF,UAAU,KAAK,SAAS,EAChE,MAAM,IAAIyB,0BAA0B,CAClC,4FAA4F,CAC7F,CAAA;AACL;;AC7DA;AACA;AACA;AACA,IAAM4L,WAAW,GAAGnM,mCAAmC,EAAE,CAAA;;AAEzD;AACA;AACA;AACA,IAAMoM,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC,UAAU,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC,CAAA;AAE1D,IAAMC,aAAa,GAAG,IAAID,GAAG,CAAC,CAC5B,QAAQ,EACR,SAAS,EACT,cAAc,EACd,eAAe,CAChB,CAAC,CAAA;AAEF,IAAME,gBAAgB,GAAG,CACvB;EACEnN,IAAI,EAAE,cAAAoN,IAAI,EAAA;AAAA,IAAA,OAAA,EAAA,CAAA,MAAA,CAAOA,IAAI,EAAA,MAAA,CAAA,CAAA;GAAM;AAC3BC,EAAAA,WAAW,EAAE,IAAA;AACf,CAAC,EACD;EACErN,IAAI,EAAE,cAAAoN,IAAI,EAAA;AAAA,IAAA,OAAA,EAAA,CAAA,MAAA,CAAOA,IAAI,EAAA,cAAA,CAAA,CAAA;GAAc;AACnCC,EAAAA,WAAW,EAAE,IAAI;AACjBjO,EAAAA,IAAI,EAAE,UAAA;AACR,CAAC,EACD;EACEY,IAAI,EAAE,cAAAoN,IAAI,EAAA;AAAA,IAAA,OAAA,EAAA,CAAA,MAAA,CAAOA,IAAI,EAAA,gBAAA,CAAA,CAAA;GAAgB;AACrCC,EAAAA,WAAW,EAAE,IAAI;AACjBjO,EAAAA,IAAI,EAAE,YAAA;AACR,CAAC,EACD;EACEY,IAAI,EAAE,cAAAoN,IAAI,EAAA;AAAA,IAAA,OAAA,EAAA,CAAA,MAAA,CAAOA,IAAI,EAAA,aAAA,CAAA,CAAA;AAAA,GAAA;AACvB,CAAC,EACD;EACEpN,IAAI,EAAE,cAAAoN,IAAI,EAAA;AAAA,IAAA,OAAA,EAAA,CAAA,MAAA,CAAOA,IAAI,EAAA,qBAAA,CAAA,CAAA;GAAqB;AAC1ChO,EAAAA,IAAI,EAAE,UAAA;AACR,CAAC,EACD;EACEY,IAAI,EAAE,cAAAoN,IAAI,EAAA;AAAA,IAAA,OAAA,EAAA,CAAA,MAAA,CAAOA,IAAI,EAAA,uBAAA,CAAA,CAAA;GAAuB;AAC5ChO,EAAAA,IAAI,EAAE,YAAA;AACR,CAAC,CACF,CAAA;;AAED;AACA;AACA;AACA,IAAMkO,QAAQ,GAAG;AACfC,EAAAA,cAAc,EAAE,IAAI;AACpBnI,EAAAA,KAAK,EAAE,KAAK;AACZhG,EAAAA,IAAI,EAAE,OAAA;AACR,CAAC,CAAA;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoO,QAAO,CAACtO,KAAK,EAAE0M,IAAI,EAAEnL,UAAU,EAAE;AACxC,EAAA,IAAIA,UAAU,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC,EAC1C,MAAM,IAAIU,0BAA0B,CAAA,mEAAA,CAAA,MAAA,CACiCV,UAAU,EAC9E,IAAA,CAAA,CAAA,CAAA;;AAEH;EACAmL,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;AAChBnL,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAAE,CAAA;AAE7B,EAAA,IAAIvB,KAAK,CAACI,MAAM,CAACyJ,GAAG,CAAC6C,IAAI,CAAC,EACxB,MAAM,IAAIpK,eAAe,CAAA,uBAAA,CAAA,MAAA,CACAoK,IAAI,EAC5B,qCAAA,CAAA,CAAA,CAAA;EAEH,IAAM3H,IAAI,GAAG,IAAI/E,KAAK,CAACuO,aAAa,CAAC7B,IAAI,EAAEnL,UAAU,CAAC,CAAA;;AAEtD;EACAvB,KAAK,CAACI,MAAM,CAAC2L,GAAG,CAACW,IAAI,EAAE3H,IAAI,CAAC,CAAA;;AAE5B;AACA/E,EAAAA,KAAK,CAACoF,IAAI,CAAC,WAAW,EAAE;AACtB5C,IAAAA,GAAG,EAAEkK,IAAI;AACTnL,IAAAA,UAAU,EAAVA,UAAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOwD,IAAI,CAAA;AACb,CAAA;;AAEA;AACA;AACA;AACA;AACA,SAASyJ,aAAa,CAACxO,KAAK,EAAE0M,IAAI,EAAEnL,UAAU,EAAE;EAC9C,IAAMwD,IAAI,GAAG,IAAI/E,KAAK,CAACuO,aAAa,CAAC7B,IAAI,EAAEnL,UAAU,CAAC,CAAA;EAEtDvB,KAAK,CAACI,MAAM,CAAC2L,GAAG,CAACW,IAAI,EAAE3H,IAAI,CAAC,CAAA;AAE5B/E,EAAAA,KAAK,CAACoF,IAAI,CAAC,WAAW,EAAE;AACtB5C,IAAAA,GAAG,EAAEkK,IAAI;AACTnL,IAAAA,UAAU,EAAVA,UAAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOwD,IAAI,CAAA;AACb,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0J,OAAO,CACdzO,KAAK,EACLc,IAAI,EACJ4N,eAAe,EACflO,UAAU,EACVF,IAAI,EACJL,MAAM,EACNV,MAAM,EACNgC,UAAU,EACV;AACA;AACA,EAAA,IAAI,CAACf,UAAU,IAAIR,KAAK,CAACE,IAAI,KAAK,YAAY,EAC5C,MAAM,IAAIoC,eAAe,CAAA,QAAA,CAAA,MAAA,CACdxB,IAAI,EACd,4GAAA,CAAA,CAAA,CAAA;AAEH,EAAA,IAAIN,UAAU,IAAIR,KAAK,CAACE,IAAI,KAAK,UAAU,EACzC,MAAM,IAAIoC,eAAe,CAAA,QAAA,CAAA,MAAA,CACdxB,IAAI,EACd,0GAAA,CAAA,CAAA,CAAA;AAEH,EAAA,IAAIS,UAAU,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC,EAC1C,MAAM,IAAIU,0BAA0B,CAAA,QAAA,CAAA,MAAA,CACzBnB,IAAI,EAAA,sDAAA,CAAA,CAAA,MAAA,CAAsDS,UAAU,EAC9E,IAAA,CAAA,CAAA,CAAA;;AAEH;EACAtB,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;EACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;AACpBgC,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAAE,CAAA;AAE7B,EAAA,IAAI,CAACvB,KAAK,CAACqO,cAAc,IAAIpO,MAAM,KAAKV,MAAM,EAC5C,MAAM,IAAI+C,eAAe,CAAA,QAAA,CAAA,MAAA,CACdxB,IAAI,EAAA,oCAAA,CAAA,CAAA,MAAA,CAAoCb,MAAM,EACxD,oGAAA,CAAA,CAAA,CAAA;EAEH,IAAME,UAAU,GAAGH,KAAK,CAACI,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC;IACzC4H,UAAU,GAAG7H,KAAK,CAACI,MAAM,CAACC,GAAG,CAACd,MAAM,CAAC,CAAA;EAEvC,IAAI,CAACY,UAAU,EACb,MAAM,IAAIkC,kBAAkB,CACjBvB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAAkBb,kBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACtC,eAAA,CAAA,CAAA,CAAA;EAEH,IAAI,CAAC4H,UAAU,EACb,MAAM,IAAIxF,kBAAkB,CACjBvB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAAkBvB,kBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACtC,eAAA,CAAA,CAAA,CAAA;;AAEH;AACA,EAAA,IAAMoP,SAAS,GAAG;AAChBnM,IAAAA,GAAG,EAAE,IAAI;AACThC,IAAAA,UAAU,EAAVA,UAAU;AACVP,IAAAA,MAAM,EAANA,MAAM;AACNV,IAAAA,MAAM,EAANA,MAAM;AACNgC,IAAAA,UAAU,EAAVA,UAAAA;GACD,CAAA;AAED,EAAA,IAAImN,eAAe,EAAE;AACnB;AACA;AACApO,IAAAA,IAAI,GAAGN,KAAK,CAAC4O,iBAAiB,EAAE,CAAA;AAClC,GAAC,MAAM;AACL;IACAtO,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;;AAEhB;AACA,IAAA,IAAIN,KAAK,CAAC4E,MAAM,CAACiF,GAAG,CAACvJ,IAAI,CAAC,EACxB,MAAM,IAAIgC,eAAe,CAAA,QAAA,CAAA,MAAA,CACdxB,IAAI,EAAA,UAAA,CAAA,CAAA,MAAA,CAAUR,IAAI,EAC5B,sCAAA,CAAA,CAAA,CAAA;AACL,GAAA;;AAEA;EACA,IACE,CAACN,KAAK,CAACkG,KAAK,KACX1F,UAAU,GACP,OAAOL,UAAU,CAACK,UAAU,CAACjB,MAAM,CAAC,KAAK,WAAW,GACpD,OAAOY,UAAU,CAACI,GAAG,CAAChB,MAAM,CAAC,KAAK,WAAW,CAAC,EAClD;IACA,MAAM,IAAI+C,eAAe,CACdxB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,iCAAsBb,MAAM,EAAA,UAAA,CAAA,CAAA,MAAA,CAASV,MAAM,EACzD,+IAAA,CAAA,CAAA,CAAA;AACH,GAAA;;AAEA;AACA,EAAA,IAAMkF,QAAQ,GAAG,IAAIxB,QAAQ,CAC3BzC,UAAU,EACVF,IAAI,EACJH,UAAU,EACV0H,UAAU,EACVtG,UAAU,CACX,CAAA;;AAED;EACAvB,KAAK,CAAC4E,MAAM,CAACmH,GAAG,CAACzL,IAAI,EAAEmE,QAAQ,CAAC,CAAA;;AAEhC;AACA,EAAA,IAAMoK,UAAU,GAAG5O,MAAM,KAAKV,MAAM,CAAA;AAEpC,EAAA,IAAIiB,UAAU,EAAE;IACdL,UAAU,CAACyC,gBAAgB,EAAE,CAAA;IAC7BiF,UAAU,CAACjF,gBAAgB,EAAE,CAAA;AAE7B,IAAA,IAAIiM,UAAU,EAAE;MACd1O,UAAU,CAAC0C,eAAe,EAAE,CAAA;MAC5B7C,KAAK,CAAC8O,wBAAwB,EAAE,CAAA;AAClC,KAAA;AACF,GAAC,MAAM;IACL3O,UAAU,CAACwC,SAAS,EAAE,CAAA;IACtBkF,UAAU,CAACnF,QAAQ,EAAE,CAAA;AAErB,IAAA,IAAImM,UAAU,EAAE;MACd1O,UAAU,CAAC2C,aAAa,EAAE,CAAA;MAC1B9C,KAAK,CAAC+O,sBAAsB,EAAE,CAAA;AAChC,KAAA;AACF,GAAA;;AAEA;AACA,EAAA,IAAI/O,KAAK,CAACkG,KAAK,EAAEzB,QAAQ,CAACpB,WAAW,EAAE,CAAC,KACnCoB,QAAQ,CAACvB,MAAM,EAAE,CAAA;EAEtB,IAAI1C,UAAU,EAAER,KAAK,CAACgP,eAAe,EAAE,CAAC,KACnChP,KAAK,CAACiP,aAAa,EAAE,CAAA;;AAE1B;EACAN,SAAS,CAACnM,GAAG,GAAGlC,IAAI,CAAA;AAEpBN,EAAAA,KAAK,CAACoF,IAAI,CAAC,WAAW,EAAEuJ,SAAS,CAAC,CAAA;AAElC,EAAA,OAAOrO,IAAI,CAAA;AACb,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4O,SAAS,CAChBlP,KAAK,EACLc,IAAI,EACJ4N,eAAe,EACflO,UAAU,EACVF,IAAI,EACJL,MAAM,EACNV,MAAM,EACNgC,UAAU,EACV4N,SAAS,EACT;AACA;AACA,EAAA,IAAI,CAAC3O,UAAU,IAAIR,KAAK,CAACE,IAAI,KAAK,YAAY,EAC5C,MAAM,IAAIoC,eAAe,CAAA,QAAA,CAAA,MAAA,CACdxB,IAAI,EACd,oIAAA,CAAA,CAAA,CAAA;AAEH,EAAA,IAAIN,UAAU,IAAIR,KAAK,CAACE,IAAI,KAAK,UAAU,EACzC,MAAM,IAAIoC,eAAe,CAAA,QAAA,CAAA,MAAA,CACdxB,IAAI,EACd,kIAAA,CAAA,CAAA,CAAA;AAEH,EAAA,IAAIS,UAAU,EAAE;AACd,IAAA,IAAI4N,SAAS,EAAE;AACb,MAAA,IAAI,OAAO5N,UAAU,KAAK,UAAU,EAClC,MAAM,IAAIU,0BAA0B,CACzBnB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,EAA6DS,6DAAAA,CAAAA,CAAAA,MAAAA,CAAAA,UAAU,EACrF,IAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;AACL,MAAA,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC,EAC5B,MAAM,IAAIU,0BAA0B,CAAA,QAAA,CAAA,MAAA,CACzBnB,IAAI,EAAA,sDAAA,CAAA,CAAA,MAAA,CAAsDS,UAAU,EAC9E,IAAA,CAAA,CAAA,CAAA;AACL,KAAA;AACF,GAAA;;AAEA;EACAtB,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;EACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;AAEpB,EAAA,IAAI+F,OAAO,CAAA;AAEX,EAAA,IAAI6J,SAAS,EAAE;AACb7J,IAAAA,OAAO,GAAG/D,UAAU,CAAA;AACpBA,IAAAA,UAAU,GAAGqC,SAAS,CAAA;AACxB,GAAA;AAEA,EAAA,IAAI,CAAC5D,KAAK,CAACqO,cAAc,IAAIpO,MAAM,KAAKV,MAAM,EAC5C,MAAM,IAAI+C,eAAe,CAAA,QAAA,CAAA,MAAA,CACdxB,IAAI,EAAA,oCAAA,CAAA,CAAA,MAAA,CAAoCb,MAAM,EACxD,oGAAA,CAAA,CAAA,CAAA;EAEH,IAAIE,UAAU,GAAGH,KAAK,CAACI,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;EACzC,IAAI4H,UAAU,GAAG7H,KAAK,CAACI,MAAM,CAACC,GAAG,CAACd,MAAM,CAAC,CAAA;AACzC,EAAA,IAAIkF,QAAQ,CAAA;;AAEZ;AACA,EAAA,IAAI2K,uBAAuB,CAAA;EAE3B,IAAI,CAACV,eAAe,EAAE;IACpBjK,QAAQ,GAAGzE,KAAK,CAAC4E,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;AAEjC,IAAA,IAAImE,QAAQ,EAAE;AACZ;AACA;AACA,MAAA,IAAIA,QAAQ,CAACxE,MAAM,CAACuC,GAAG,KAAKvC,MAAM,IAAIwE,QAAQ,CAAClF,MAAM,CAACiD,GAAG,KAAKjD,MAAM,EAAE;AACpE;AACA,QAAA,IACE,CAACiB,UAAU,IACXiE,QAAQ,CAACxE,MAAM,CAACuC,GAAG,KAAKjD,MAAM,IAC9BkF,QAAQ,CAAClF,MAAM,CAACiD,GAAG,KAAKvC,MAAM,EAC9B;AACA;UACA,MAAM,IAAIqC,eAAe,CACdxB,QAAAA,CAAAA,MAAAA,CAAAA,IAAI,qEAA0DR,IAAI,EAAA,iBAAA,CAAA,CAAA,MAAA,CAAgBL,MAAM,EAAA,gBAAA,CAAA,CAAA,MAAA,CAAeV,MAAM,EAAA,mBAAA,CAAA,CAAA,MAAA,CAAkBkF,QAAQ,CAACxE,MAAM,CAACuC,GAAG,EAAA,QAAA,CAAA,CAAA,MAAA,CAAOiC,QAAQ,CAAClF,MAAM,CAACiD,GAAG,EACtL,MAAA,CAAA,CAAA,CAAA;AACH,SAAA;AACF,OAAA;AAEA4M,MAAAA,uBAAuB,GAAG3K,QAAQ,CAAA;AACpC,KAAA;AACF,GAAA;;AAEA;EACA,IAAI,CAAC2K,uBAAuB,IAAI,CAACpP,KAAK,CAACkG,KAAK,IAAI/F,UAAU,EAAE;AAC1DiP,IAAAA,uBAAuB,GAAG5O,UAAU,GAChCL,UAAU,CAACK,UAAU,CAACjB,MAAM,CAAC,GAC7BY,UAAU,CAACI,GAAG,CAAChB,MAAM,CAAC,CAAA;AAC5B,GAAA;;AAEA;AACA,EAAA,IAAI6P,uBAAuB,EAAE;AAC3B,IAAA,IAAMC,IAAI,GAAG,CAACD,uBAAuB,CAAC5M,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;;AAE/D;IACA,IAAI2M,SAAS,GAAG,CAAC7J,OAAO,GAAG,CAAC/D,UAAU,EAAE,OAAO8N,IAAI,CAAA;;AAEnD;AACA,IAAA,IAAIF,SAAS,EAAE;AACb,MAAA,IAAMG,aAAa,GAAGF,uBAAuB,CAAC7N,UAAU,CAAA;AACxD6N,MAAAA,uBAAuB,CAAC7N,UAAU,GAAG+D,OAAO,CAACgK,aAAa,CAAC,CAAA;AAE3DtP,MAAAA,KAAK,CAACoF,IAAI,CAAC,uBAAuB,EAAE;AAClClF,QAAAA,IAAI,EAAE,SAAS;QACfsC,GAAG,EAAE4M,uBAAuB,CAAC5M,GAAG;QAChCjB,UAAU,EAAE6N,uBAAuB,CAAC7N,UAAAA;AACtC,OAAC,CAAC,CAAA;AACJ,KAAA;;AAEA;SACK;AACH1B,MAAAA,MAAM,CAACuP,uBAAuB,CAAC7N,UAAU,EAAEA,UAAU,CAAC,CAAA;AAEtDvB,MAAAA,KAAK,CAACoF,IAAI,CAAC,uBAAuB,EAAE;AAClClF,QAAAA,IAAI,EAAE,OAAO;QACbsC,GAAG,EAAE4M,uBAAuB,CAAC5M,GAAG;QAChCjB,UAAU,EAAE6N,uBAAuB,CAAC7N,UAAU;AAC9CwD,QAAAA,IAAI,EAAExD,UAAAA;AACR,OAAC,CAAC,CAAA;AACJ,KAAA;AAEA,IAAA,OAAO8N,IAAI,CAAA;AACb,GAAA;AAEA9N,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAAE,CAAA;EAE7B,IAAI4N,SAAS,IAAI7J,OAAO,EAAE/D,UAAU,GAAG+D,OAAO,CAAC/D,UAAU,CAAC,CAAA;;AAE1D;AACA,EAAA,IAAMoN,SAAS,GAAG;AAChBnM,IAAAA,GAAG,EAAE,IAAI;AACThC,IAAAA,UAAU,EAAVA,UAAU;AACVP,IAAAA,MAAM,EAANA,MAAM;AACNV,IAAAA,MAAM,EAANA,MAAM;AACNgC,IAAAA,UAAU,EAAVA,UAAAA;GACD,CAAA;AAED,EAAA,IAAImN,eAAe,EAAE;AACnB;AACA;AACApO,IAAAA,IAAI,GAAGN,KAAK,CAAC4O,iBAAiB,EAAE,CAAA;AAClC,GAAC,MAAM;AACL;IACAtO,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;;AAEhB;AACA,IAAA,IAAIN,KAAK,CAAC4E,MAAM,CAACiF,GAAG,CAACvJ,IAAI,CAAC,EACxB,MAAM,IAAIgC,eAAe,CAAA,QAAA,CAAA,MAAA,CACdxB,IAAI,EAAA,UAAA,CAAA,CAAA,MAAA,CAAUR,IAAI,EAC5B,sCAAA,CAAA,CAAA,CAAA;AACL,GAAA;EAEA,IAAIiP,cAAc,GAAG,KAAK,CAAA;EAC1B,IAAIC,cAAc,GAAG,KAAK,CAAA;EAE1B,IAAI,CAACrP,UAAU,EAAE;IACfA,UAAU,GAAGqO,aAAa,CAACxO,KAAK,EAAEC,MAAM,EAAE,EAAE,CAAC,CAAA;AAC7CsP,IAAAA,cAAc,GAAG,IAAI,CAAA;IAErB,IAAItP,MAAM,KAAKV,MAAM,EAAE;AACrBsI,MAAAA,UAAU,GAAG1H,UAAU,CAAA;AACvBqP,MAAAA,cAAc,GAAG,IAAI,CAAA;AACvB,KAAA;AACF,GAAA;EACA,IAAI,CAAC3H,UAAU,EAAE;IACfA,UAAU,GAAG2G,aAAa,CAACxO,KAAK,EAAET,MAAM,EAAE,EAAE,CAAC,CAAA;AAC7CiQ,IAAAA,cAAc,GAAG,IAAI,CAAA;AACvB,GAAA;;AAEA;AACA/K,EAAAA,QAAQ,GAAG,IAAIxB,QAAQ,CAACzC,UAAU,EAAEF,IAAI,EAAEH,UAAU,EAAE0H,UAAU,EAAEtG,UAAU,CAAC,CAAA;;AAE7E;EACAvB,KAAK,CAAC4E,MAAM,CAACmH,GAAG,CAACzL,IAAI,EAAEmE,QAAQ,CAAC,CAAA;;AAEhC;AACA,EAAA,IAAMoK,UAAU,GAAG5O,MAAM,KAAKV,MAAM,CAAA;AAEpC,EAAA,IAAIiB,UAAU,EAAE;IACdL,UAAU,CAACyC,gBAAgB,EAAE,CAAA;IAC7BiF,UAAU,CAACjF,gBAAgB,EAAE,CAAA;AAE7B,IAAA,IAAIiM,UAAU,EAAE;MACd1O,UAAU,CAAC0C,eAAe,EAAE,CAAA;MAC5B7C,KAAK,CAAC8O,wBAAwB,EAAE,CAAA;AAClC,KAAA;AACF,GAAC,MAAM;IACL3O,UAAU,CAACwC,SAAS,EAAE,CAAA;IACtBkF,UAAU,CAACnF,QAAQ,EAAE,CAAA;AAErB,IAAA,IAAImM,UAAU,EAAE;MACd1O,UAAU,CAAC2C,aAAa,EAAE,CAAA;MAC1B9C,KAAK,CAAC+O,sBAAsB,EAAE,CAAA;AAChC,KAAA;AACF,GAAA;;AAEA;AACA,EAAA,IAAI/O,KAAK,CAACkG,KAAK,EAAEzB,QAAQ,CAACpB,WAAW,EAAE,CAAC,KACnCoB,QAAQ,CAACvB,MAAM,EAAE,CAAA;EAEtB,IAAI1C,UAAU,EAAER,KAAK,CAACgP,eAAe,EAAE,CAAC,KACnChP,KAAK,CAACiP,aAAa,EAAE,CAAA;;AAE1B;EACAN,SAAS,CAACnM,GAAG,GAAGlC,IAAI,CAAA;AAEpBN,EAAAA,KAAK,CAACoF,IAAI,CAAC,WAAW,EAAEuJ,SAAS,CAAC,CAAA;EAElC,OAAO,CAACrO,IAAI,EAAE,IAAI,EAAEiP,cAAc,EAAEC,cAAc,CAAC,CAAA;AACrD,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAACzP,KAAK,EAAEyE,QAAQ,EAAE;AACzC;AACAzE,EAAAA,KAAK,CAAC4E,MAAM,CAAA,QAAA,CAAO,CAACH,QAAQ,CAACjC,GAAG,CAAC,CAAA;;AAEjC;AACA,EAAA,IAAerC,UAAU,GAAoCsE,QAAQ,CAA9DxE,MAAM;IAAsB4H,UAAU,GAAgBpD,QAAQ,CAA1ClF,MAAM;IAAcgC,UAAU,GAAIkD,QAAQ,CAAtBlD,UAAU,CAAA;AAEzD,EAAA,IAAMf,UAAU,GAAGiE,QAAQ,CAACjE,UAAU,CAAA;AAEtC,EAAA,IAAMqO,UAAU,GAAG1O,UAAU,KAAK0H,UAAU,CAAA;AAE5C,EAAA,IAAIrH,UAAU,EAAE;IACdL,UAAU,CAACyC,gBAAgB,EAAE,CAAA;IAC7BiF,UAAU,CAACjF,gBAAgB,EAAE,CAAA;AAE7B,IAAA,IAAIiM,UAAU,EAAE;MACd1O,UAAU,CAAC0C,eAAe,EAAE,CAAA;MAC5B7C,KAAK,CAAC8O,wBAAwB,EAAE,CAAA;AAClC,KAAA;AACF,GAAC,MAAM;IACL3O,UAAU,CAACwC,SAAS,EAAE,CAAA;IACtBkF,UAAU,CAACnF,QAAQ,EAAE,CAAA;AAErB,IAAA,IAAImM,UAAU,EAAE;MACd1O,UAAU,CAAC2C,aAAa,EAAE,CAAA;MAC1B9C,KAAK,CAAC+O,sBAAsB,EAAE,CAAA;AAChC,KAAA;AACF,GAAA;;AAEA;AACA,EAAA,IAAI/O,KAAK,CAACkG,KAAK,EAAEzB,QAAQ,CAACd,WAAW,EAAE,CAAC,KACnCc,QAAQ,CAACf,MAAM,EAAE,CAAA;EAEtB,IAAIlD,UAAU,EAAER,KAAK,CAACgP,eAAe,EAAE,CAAC,KACnChP,KAAK,CAACiP,aAAa,EAAE,CAAA;;AAE1B;AACAjP,EAAAA,KAAK,CAACoF,IAAI,CAAC,aAAa,EAAE;IACxB5C,GAAG,EAAEiC,QAAQ,CAACjC,GAAG;AACjBjB,IAAAA,UAAU,EAAVA,UAAU;IACVtB,MAAM,EAAEE,UAAU,CAACqC,GAAG;IACtBjD,MAAM,EAAEsI,UAAU,CAACrF,GAAG;AACtBhC,IAAAA,UAAU,EAAVA,UAAAA;AACF,GAAC,CAAC,CAAA;AACJ,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,IAYqBuF,KAAK,gBAAA,UAAA,aAAA,EAAA;AAAA,EAAA,cAAA,CAAA,KAAA,EAAA,aAAA,CAAA,CAAA;AACxB,EAAA,SAAA,KAAA,CAAY2J,OAAO,EAAE;AAAA,IAAA,IAAA,KAAA,CAAA;IACnB,KAAO,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA;;AAEP;IACAA,OAAO,GAAG7P,MAAM,CAAC,EAAE,EAAEuO,QAAQ,EAAEsB,OAAO,CAAC,CAAA;;AAEvC;AACA,IAAA,IAAI,OAAOA,OAAO,CAACxJ,KAAK,KAAK,SAAS,EACpC,MAAM,IAAIjE,0BAA0B,CAAA,2EAAA,CAAA,MAAA,CACyCyN,OAAO,CAACxJ,KAAK,EACzF,KAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,CAAC4H,KAAK,CAACjE,GAAG,CAAC6F,OAAO,CAACxP,IAAI,CAAC,EAC1B,MAAM,IAAI+B,0BAA0B,0HACyEyN,OAAO,CAACxP,IAAI,EACxH,KAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,OAAOwP,OAAO,CAACrB,cAAc,KAAK,SAAS,EAC7C,MAAM,IAAIpM,0BAA0B,CAAA,oFAAA,CAAA,MAAA,CACkDyN,OAAO,CAACrB,cAAc,EAC3G,KAAA,CAAA,CAAA,CAAA;;AAEH;;AAEA;AACA,IAAA,IAAME,aAAa,GACjBmB,OAAO,CAACxP,IAAI,KAAK,OAAO,GACpBqC,aAAa,GACbmN,OAAO,CAACxP,IAAI,KAAK,UAAU,GAC3B6C,gBAAgB,GAChBC,kBAAkB,CAAA;AAExBnC,IAAAA,eAAe,CAAO,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAe,EAAE0N,aAAa,CAAC,CAAA;;AAErD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAA,IAAMoB,cAAc,GAAG,OAAO,GAAG9B,WAAW,EAAE,GAAG,GAAG,CAAA;IACpD,IAAI+B,MAAM,GAAG,CAAC,CAAA;AAEd,IAAA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;AAC7B,MAAA,IAAIC,gBAAgB,CAAA;MAEpB,GAAG;AACDA,QAAAA,gBAAgB,GAAGH,cAAc,GAAGC,MAAM,EAAE,CAAA;AAC9C,OAAC,QAAQ,KAAKhL,CAAAA,MAAM,CAACiF,GAAG,CAACiG,gBAAgB,CAAC,EAAA;AAE1C,MAAA,OAAOA,gBAAgB,CAAA;KACxB,CAAA;;AAED;AACAjP,IAAAA,eAAe,CAAO,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAa,EAAE,EAAE,CAAC,CAAA;AACxCA,IAAAA,eAAe,gCAAO,QAAQ,EAAE,IAAIkP,GAAG,EAAE,CAAC,CAAA;AAC1ClP,IAAAA,eAAe,gCAAO,QAAQ,EAAE,IAAIkP,GAAG,EAAE,CAAC,CAAA;AAC1ClP,IAAAA,eAAe,CAAO,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAe,EAAE,CAAC,CAAC,CAAA;AACzCA,IAAAA,eAAe,CAAO,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAiB,EAAE,CAAC,CAAC,CAAA;AAC3CA,IAAAA,eAAe,CAAO,sBAAA,CAAA,KAAA,CAAA,EAAA,wBAAwB,EAAE,CAAC,CAAC,CAAA;AAClDA,IAAAA,eAAe,CAAO,sBAAA,CAAA,KAAA,CAAA,EAAA,0BAA0B,EAAE,CAAC,CAAC,CAAA;AACpDA,IAAAA,eAAe,CAAO,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAmB,EAAEgP,gBAAgB,CAAC,CAAA;;AAE5D;AACAhP,IAAAA,eAAe,CAAO,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAU,EAAE6O,OAAO,CAAC,CAAA;;AAE1C;AACA1B,IAAAA,aAAa,CAAChI,OAAO,CAAC,UAAAgK,IAAI,EAAA;AAAA,MAAA,OAAInP,eAAe,CAAOmP,sBAAAA,CAAAA,KAAAA,CAAAA,EAAAA,IAAI,EAAE,KAAKA,CAAAA,IAAI,CAAC,CAAC,CAAA;KAAC,CAAA,CAAA;;AAEtE;IACA7O,gBAAgB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAO,OAAO,EAAE,YAAA;MAAA,OAAM,KAAA,CAAKf,MAAM,CAAC8H,IAAI,CAAA;KAAC,CAAA,CAAA;IACvD/G,gBAAgB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAO,MAAM,EAAE,YAAA;MAAA,OAAM,KAAA,CAAKyD,MAAM,CAACsD,IAAI,CAAA;KAAC,CAAA,CAAA;IACtD/G,gBAAgB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAO,cAAc,EAAE,YAAA;AAAA,MAAA,OAAM,MAAK8N,aAAa,CAAA;KAAC,CAAA,CAAA;IAChE9N,gBAAgB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAO,gBAAgB,EAAE,YAAA;AAAA,MAAA,OAAM,MAAK6N,eAAe,CAAA;KAAC,CAAA,CAAA;IACpE7N,gBAAgB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAEd,eAAe,EACf,YAAA;AAAA,MAAA,OAAM,KAAK4N,CAAAA,sBAAsB,GAAG,KAAA,CAAKD,wBAAwB,CAAA;KAClE,CAAA,CAAA;IACD3N,gBAAgB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAEd,uBAAuB,EACvB,YAAA;AAAA,MAAA,OAAM,MAAK4N,sBAAsB,CAAA;KAClC,CAAA,CAAA;IACD5N,gBAAgB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAEd,yBAAyB,EACzB,YAAA;AAAA,MAAA,OAAM,MAAK2N,wBAAwB,CAAA;KACpC,CAAA,CAAA;AACD3N,IAAAA,gBAAgB,gCAAO,OAAO,EAAE,MAAK8O,QAAQ,CAAC/J,KAAK,CAAC,CAAA;AACpD/E,IAAAA,gBAAgB,gCAAO,MAAM,EAAE,MAAK8O,QAAQ,CAAC/P,IAAI,CAAC,CAAA;AAClDiB,IAAAA,gBAAgB,gCAAO,gBAAgB,EAAE,MAAK8O,QAAQ,CAAC5B,cAAc,CAAC,CAAA;IACtElN,gBAAgB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAO,gBAAgB,EAAE,YAAA;AAAA,MAAA,OAAM,YAAY,CAAA;KAAC,CAAA,CAAA;AAAC,IAAA,OAAA,KAAA,CAAA;AAC/D,GAAA;AAAC,EAAA,IAAA,MAAA,GAAA,KAAA,CAAA,SAAA,CAAA;EAAA,MAED+O,CAAAA,sBAAsB,GAAtB,SAAyB,sBAAA,GAAA;IACvB,IAAI,CAACjB,aAAa,GAAG,CAAC,CAAA;IACtB,IAAI,CAACD,eAAe,GAAG,CAAC,CAAA;IACxB,IAAI,CAACD,sBAAsB,GAAG,CAAC,CAAA;IAC/B,IAAI,CAACD,wBAAwB,GAAG,CAAC,CAAA;AACnC,GAAA;;AAEA;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA,MALE;AAAA,EAAA,MAAA,CAMAqB,OAAO,GAAP,SAAQzD,OAAAA,CAAAA,IAAI,EAAE;IACZ,OAAO,IAAI,CAACtM,MAAM,CAACyJ,GAAG,CAAC,EAAE,GAAG6C,IAAI,CAAC,CAAA;AACnC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAbE;AAAA,EAAA,MAAA,CAcA0D,eAAe,GAAf,SAAA,eAAA,CAAgBnQ,MAAM,EAAEV,MAAM,EAAE;AAC9B;AACA,IAAA,IAAI,IAAI,CAACW,IAAI,KAAK,YAAY,EAAE,OAAO,KAAK,CAAA;AAE5C,IAAA,IAAIV,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;AAC1B,MAAA,IAAMW,IAAI,GAAG,EAAE,GAAGL,MAAM,CAAA;MAExB,IAAMwE,QAAQ,GAAG,IAAI,CAACG,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;AAEtC,MAAA,OAAO,CAAC,CAACmE,QAAQ,IAAI,CAACA,QAAQ,CAACjE,UAAU,CAAA;AAC3C,KAAC,MAAM,IAAIhB,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MACjCM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;;AAEpB;MACA,IAAMiF,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;AAExC,MAAA,IAAI,CAACuE,QAAQ,EAAE,OAAO,KAAK,CAAA;;AAE3B;AACA,MAAA,OAAOA,QAAQ,CAACjE,GAAG,CAAC2E,cAAc,CAAC3F,MAAM,CAAC,CAAA;AAC5C,KAAA;AAEA,IAAA,MAAM,IAAI0C,0BAA0B,CAAA,wCAAA,CAAA,MAAA,CACOzC,SAAS,CAACG,MAAM,EAC1D,sHAAA,CAAA,CAAA,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAbE;AAAA,EAAA,MAAA,CAcA0Q,iBAAiB,GAAjB,SAAA,iBAAA,CAAkBpQ,MAAM,EAAEV,MAAM,EAAE;AAChC;AACA,IAAA,IAAI,IAAI,CAACW,IAAI,KAAK,UAAU,EAAE,OAAO,KAAK,CAAA;AAE1C,IAAA,IAAIV,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;AAC1B,MAAA,IAAMW,IAAI,GAAG,EAAE,GAAGL,MAAM,CAAA;MAExB,IAAMwE,QAAQ,GAAG,IAAI,CAACG,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;AAEtC,MAAA,OAAO,CAAC,CAACmE,QAAQ,IAAIA,QAAQ,CAACjE,UAAU,CAAA;AAC1C,KAAC,MAAM,IAAIhB,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MACjCM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;;AAEpB;MACA,IAAMiF,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;AAExC,MAAA,IAAI,CAACuE,QAAQ,EAAE,OAAO,KAAK,CAAA;;AAE3B;AACA,MAAA,OAAOA,QAAQ,CAAChE,UAAU,CAAC0E,cAAc,CAAC3F,MAAM,CAAC,CAAA;AACnD,KAAA;AAEA,IAAA,MAAM,IAAI0C,0BAA0B,CAAA,wCAAA,CAAA,MAAA,CACOzC,SAAS,CAACG,MAAM,EAC1D,sHAAA,CAAA,CAAA,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAbE;AAAA,EAAA,MAAA,CAcA2Q,OAAO,GAAP,SAAA,OAAA,CAAQrQ,MAAM,EAAEV,MAAM,EAAE;AACtB,IAAA,IAAIC,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;AAC1B,MAAA,IAAMW,IAAI,GAAG,EAAE,GAAGL,MAAM,CAAA;AAExB,MAAA,OAAO,IAAI,CAAC2E,MAAM,CAACiF,GAAG,CAACvJ,IAAI,CAAC,CAAA;AAC9B,KAAC,MAAM,IAAId,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MACjCM,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;MACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;;AAEpB;MACA,IAAMiF,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;AAExC,MAAA,IAAI,CAACuE,QAAQ,EAAE,OAAO,KAAK,CAAA;;AAE3B;AACA,MAAA,OACG,OAAOA,QAAQ,CAACjE,GAAG,KAAK,WAAW,IAClCiE,QAAQ,CAACjE,GAAG,CAAC2E,cAAc,CAAC3F,MAAM,CAAC,IACpC,OAAOiF,QAAQ,CAAChE,UAAU,KAAK,WAAW,IACzCgE,QAAQ,CAAChE,UAAU,CAAC0E,cAAc,CAAC3F,MAAM,CAAE,CAAA;AAEjD,KAAA;AAEA,IAAA,MAAM,IAAI0C,0BAA0B,CAAA,gCAAA,CAAA,MAAA,CACDzC,SAAS,CAACG,MAAM,EAClD,sHAAA,CAAA,CAAA,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAVE;AAAA,EAAA,MAAA,CAWA4Q,YAAY,GAAZ,SAAA,YAAA,CAAatQ,MAAM,EAAEV,MAAM,EAAE;AAC3B,IAAA,IAAI,IAAI,CAACW,IAAI,KAAK,YAAY,EAAE,OAAA;IAEhCD,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;IACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;IAEpB,IAAI,IAAI,CAAC2G,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACvB,0JAA0J,CAC3J,CAAA;IAEH,IAAMnC,UAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;IAE1C,IAAI,CAACE,UAAU,EACb,MAAM,IAAIkC,kBAAkB,CAAA,2CAAA,CAAA,MAAA,CACiBpC,MAAM,EAClD,8BAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,CAAC,IAAI,CAACG,MAAM,CAACyJ,GAAG,CAACtK,MAAM,CAAC,EAC1B,MAAM,IAAI8C,kBAAkB,CAAA,2CAAA,CAAA,MAAA,CACiB9C,MAAM,EAClD,8BAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAMkF,QAAQ,GAAItE,UAAU,CAACI,GAAG,IAAIJ,UAAU,CAACI,GAAG,CAAChB,MAAM,CAAC,IAAKqE,SAAS,CAAA;AAExE,IAAA,IAAIa,QAAQ,EAAE,OAAOA,QAAQ,CAACjC,GAAG,CAAA;AACnC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAVE;AAAA,EAAA,MAAA,CAWAgO,cAAc,GAAd,SAAA,cAAA,CAAevQ,MAAM,EAAEV,MAAM,EAAE;AAC7B,IAAA,IAAI,IAAI,CAACW,IAAI,KAAK,UAAU,EAAE,OAAA;IAE9BD,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;IACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;IAEpB,IAAI,IAAI,CAAC2G,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACvB,8JAA8J,CAC/J,CAAA;IAEH,IAAMnC,UAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;IAE1C,IAAI,CAACE,UAAU,EACb,MAAM,IAAIkC,kBAAkB,CAAA,6CAAA,CAAA,MAAA,CACmBpC,MAAM,EACpD,8BAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,CAAC,IAAI,CAACG,MAAM,CAACyJ,GAAG,CAACtK,MAAM,CAAC,EAC1B,MAAM,IAAI8C,kBAAkB,CAAA,6CAAA,CAAA,MAAA,CACmB9C,MAAM,EACpD,8BAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAMkF,QAAQ,GACXtE,UAAU,CAACK,UAAU,IAAIL,UAAU,CAACK,UAAU,CAACjB,MAAM,CAAC,IAAKqE,SAAS,CAAA;AAEvE,IAAA,IAAIa,QAAQ,EAAE,OAAOA,QAAQ,CAACjC,GAAG,CAAA;AACnC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAVE;AAAA,EAAA,MAAA,CAWAlC,IAAI,GAAJ,SAAA,IAAA,CAAKL,MAAM,EAAEV,MAAM,EAAE;IACnB,IAAI,IAAI,CAAC2G,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACvB,0IAA0I,CAC3I,CAAA;IAEHrC,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;IACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;IAEpB,IAAMY,UAAU,GAAG,IAAI,CAACC,MAAM,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAA;IAE1C,IAAI,CAACE,UAAU,EACb,MAAM,IAAIkC,kBAAkB,CAAA,mCAAA,CAAA,MAAA,CACSpC,MAAM,EAC1C,8BAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,CAAC,IAAI,CAACG,MAAM,CAACyJ,GAAG,CAACtK,MAAM,CAAC,EAC1B,MAAM,IAAI8C,kBAAkB,CAAA,mCAAA,CAAA,MAAA,CACS9C,MAAM,EAC1C,8BAAA,CAAA,CAAA,CAAA;IAEH,IAAMkF,QAAQ,GACXtE,UAAU,CAACI,GAAG,IAAIJ,UAAU,CAACI,GAAG,CAAChB,MAAM,CAAC,IACxCY,UAAU,CAACK,UAAU,IAAIL,UAAU,CAACK,UAAU,CAACjB,MAAM,CAAE,IACxDqE,SAAS,CAAA;AAEX,IAAA,IAAIa,QAAQ,EAAE,OAAOA,QAAQ,CAACjC,GAAG,CAAA;AACnC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARE;AAAA,EAAA,MAAA,CASAiO,oBAAoB,GAApB,SAAA,oBAAA,CAAqB/D,IAAI,EAAEH,QAAQ,EAAE;IACnCG,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBH,QAAQ,GAAG,EAAE,GAAGA,QAAQ,CAAA;IAExB,IAAM/H,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,mDAAA,CAAA,MAAA,CACyBqK,IAAI,EACxD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,KAAK,CAAA;IAE5C,OAAOqM,QAAQ,IAAI/H,QAAQ,CAAA,IAAA,CAAG,IAAI+H,QAAQ,IAAI/H,QAAQ,CAACjE,GAAG,CAAA;AAC5D,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARE;AAAA,EAAA,MAAA,CASAmQ,eAAe,GAAf,SAAA,eAAA,CAAgBhE,IAAI,EAAEH,QAAQ,EAAE;IAC9BG,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBH,QAAQ,GAAG,EAAE,GAAGA,QAAQ,CAAA;IAExB,IAAM/H,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,8CAAA,CAAA,MAAA,CACoBqK,IAAI,EACnD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,KAAK,CAAA;AAE5C,IAAA,OAAOqM,QAAQ,IAAI/H,QAAQ,CAACjE,GAAG,CAAA;AACjC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARE;AAAA,EAAA,MAAA,CASAoQ,cAAc,GAAd,SAAA,cAAA,CAAejE,IAAI,EAAEH,QAAQ,EAAE;IAC7BG,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBH,QAAQ,GAAG,EAAE,GAAGA,QAAQ,CAAA;IAExB,IAAM/H,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,6CAAA,CAAA,MAAA,CACmBqK,IAAI,EAClD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,KAAK,CAAA;IAE5C,OAAOqM,QAAQ,IAAI/H,QAAQ,CAAG,IAAA,CAAA,CAAA;AAChC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARE;AAAA,EAAA,MAAA,CASAoM,sBAAsB,GAAtB,SAAA,sBAAA,CAAuBlE,IAAI,EAAEH,QAAQ,EAAE;IACrCG,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBH,QAAQ,GAAG,EAAE,GAAGA,QAAQ,CAAA;IAExB,IAAM/H,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,qDAAA,CAAA,MAAA,CAC2BqK,IAAI,EAC1D,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,UAAU,EAAE,OAAO,KAAK,CAAA;AAE1C,IAAA,OAAOqM,QAAQ,IAAI/H,QAAQ,CAAChE,UAAU,CAAA;AACxC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARE;AAAA,EAAA,MAAA,CASAqQ,YAAY,GAAZ,SAAA,YAAA,CAAanE,IAAI,EAAEH,QAAQ,EAAE;IAC3BG,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBH,QAAQ,GAAG,EAAE,GAAGA,QAAQ,CAAA;IAExB,IAAM/H,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,2CAAA,CAAA,MAAA,CACiBqK,IAAI,EAChD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE;AAC9B,MAAA,IAAIqM,QAAQ,IAAI/H,QAAQ,CAAA,IAAA,CAAG,IAAI+H,QAAQ,IAAI/H,QAAQ,CAACjE,GAAG,EAAE,OAAO,IAAI,CAAA;AACtE,KAAA;AAEA,IAAA,IAAI,IAAI,CAACL,IAAI,KAAK,UAAU,EAAE;AAC5B,MAAA,IAAIqM,QAAQ,IAAI/H,QAAQ,CAAChE,UAAU,EAAE,OAAO,IAAI,CAAA;AAClD,KAAA;AAEA,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARE;AAAA,EAAA,MAAA,CASAsQ,mBAAmB,GAAnB,SAAA,mBAAA,CAAoBpE,IAAI,EAAEH,QAAQ,EAAE;IAClCG,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBH,QAAQ,GAAG,EAAE,GAAGA,QAAQ,CAAA;IAExB,IAAM/H,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,kDAAA,CAAA,MAAA,CACwBqK,IAAI,EACvD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE;AAC9B,MAAA,IAAIqM,QAAQ,IAAI/H,QAAQ,CAAG,IAAA,CAAA,EAAE,OAAO,IAAI,CAAA;AAC1C,KAAA;AAEA,IAAA,IAAI,IAAI,CAACtE,IAAI,KAAK,UAAU,EAAE;AAC5B,MAAA,IAAIqM,QAAQ,IAAI/H,QAAQ,CAAChE,UAAU,EAAE,OAAO,IAAI,CAAA;AAClD,KAAA;AAEA,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARE;AAAA,EAAA,MAAA,CASAuQ,oBAAoB,GAApB,SAAA,oBAAA,CAAqBrE,IAAI,EAAEH,QAAQ,EAAE;IACnCG,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBH,QAAQ,GAAG,EAAE,GAAGA,QAAQ,CAAA;IAExB,IAAM/H,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,mDAAA,CAAA,MAAA,CACyBqK,IAAI,EACxD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE;AAC9B,MAAA,IAAIqM,QAAQ,IAAI/H,QAAQ,CAACjE,GAAG,EAAE,OAAO,IAAI,CAAA;AAC3C,KAAA;AAEA,IAAA,IAAI,IAAI,CAACL,IAAI,KAAK,UAAU,EAAE;AAC5B,MAAA,IAAIqM,QAAQ,IAAI/H,QAAQ,CAAChE,UAAU,EAAE,OAAO,IAAI,CAAA;AAClD,KAAA;AAEA,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAkC,QAAQ,GAAR,SAASgK,QAAAA,CAAAA,IAAI,EAAE;IACbA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,uCAAA,CAAA,MAAA,CACaqK,IAAI,EAC5C,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,CAAC,CAAA;IAExC,OAAOsE,QAAQ,CAAC9B,QAAQ,CAAA;AAC1B,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAC,SAAS,GAAT,SAAU+J,SAAAA,CAAAA,IAAI,EAAE;IACdA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,wCAAA,CAAA,MAAA,CACcqK,IAAI,EAC7C,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,CAAC,CAAA;IAExC,OAAOsE,QAAQ,CAAC7B,SAAS,CAAA;AAC3B,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAqO,cAAc,GAAd,SAAetE,cAAAA,CAAAA,IAAI,EAAE;IACnBA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,6CAAA,CAAA,MAAA,CACmBqK,IAAI,EAClD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,CAAC,CAAA;AAExC,IAAA,OAAOsE,QAAQ,CAAC9B,QAAQ,GAAG8B,QAAQ,CAAC7B,SAAS,CAAA;AAC/C,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAC,gBAAgB,GAAhB,SAAiB8J,gBAAAA,CAAAA,IAAI,EAAE;IACrBA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,+CAAA,CAAA,MAAA,CACqBqK,IAAI,EACpD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,UAAU,EAAE,OAAO,CAAC,CAAA;IAEtC,OAAOsE,QAAQ,CAAC5B,gBAAgB,CAAA;AAClC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAqO,aAAa,GAAb,SAAcvE,aAAAA,CAAAA,IAAI,EAAE;IAClBA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,4CAAA,CAAA,MAAA,CACkBqK,IAAI,EACjD,uBAAA,CAAA,CAAA,CAAA;IAEH,IAAIwE,MAAM,GAAG,CAAC,CAAA;AAEd,IAAA,IAAI,IAAI,CAAChR,IAAI,KAAK,UAAU,EAAE;MAC5BgR,MAAM,IAAI1M,QAAQ,CAAC5B,gBAAgB,CAAA;AACrC,KAAA;AAEA,IAAA,IAAI,IAAI,CAAC1C,IAAI,KAAK,YAAY,EAAE;MAC9BgR,MAAM,IAAI1M,QAAQ,CAAC9B,QAAQ,CAAA;AAC7B,KAAA;AAEA,IAAA,OAAOwO,MAAM,CAAA;AACf,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAC,cAAc,GAAd,SAAezE,cAAAA,CAAAA,IAAI,EAAE;IACnBA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,6CAAA,CAAA,MAAA,CACmBqK,IAAI,EAClD,uBAAA,CAAA,CAAA,CAAA;IAEH,IAAIwE,MAAM,GAAG,CAAC,CAAA;AAEd,IAAA,IAAI,IAAI,CAAChR,IAAI,KAAK,UAAU,EAAE;MAC5BgR,MAAM,IAAI1M,QAAQ,CAAC5B,gBAAgB,CAAA;AACrC,KAAA;AAEA,IAAA,IAAI,IAAI,CAAC1C,IAAI,KAAK,YAAY,EAAE;MAC9BgR,MAAM,IAAI1M,QAAQ,CAAC7B,SAAS,CAAA;AAC9B,KAAA;AAEA,IAAA,OAAOuO,MAAM,CAAA;AACf,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAA,MAAM,GAAN,SAAOxE,MAAAA,CAAAA,IAAI,EAAE;IACXA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,qCAAA,CAAA,MAAA,CACWqK,IAAI,EAC1C,uBAAA,CAAA,CAAA,CAAA;IAEH,IAAIwE,MAAM,GAAG,CAAC,CAAA;AAEd,IAAA,IAAI,IAAI,CAAChR,IAAI,KAAK,UAAU,EAAE;MAC5BgR,MAAM,IAAI1M,QAAQ,CAAC5B,gBAAgB,CAAA;AACrC,KAAA;AAEA,IAAA,IAAI,IAAI,CAAC1C,IAAI,KAAK,YAAY,EAAE;AAC9BgR,MAAAA,MAAM,IAAI1M,QAAQ,CAAC9B,QAAQ,GAAG8B,QAAQ,CAAC7B,SAAS,CAAA;AAClD,KAAA;AAEA,IAAA,OAAOuO,MAAM,CAAA;AACf,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAE,wBAAwB,GAAxB,SAAyB1E,wBAAAA,CAAAA,IAAI,EAAE;IAC7BA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,uDAAA,CAAA,MAAA,CAC6BqK,IAAI,EAC5D,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,CAAC,CAAA;AAExC,IAAA,OAAOsE,QAAQ,CAAC9B,QAAQ,GAAG8B,QAAQ,CAAC1B,aAAa,CAAA;AACnD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAuO,yBAAyB,GAAzB,SAA0B3E,yBAAAA,CAAAA,IAAI,EAAE;IAC9BA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,wDAAA,CAAA,MAAA,CAC8BqK,IAAI,EAC7D,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,CAAC,CAAA;AAExC,IAAA,OAAOsE,QAAQ,CAAC7B,SAAS,GAAG6B,QAAQ,CAAC1B,aAAa,CAAA;AACpD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAwO,8BAA8B,GAA9B,SAA+B5E,8BAAAA,CAAAA,IAAI,EAAE;IACnCA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,6DAAA,CAAA,MAAA,CACmCqK,IAAI,EAClE,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,YAAY,EAAE,OAAO,CAAC,CAAA;AAExC,IAAA,OAAOsE,QAAQ,CAAC9B,QAAQ,GAAG8B,QAAQ,CAAC7B,SAAS,GAAG6B,QAAQ,CAAC1B,aAAa,GAAG,CAAC,CAAA;AAC5E,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAyO,gCAAgC,GAAhC,SAAiC7E,gCAAAA,CAAAA,IAAI,EAAE;IACrCA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,+DAAA,CAAA,MAAA,CACqCqK,IAAI,EACpE,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAI,IAAI,CAACxM,IAAI,KAAK,UAAU,EAAE,OAAO,CAAC,CAAA;IAEtC,OAAOsE,QAAQ,CAAC5B,gBAAgB,GAAG4B,QAAQ,CAAC3B,eAAe,GAAG,CAAC,CAAA;AACjE,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQA2O,6BAA6B,GAA7B,SAA8B9E,6BAAAA,CAAAA,IAAI,EAAE;IAClCA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,4DAAA,CAAA,MAAA,CACkCqK,IAAI,EACjE,uBAAA,CAAA,CAAA,CAAA;IAEH,IAAIwE,MAAM,GAAG,CAAC,CAAA;IACd,IAAIO,KAAK,GAAG,CAAC,CAAA;AAEb,IAAA,IAAI,IAAI,CAACvR,IAAI,KAAK,UAAU,EAAE;MAC5BgR,MAAM,IAAI1M,QAAQ,CAAC5B,gBAAgB,CAAA;AACnC6O,MAAAA,KAAK,IAAIjN,QAAQ,CAAC3B,eAAe,GAAG,CAAC,CAAA;AACvC,KAAA;AAEA,IAAA,IAAI,IAAI,CAAC3C,IAAI,KAAK,YAAY,EAAE;MAC9BgR,MAAM,IAAI1M,QAAQ,CAAC9B,QAAQ,CAAA;MAC3B+O,KAAK,IAAIjN,QAAQ,CAAC1B,aAAa,CAAA;AACjC,KAAA;IAEA,OAAOoO,MAAM,GAAGO,KAAK,CAAA;AACvB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAC,8BAA8B,GAA9B,SAA+BhF,8BAAAA,CAAAA,IAAI,EAAE;IACnCA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,6DAAA,CAAA,MAAA,CACmCqK,IAAI,EAClE,uBAAA,CAAA,CAAA,CAAA;IAEH,IAAIwE,MAAM,GAAG,CAAC,CAAA;IACd,IAAIO,KAAK,GAAG,CAAC,CAAA;AAEb,IAAA,IAAI,IAAI,CAACvR,IAAI,KAAK,UAAU,EAAE;MAC5BgR,MAAM,IAAI1M,QAAQ,CAAC5B,gBAAgB,CAAA;AACnC6O,MAAAA,KAAK,IAAIjN,QAAQ,CAAC3B,eAAe,GAAG,CAAC,CAAA;AACvC,KAAA;AAEA,IAAA,IAAI,IAAI,CAAC3C,IAAI,KAAK,YAAY,EAAE;MAC9BgR,MAAM,IAAI1M,QAAQ,CAAC7B,SAAS,CAAA;MAC5B8O,KAAK,IAAIjN,QAAQ,CAAC1B,aAAa,CAAA;AACjC,KAAA;IAEA,OAAOoO,MAAM,GAAGO,KAAK,CAAA;AACvB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAE,sBAAsB,GAAtB,SAAuBjF,sBAAAA,CAAAA,IAAI,EAAE;IAC3BA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,qDAAA,CAAA,MAAA,CAC2BqK,IAAI,EAC1D,uBAAA,CAAA,CAAA,CAAA;IAEH,IAAIwE,MAAM,GAAG,CAAC,CAAA;IACd,IAAIO,KAAK,GAAG,CAAC,CAAA;AAEb,IAAA,IAAI,IAAI,CAACvR,IAAI,KAAK,UAAU,EAAE;MAC5BgR,MAAM,IAAI1M,QAAQ,CAAC5B,gBAAgB,CAAA;AACnC6O,MAAAA,KAAK,IAAIjN,QAAQ,CAAC3B,eAAe,GAAG,CAAC,CAAA;AACvC,KAAA;AAEA,IAAA,IAAI,IAAI,CAAC3C,IAAI,KAAK,YAAY,EAAE;AAC9BgR,MAAAA,MAAM,IAAI1M,QAAQ,CAAC9B,QAAQ,GAAG8B,QAAQ,CAAC7B,SAAS,CAAA;AAChD8O,MAAAA,KAAK,IAAIjN,QAAQ,CAAC1B,aAAa,GAAG,CAAC,CAAA;AACrC,KAAA;IAEA,OAAOoO,MAAM,GAAGO,KAAK,CAAA;AACvB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAxR,MAAM,GAAN,SAAOK,MAAAA,CAAAA,IAAI,EAAE;IACXA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMyE,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;IAElC,IAAI,CAACyE,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CAAA,qCAAA,CAAA,MAAA,CACW/B,IAAI,EAC1C,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,OAAOyE,IAAI,CAAC9E,MAAM,CAACuC,GAAG,CAAA;AACxB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAjD,MAAM,GAAN,SAAOe,MAAAA,CAAAA,IAAI,EAAE;IACXA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMyE,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;IAElC,IAAI,CAACyE,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CAAA,qCAAA,CAAA,MAAA,CACW/B,IAAI,EAC1C,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,OAAOyE,IAAI,CAACxF,MAAM,CAACiD,GAAG,CAAA;AACxB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAoP,WAAW,GAAX,SAAYtR,WAAAA,CAAAA,IAAI,EAAE;IAChBA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMmE,QAAQ,GAAG,IAAI,CAACG,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;IAEtC,IAAI,CAACmE,QAAQ,EACX,MAAM,IAAIpC,kBAAkB,CAAA,0CAAA,CAAA,MAAA,CACgB/B,IAAI,EAC/C,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,OAAO,CAACmE,QAAQ,CAACxE,MAAM,CAACuC,GAAG,EAAEiC,QAAQ,CAAClF,MAAM,CAACiD,GAAG,CAAC,CAAA;AACnD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MATE;AAAA,EAAA,MAAA,CAUAqP,QAAQ,GAAR,SAAA,QAAA,CAASnF,IAAI,EAAEpM,IAAI,EAAE;IACnBoM,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBpM,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMyE,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;IAElC,IAAI,CAACyE,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CAAA,uCAAA,CAAA,MAAA,CACa/B,IAAI,EAC5C,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAML,MAAM,GAAG8E,IAAI,CAAC9E,MAAM,CAACuC,GAAG,CAAA;AAC9B,IAAA,IAAMjD,MAAM,GAAGwF,IAAI,CAACxF,MAAM,CAACiD,GAAG,CAAA;AAE9B,IAAA,IAAIkK,IAAI,KAAKzM,MAAM,EAAE,OAAOV,MAAM,CAAA;AAClC,IAAA,IAAImN,IAAI,KAAKnN,MAAM,EAAE,OAAOU,MAAM,CAAA;IAElC,MAAM,IAAIoC,kBAAkB,CAAA,wBAAA,CAAA,MAAA,CACFqK,IAAI,EAAA,mCAAA,CAAA,CAAA,MAAA,CAAkCpM,IAAI,EAAWL,WAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAKV,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAC/F,IAAA,CAAA,CAAA,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARE;AAAA,EAAA,MAAA,CASAuS,YAAY,GAAZ,SAAA,YAAA,CAAaxR,IAAI,EAAEoM,IAAI,EAAE;IACvBpM,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAChBoM,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAM3H,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;IAElC,IAAI,CAACyE,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CAAA,2CAAA,CAAA,MAAA,CACiB/B,IAAI,EAChD,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,OAAOyE,IAAI,CAAC9E,MAAM,CAACuC,GAAG,KAAKkK,IAAI,IAAI3H,IAAI,CAACxF,MAAM,CAACiD,GAAG,KAAKkK,IAAI,CAAA;AAC7D,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAqF,YAAY,GAAZ,SAAazR,YAAAA,CAAAA,IAAI,EAAE;IACjBA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMyE,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;IAElC,IAAI,CAACyE,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CAAA,2CAAA,CAAA,MAAA,CACiB/B,IAAI,EAChD,uBAAA,CAAA,CAAA,CAAA;IAEH,OAAOyE,IAAI,CAACvE,UAAU,CAAA;AACxB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAwR,UAAU,GAAV,SAAW1R,UAAAA,CAAAA,IAAI,EAAE;IACfA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMyE,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;IAElC,IAAI,CAACyE,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CAAA,yCAAA,CAAA,MAAA,CACe/B,IAAI,EAC9C,uBAAA,CAAA,CAAA,CAAA;IAEH,OAAO,CAACyE,IAAI,CAACvE,UAAU,CAAA;AACzB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAqO,UAAU,GAAV,SAAWvO,UAAAA,CAAAA,IAAI,EAAE;IACfA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMyE,IAAI,GAAG,IAAI,CAACH,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;IAElC,IAAI,CAACyE,IAAI,EACP,MAAM,IAAI1C,kBAAkB,CAAA,yCAAA,CAAA,MAAA,CACe/B,IAAI,EAC9C,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,OAAOyE,IAAI,CAAC9E,MAAM,KAAK8E,IAAI,CAACxF,MAAM,CAAA;AACpC,GAAA;;AAEA;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MATE;AAAA,EAAA,MAAA,CAUA+O,OAAO,GAAP,SAAA,OAAA,CAAQ5B,IAAI,EAAEnL,UAAU,EAAE;IACxB,IAAMiD,QAAQ,GAAG8J,QAAO,CAAC,IAAI,EAAE5B,IAAI,EAAEnL,UAAU,CAAC,CAAA;IAEhD,OAAOiD,QAAQ,CAAChC,GAAG,CAAA;AACrB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA,MANE;AAAA,EAAA,MAAA,CAOAyP,SAAS,GAAT,SAAA,SAAA,CAAUvF,IAAI,EAAEnL,UAAU,EAAE;AAC1B,IAAA,IAAIA,UAAU,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC,EAC1C,MAAM,IAAIU,0BAA0B,CAAA,qEAAA,CAAA,MAAA,CACmCV,UAAU,EAChF,IAAA,CAAA,CAAA,CAAA;;AAEH;IACAmL,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;AAChBnL,IAAAA,UAAU,GAAGA,UAAU,IAAI,EAAE,CAAA;;AAE7B;IACA,IAAIwD,IAAI,GAAG,IAAI,CAAC3E,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;AAEhC,IAAA,IAAI3H,IAAI,EAAE;AACR,MAAA,IAAIxD,UAAU,EAAE;AACd1B,QAAAA,MAAM,CAACkF,IAAI,CAACxD,UAAU,EAAEA,UAAU,CAAC,CAAA;AAEnC,QAAA,IAAI,CAAC6D,IAAI,CAAC,uBAAuB,EAAE;AACjClF,UAAAA,IAAI,EAAE,OAAO;AACbsC,UAAAA,GAAG,EAAEkK,IAAI;UACTnL,UAAU,EAAEwD,IAAI,CAACxD,UAAU;AAC3BwD,UAAAA,IAAI,EAAExD,UAAAA;AACR,SAAC,CAAC,CAAA;AACJ,OAAA;AACA,MAAA,OAAO,CAACmL,IAAI,EAAE,KAAK,CAAC,CAAA;AACtB,KAAA;IAEA3H,IAAI,GAAG,IAAI,IAAI,CAACwJ,aAAa,CAAC7B,IAAI,EAAEnL,UAAU,CAAC,CAAA;;AAE/C;IACA,IAAI,CAACnB,MAAM,CAAC2L,GAAG,CAACW,IAAI,EAAE3H,IAAI,CAAC,CAAA;;AAE3B;AACA,IAAA,IAAI,CAACK,IAAI,CAAC,WAAW,EAAE;AACrB5C,MAAAA,GAAG,EAAEkK,IAAI;AACTnL,MAAAA,UAAU,EAAVA,UAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,CAACmL,IAAI,EAAE,IAAI,CAAC,CAAA;AACrB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAwF,UAAU,GAAV,SAAA,UAAA,CAAWxF,IAAI,EAAEpH,OAAO,EAAE;AACxB,IAAA,IAAIA,OAAO,IAAI,OAAOA,OAAO,KAAK,UAAU,EAC1C,MAAM,IAAIrD,0BAA0B,CAC2CqD,6EAAAA,CAAAA,MAAAA,CAAAA,OAAO,EACrF,IAAA,CAAA,CAAA,CAAA;;AAEH;IACAoH,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;;AAEhB;IACA,IAAI3H,IAAI,GAAG,IAAI,CAAC3E,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;AAEhC,IAAA,IAAI3H,IAAI,EAAE;AACR,MAAA,IAAIO,OAAO,EAAE;AACX,QAAA,IAAMgK,aAAa,GAAGvK,IAAI,CAACxD,UAAU,CAAA;AACrCwD,QAAAA,IAAI,CAACxD,UAAU,GAAG+D,OAAO,CAACgK,aAAa,CAAC,CAAA;AAExC,QAAA,IAAI,CAAClK,IAAI,CAAC,uBAAuB,EAAE;AACjClF,UAAAA,IAAI,EAAE,SAAS;AACfsC,UAAAA,GAAG,EAAEkK,IAAI;UACTnL,UAAU,EAAEwD,IAAI,CAACxD,UAAAA;AACnB,SAAC,CAAC,CAAA;AACJ,OAAA;AACA,MAAA,OAAO,CAACmL,IAAI,EAAE,KAAK,CAAC,CAAA;AACtB,KAAA;IAEA,IAAMnL,UAAU,GAAG+D,OAAO,GAAGA,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,CAAA;IAE7CP,IAAI,GAAG,IAAI,IAAI,CAACwJ,aAAa,CAAC7B,IAAI,EAAEnL,UAAU,CAAC,CAAA;;AAE/C;IACA,IAAI,CAACnB,MAAM,CAAC2L,GAAG,CAACW,IAAI,EAAE3H,IAAI,CAAC,CAAA;;AAE3B;AACA,IAAA,IAAI,CAACK,IAAI,CAAC,WAAW,EAAE;AACrB5C,MAAAA,GAAG,EAAEkK,IAAI;AACTnL,MAAAA,UAAU,EAAVA,UAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,CAACmL,IAAI,EAAE,IAAI,CAAC,CAAA;AACrB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAyF,QAAQ,GAAR,SAASzF,QAAAA,CAAAA,IAAI,EAAE;IACbA,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;IAEhB,IAAMlI,QAAQ,GAAG,IAAI,CAACpE,MAAM,CAACC,GAAG,CAACqM,IAAI,CAAC,CAAA;IAEtC,IAAI,CAAClI,QAAQ,EACX,MAAM,IAAInC,kBAAkB,CAAA,uCAAA,CAAA,MAAA,CACaqK,IAAI,EAC5C,uBAAA,CAAA,CAAA,CAAA;AAEH,IAAA,IAAIjI,QAAQ,CAAA;;AAEZ;AACA;AACA,IAAA,IAAI,IAAI,CAACvE,IAAI,KAAK,YAAY,EAAE;AAC9B,MAAA,KAAK,IAAMqM,QAAQ,IAAI/H,QAAQ,CAACjE,GAAG,EAAE;AACnCkE,QAAAA,QAAQ,GAAGD,QAAQ,CAACjE,GAAG,CAACgM,QAAQ,CAAC,CAAA;QAEjC,GAAG;AACDkD,UAAAA,gBAAgB,CAAC,IAAI,EAAEhL,QAAQ,CAAC,CAAA;UAChCA,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;AAC1B,SAAC,QAAQgB,QAAQ,EAAA;AACnB,OAAA;AAEA,MAAA,KAAK,IAAM8H,SAAQ,IAAI/H,QAAQ,MAAG,EAAE;AAClCC,QAAAA,QAAQ,GAAGD,QAAQ,CAAG,IAAA,CAAA,CAAC+H,SAAQ,CAAC,CAAA;QAEhC,GAAG;AACDkD,UAAAA,gBAAgB,CAAC,IAAI,EAAEhL,QAAQ,CAAC,CAAA;UAChCA,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;AAC1B,SAAC,QAAQgB,QAAQ,EAAA;AACnB,OAAA;AACF,KAAA;AAEA,IAAA,IAAI,IAAI,CAACvE,IAAI,KAAK,UAAU,EAAE;AAC5B,MAAA,KAAK,IAAMqM,UAAQ,IAAI/H,QAAQ,CAAChE,UAAU,EAAE;AAC1CiE,QAAAA,QAAQ,GAAGD,QAAQ,CAAChE,UAAU,CAAC+L,UAAQ,CAAC,CAAA;QAExC,GAAG;AACDkD,UAAAA,gBAAgB,CAAC,IAAI,EAAEhL,QAAQ,CAAC,CAAA;UAChCA,QAAQ,GAAGA,QAAQ,CAAChB,IAAI,CAAA;AAC1B,SAAC,QAAQgB,QAAQ,EAAA;AACnB,OAAA;AACF,KAAA;;AAEA;AACA,IAAA,IAAI,CAACrE,MAAM,CAAO,QAAA,CAAA,CAACsM,IAAI,CAAC,CAAA;;AAExB;AACA,IAAA,IAAI,CAACtH,IAAI,CAAC,aAAa,EAAE;AACvB5C,MAAAA,GAAG,EAAEkK,IAAI;MACTnL,UAAU,EAAEiD,QAAQ,CAACjD,UAAAA;AACvB,KAAC,CAAC,CAAA;AACJ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAbE;AAAA,EAAA,MAAA,CAcA6Q,QAAQ,GAAR,SAAS9R,QAAAA,CAAAA,IAAI,EAAE;AACb,IAAA,IAAImE,QAAQ,CAAA;AAEZ,IAAA,IAAIjF,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;AACxB,MAAA,IAAMM,MAAM,GAAG,EAAE,GAAGT,SAAS,CAAC,CAAC,CAAC,CAAA;AAChC,MAAA,IAAMD,MAAM,GAAG,EAAE,GAAGC,SAAS,CAAC,CAAC,CAAC,CAAA;AAEhCiF,MAAAA,QAAQ,GAAG1E,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAE,IAAI,CAACW,IAAI,CAAC,CAAA;MAE3D,IAAI,CAACuE,QAAQ,EACX,MAAM,IAAIpC,kBAAkB,CACapC,uCAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAASV,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAC7D,uBAAA,CAAA,CAAA,CAAA;AACL,KAAC,MAAM;MACLe,IAAI,GAAG,EAAE,GAAGA,IAAI,CAAA;MAEhBmE,QAAQ,GAAG,IAAI,CAACG,MAAM,CAACvE,GAAG,CAACC,IAAI,CAAC,CAAA;MAEhC,IAAI,CAACmE,QAAQ,EACX,MAAM,IAAIpC,kBAAkB,CAAA,uCAAA,CAAA,MAAA,CACa/B,IAAI,EAC5C,uBAAA,CAAA,CAAA,CAAA;AACL,KAAA;AAEAmP,IAAAA,gBAAgB,CAAC,IAAI,EAAEhL,QAAQ,CAAC,CAAA;AAEhC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MATE;AAAA,EAAA,MAAA,CAUA4N,gBAAgB,GAAhB,SAAA,gBAAA,CAAiBpS,MAAM,EAAEV,MAAM,EAAE;IAC/B,IAAIC,SAAS,CAACG,MAAM,GAAG,CAAC,EACtB,MAAM,IAAI2C,eAAe,CACvB,+KAA+K,CAChL,CAAA;IAEH,IAAI,IAAI,CAAC4D,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACvB,oLAAoL,CACrL,CAAA;IAEHrC,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;IACpBV,MAAM,GAAG,EAAE,GAAGA,MAAM,CAAA;IAEpB,IAAMkF,QAAQ,GAAG1E,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAE,UAAU,CAAC,CAAA;IAElE,IAAI,CAACkF,QAAQ,EACX,MAAM,IAAIpC,kBAAkB,CACmBpC,6CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAASV,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACnE,uBAAA,CAAA,CAAA,CAAA;AAEHkQ,IAAAA,gBAAgB,CAAC,IAAI,EAAEhL,QAAQ,CAAC,CAAA;AAEhC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MATE;AAAA,EAAA,MAAA,CAUA6N,kBAAkB,GAAlB,SAAA,kBAAA,CAAmBrS,MAAM,EAAEV,MAAM,EAAE;IACjC,IAAIC,SAAS,CAACG,MAAM,GAAG,CAAC,EACtB,MAAM,IAAI2C,eAAe,CACvB,yKAAyK,CAC1K,CAAA;IAEH,IAAI,IAAI,CAAC4D,KAAK,EACZ,MAAM,IAAI5D,eAAe,CACvB,sLAAsL,CACvL,CAAA;IAEH,IAAMmC,QAAQ,GAAG1E,eAAe,CAAC,IAAI,EAAEE,MAAM,EAAEV,MAAM,EAAE,YAAY,CAAC,CAAA;IAEpE,IAAI,CAACkF,QAAQ,EACX,MAAM,IAAIpC,kBAAkB,CACqBpC,+CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAASV,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,EACrE,uBAAA,CAAA,CAAA,CAAA;AAEHkQ,IAAAA,gBAAgB,CAAC,IAAI,EAAEhL,QAAQ,CAAC,CAAA;AAEhC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;EAAA,MAKAhC,CAAAA,KAAK,GAAL,SAAQ,KAAA,GAAA;AACN;AACA,IAAA,IAAI,CAACmC,MAAM,CAACnC,KAAK,EAAE,CAAA;;AAEnB;AACA,IAAA,IAAI,CAACrC,MAAM,CAACqC,KAAK,EAAE,CAAA;;AAEnB;IACA,IAAI,CAACyN,sBAAsB,EAAE,CAAA;;AAE7B;AACA,IAAA,IAAI,CAAC9K,IAAI,CAAC,SAAS,CAAC,CAAA;AACtB,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;EAAA,MAKAmN,CAAAA,UAAU,GAAV,SAAa,UAAA,GAAA;AACX;AACA,IAAA,IAAM9J,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;AAErC,IAAA,IAAIC,IAAI,CAAA;AAER,IAAA,OAASA,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;AACrDkB,MAAAA,IAAI,CAACjI,KAAK,CAAC+B,KAAK,EAAE,CAAA;AACpB,KAAA;;AAEA;AACA,IAAA,IAAI,CAACmC,MAAM,CAACnC,KAAK,EAAE,CAAA;;AAEnB;IACA,IAAI,CAACyN,sBAAsB,EAAE,CAAA;;AAE7B;AACA,IAAA,IAAI,CAAC9K,IAAI,CAAC,cAAc,CAAC,CAAA;AAC3B,GAAA;;AAEA;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA,MALE;AAAA,EAAA,MAAA,CAMAoN,YAAY,GAAZ,SAAa1R,YAAAA,CAAAA,IAAI,EAAE;AACjB,IAAA,OAAO,IAAI,CAAC2R,WAAW,CAAC3R,IAAI,CAAC,CAAA;AAC/B,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;EAAA,MAKA4R,CAAAA,aAAa,GAAb,SAAgB,aAAA,GAAA;IACd,OAAO,IAAI,CAACD,WAAW,CAAA;AACzB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA,MALE;AAAA,EAAA,MAAA,CAMAE,YAAY,GAAZ,SAAa7R,YAAAA,CAAAA,IAAI,EAAE;AACjB,IAAA,OAAO,IAAI,CAAC2R,WAAW,CAACvN,cAAc,CAACpE,IAAI,CAAC,CAAA;AAC9C,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA,MANE;AAAA,EAAA,MAAA,CAOA8R,YAAY,GAAZ,SAAA,YAAA,CAAa9R,IAAI,EAAEJ,KAAK,EAAE;AACxB,IAAA,IAAI,CAAC+R,WAAW,CAAC3R,IAAI,CAAC,GAAGJ,KAAK,CAAA;;AAE9B;AACA,IAAA,IAAI,CAAC0E,IAAI,CAAC,mBAAmB,EAAE;AAC7BlF,MAAAA,IAAI,EAAE,KAAK;MACXqB,UAAU,EAAE,IAAI,CAACkR,WAAW;AAC5B3R,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA,MANE;AAAA,EAAA,MAAA,CAOA+R,eAAe,GAAf,SAAA,eAAA,CAAgB/R,IAAI,EAAEwE,OAAO,EAAE;IAC7B,IAAI,OAAOA,OAAO,KAAK,UAAU,EAC/B,MAAM,IAAIrD,0BAA0B,CAClC,sDAAsD,CACvD,CAAA;AAEH,IAAA,IAAMvB,KAAK,GAAG,IAAI,CAAC+R,WAAW,CAAC3R,IAAI,CAAC,CAAA;IAEpC,IAAI,CAAC2R,WAAW,CAAC3R,IAAI,CAAC,GAAGwE,OAAO,CAAC5E,KAAK,CAAC,CAAA;;AAEvC;AACA,IAAA,IAAI,CAAC0E,IAAI,CAAC,mBAAmB,EAAE;AAC7BlF,MAAAA,IAAI,EAAE,KAAK;MACXqB,UAAU,EAAE,IAAI,CAACkR,WAAW;AAC5B3R,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA,MALE;AAAA,EAAA,MAAA,CAMAgS,eAAe,GAAf,SAAgBhS,eAAAA,CAAAA,IAAI,EAAE;AACpB,IAAA,OAAO,IAAI,CAAC2R,WAAW,CAAC3R,IAAI,CAAC,CAAA;;AAE7B;AACA,IAAA,IAAI,CAACsE,IAAI,CAAC,mBAAmB,EAAE;AAC7BlF,MAAAA,IAAI,EAAE,QAAQ;MACdqB,UAAU,EAAE,IAAI,CAACkR,WAAW;AAC5B3R,MAAAA,IAAI,EAAJA,IAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAiS,iBAAiB,GAAjB,SAAkBxR,iBAAAA,CAAAA,UAAU,EAAE;IAC5B,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC,EAC5B,MAAM,IAAIU,0BAA0B,CAClC,sEAAsE,CACvE,CAAA;IAEH,IAAI,CAACwQ,WAAW,GAAGlR,UAAU,CAAA;;AAE7B;AACA,IAAA,IAAI,CAAC6D,IAAI,CAAC,mBAAmB,EAAE;AAC7BlF,MAAAA,IAAI,EAAE,SAAS;MACfqB,UAAU,EAAE,IAAI,CAACkR,WAAAA;AACnB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQAO,eAAe,GAAf,SAAgBzR,eAAAA,CAAAA,UAAU,EAAE;IAC1B,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC,EAC5B,MAAM,IAAIU,0BAA0B,CAClC,oEAAoE,CACrE,CAAA;AAEHpC,IAAAA,MAAM,CAAC,IAAI,CAAC4S,WAAW,EAAElR,UAAU,CAAC,CAAA;;AAEpC;AACA,IAAA,IAAI,CAAC6D,IAAI,CAAC,mBAAmB,EAAE;AAC7BlF,MAAAA,IAAI,EAAE,OAAO;MACbqB,UAAU,EAAE,IAAI,CAACkR,WAAW;AAC5B1N,MAAAA,IAAI,EAAExD,UAAAA;AACR,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAPE;AAAA,EAAA,MAAA,CAQA0R,gBAAgB,GAAhB,SAAiB3N,gBAAAA,CAAAA,OAAO,EAAE;IACxB,IAAI,OAAOA,OAAO,KAAK,UAAU,EAC/B,MAAM,IAAIrD,0BAA0B,CAClC,6DAA6D,CAC9D,CAAA;IAEH,IAAI,CAACwQ,WAAW,GAAGnN,OAAO,CAAC,IAAI,CAACmN,WAAW,CAAC,CAAA;;AAE5C;AACA,IAAA,IAAI,CAACrN,IAAI,CAAC,mBAAmB,EAAE;AAC7BlF,MAAAA,IAAI,EAAE,QAAQ;MACdqB,UAAU,EAAE,IAAI,CAACkR,WAAAA;AACnB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA,MALE;AAAA,EAAA,MAAA,CAMAS,wBAAwB,GAAxB,SAAA,wBAAA,CAAyB5N,OAAO,EAAEhE,KAAK,EAAE;IACvC,IAAI,OAAOgE,OAAO,KAAK,UAAU,EAC/B,MAAM,IAAIrD,0BAA0B,CAClC,gEAAgE,CACjE,CAAA;AAEH,IAAA,IAAIX,KAAK,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,EAChC,MAAM,IAAIW,0BAA0B,CAClC,wHAAwH,CACzH,CAAA;AAEH,IAAA,IAAMwG,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAEnE,QAAQ,CAAA;AAElB,IAAA,OAASmE,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDjD,QAAQ,GAAGmE,IAAI,CAACjI,KAAK,CAAA;AACrB8D,MAAAA,QAAQ,CAACjD,UAAU,GAAG+D,OAAO,CAACd,QAAQ,CAAChC,GAAG,EAAEgC,QAAQ,CAACjD,UAAU,CAAC,CAAA;AAClE,KAAA;AAEA,IAAA,IAAI,CAAC6D,IAAI,CAAC,2BAA2B,EAAE;AACrC9D,MAAAA,KAAK,EAAEA,KAAK,GAAGA,KAAK,GAAG,IAAA;AACzB,KAAC,CAAC,CAAA;AACJ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA,MALE;AAAA,EAAA,MAAA,CAMA6R,wBAAwB,GAAxB,SAAA,wBAAA,CAAyB7N,OAAO,EAAEhE,KAAK,EAAE;IACvC,IAAI,OAAOgE,OAAO,KAAK,UAAU,EAC/B,MAAM,IAAIrD,0BAA0B,CAClC,gEAAgE,CACjE,CAAA;AAEH,IAAA,IAAIX,KAAK,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,EAChC,MAAM,IAAIW,0BAA0B,CAClC,wHAAwH,CACzH,CAAA;AAEH,IAAA,IAAMwG,QAAQ,GAAG,IAAI,CAAC7D,MAAM,CAAC8D,MAAM,EAAE,CAAA;AAErC,IAAA,IAAIC,IAAI,EAAElE,QAAQ,EAAEtE,UAAU,EAAE0H,UAAU,CAAA;AAE1C,IAAA,OAASc,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDhD,QAAQ,GAAGkE,IAAI,CAACjI,KAAK,CAAA;MACrBP,UAAU,GAAGsE,QAAQ,CAACxE,MAAM,CAAA;MAC5B4H,UAAU,GAAGpD,QAAQ,CAAClF,MAAM,CAAA;AAE5BkF,MAAAA,QAAQ,CAAClD,UAAU,GAAG+D,OAAO,CAC3Bb,QAAQ,CAACjC,GAAG,EACZiC,QAAQ,CAAClD,UAAU,EACnBpB,UAAU,CAACqC,GAAG,EACdqF,UAAU,CAACrF,GAAG,EACdrC,UAAU,CAACoB,UAAU,EACrBsG,UAAU,CAACtG,UAAU,EACrBkD,QAAQ,CAACjE,UAAU,CACpB,CAAA;AACH,KAAA;AAEA,IAAA,IAAI,CAAC4E,IAAI,CAAC,2BAA2B,EAAE;AACrC9D,MAAAA,KAAK,EAAEA,KAAK,GAAGA,KAAK,GAAG,IAAA;AACzB,KAAC,CAAC,CAAA;AACJ,GAAA;;AAEA;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAKA8R,qBAAqB,GAArB,SAAsBlM,qBAAAA,CAAAA,QAAQ,EAAE;IAC9B,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,oDAAoD,CACrD,CAAA;IAEHmL,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAElG,QAAQ,CAAC,CAAA;GACtD,CAAA;AAAA,EAAA,MAAA,CACDmM,gCAAgC,GAAhC,SAAiCnM,gCAAAA,CAAAA,QAAQ,EAAE;IACzC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,+DAA+D,CAChE,CAAA;IAEHmL,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAElG,QAAQ,CAAC,CAAA;AACtD,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAKAoM,+BAA+B,GAA/B,SAAgCpM,+BAAAA,CAAAA,QAAQ,EAAE;IACxC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,8DAA8D,CAC/D,CAAA;IAEHmL,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAElG,QAAQ,CAAC,CAAA;GACrD,CAAA;AAAA,EAAA,MAAA,CACDqM,0CAA0C,GAA1C,SAA2CrM,0CAAAA,CAAAA,QAAQ,EAAE;IACnD,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,yEAAyE,CAC1E,CAAA;IAEHmL,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAElG,QAAQ,CAAC,CAAA;AACrD,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;EAAA,MAKAsM,CAAAA,KAAK,GAAL,SAAQ,KAAA,GAAA;AACN,IAAA,IAAI,OAAOhS,KAAK,CAAC2G,IAAI,KAAK,UAAU,EAAE,OAAO3G,KAAK,CAAC2G,IAAI,CAAC,IAAI,CAAC/H,MAAM,CAACmH,IAAI,EAAE,CAAC,CAAA;AAE3E,IAAA,OAAOa,wBAAI,CAAC,IAAI,CAAChI,MAAM,CAACmH,IAAI,EAAE,EAAE,IAAI,CAACnH,MAAM,CAAC8H,IAAI,CAAC,CAAA;AACnD,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAKAuL,WAAW,GAAX,SAAYvM,WAAAA,CAAAA,QAAQ,EAAE;IACpB,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,0CAA0C,CAC3C,CAAA;AAEH,IAAA,IAAMwG,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAEnE,QAAQ,CAAA;AAElB,IAAA,OAASmE,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDjD,QAAQ,GAAGmE,IAAI,CAACjI,KAAK,CAAA;MACrBwG,QAAQ,CAAC1C,QAAQ,CAAChC,GAAG,EAAEgC,QAAQ,CAACjD,UAAU,CAAC,CAAA;AAC7C,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA,MALE;AAAA,EAAA,MAAA,CAMAmS,QAAQ,GAAR,SAASxM,QAAAA,CAAAA,QAAQ,EAAE;IACjB,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,uCAAuC,CACxC,CAAA;AAEH,IAAA,IAAMwG,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAEnE,QAAQ,CAAA;AAElB,IAAA,OAASmE,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDjD,QAAQ,GAAGmE,IAAI,CAACjI,KAAK,CAAA;AAErB,MAAA,IAAIwG,QAAQ,CAAC1C,QAAQ,CAAChC,GAAG,EAAEgC,QAAQ,CAACjD,UAAU,CAAC,EAAE,OAAOiD,QAAQ,CAAChC,GAAG,CAAA;AACtE,KAAA;AAEA,IAAA,OAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAKAmR,QAAQ,GAAR,SAASzM,QAAAA,CAAAA,QAAQ,EAAE;IACjB,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,sCAAsC,CACvC,CAAA;AAEH,IAAA,IAAMwG,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAEnE,QAAQ,CAAA;IAElB,IAAM8F,MAAM,GAAG,IAAI9I,KAAK,CAAC,IAAI,CAACoS,KAAK,CAAC,CAAA;IACpC,IAAInU,CAAC,GAAG,CAAC,CAAA;AAET,IAAA,OAASkJ,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDjD,QAAQ,GAAGmE,IAAI,CAACjI,KAAK,CAAA;AACrB4J,MAAAA,MAAM,CAAC7K,CAAC,EAAE,CAAC,GAAGyH,QAAQ,CAAC1C,QAAQ,CAAChC,GAAG,EAAEgC,QAAQ,CAACjD,UAAU,CAAC,CAAA;AAC3D,KAAA;AAEA,IAAA,OAAO+I,MAAM,CAAA;AACf,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAKAuJ,QAAQ,GAAR,SAAS3M,QAAAA,CAAAA,QAAQ,EAAE;IACjB,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,uCAAuC,CACxC,CAAA;AAEH,IAAA,IAAMwG,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAEnE,QAAQ,CAAA;AAElB,IAAA,OAASmE,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDjD,QAAQ,GAAGmE,IAAI,CAACjI,KAAK,CAAA;AAErB,MAAA,IAAIwG,QAAQ,CAAC1C,QAAQ,CAAChC,GAAG,EAAEgC,QAAQ,CAACjD,UAAU,CAAC,EAAE,OAAO,IAAI,CAAA;AAC9D,KAAA;AAEA,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAKAuS,SAAS,GAAT,SAAU5M,SAAAA,CAAAA,QAAQ,EAAE;IAClB,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,wCAAwC,CACzC,CAAA;AAEH,IAAA,IAAMwG,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAEnE,QAAQ,CAAA;AAElB,IAAA,OAASmE,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDjD,QAAQ,GAAGmE,IAAI,CAACjI,KAAK,CAAA;AAErB,MAAA,IAAI,CAACwG,QAAQ,CAAC1C,QAAQ,CAAChC,GAAG,EAAEgC,QAAQ,CAACjD,UAAU,CAAC,EAAE,OAAO,KAAK,CAAA;AAChE,KAAA;AAEA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAKAwS,WAAW,GAAX,SAAY7M,WAAAA,CAAAA,QAAQ,EAAE;IACpB,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,0CAA0C,CAC3C,CAAA;AAEH,IAAA,IAAMwG,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAEnE,QAAQ,CAAA;IAElB,IAAM8F,MAAM,GAAG,EAAE,CAAA;AAEjB,IAAA,OAAS3B,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDjD,QAAQ,GAAGmE,IAAI,CAACjI,KAAK,CAAA;AAErB,MAAA,IAAIwG,QAAQ,CAAC1C,QAAQ,CAAChC,GAAG,EAAEgC,QAAQ,CAACjD,UAAU,CAAC,EAC7C+I,MAAM,CAACjB,IAAI,CAAC7E,QAAQ,CAAChC,GAAG,CAAC,CAAA;AAC7B,KAAA;AAEA,IAAA,OAAO8H,MAAM,CAAA;AACf,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAKA0J,WAAW,GAAX,SAAA,WAAA,CAAY9M,QAAQ,EAAE+D,YAAY,EAAE;IAClC,IAAI,OAAO/D,QAAQ,KAAK,UAAU,EAChC,MAAM,IAAIjF,0BAA0B,CAClC,0CAA0C,CAC3C,CAAA;IAEH,IAAIzC,SAAS,CAACG,MAAM,GAAG,CAAC,EACtB,MAAM,IAAIsC,0BAA0B,CAClC,mNAAmN,CACpN,CAAA;IAEH,IAAIiJ,WAAW,GAAGD,YAAY,CAAA;AAE9B,IAAA,IAAMxC,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAEnE,QAAQ,CAAA;AAElB,IAAA,OAASmE,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDjD,QAAQ,GAAGmE,IAAI,CAACjI,KAAK,CAAA;AACrBwK,MAAAA,WAAW,GAAGhE,QAAQ,CAACgE,WAAW,EAAE1G,QAAQ,CAAChC,GAAG,EAAEgC,QAAQ,CAACjD,UAAU,CAAC,CAAA;AACxE,KAAA;AAEA,IAAA,OAAO2J,WAAW,CAAA;AACpB,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;EAAA,MAKA+I,CAAAA,WAAW,GAAX,SAAc,WAAA,GAAA;AACZ,IAAA,IAAMxL,QAAQ,GAAG,IAAI,CAACrI,MAAM,CAACsI,MAAM,EAAE,CAAA;IAErC,OAAO,IAAIlB,4BAAQ,CAAC,YAAM;AACxB,MAAA,IAAMmB,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,CAAA;AAE5B,MAAA,IAAIkF,IAAI,CAAClB,IAAI,EAAE,OAAOkB,IAAI,CAAA;AAE1B,MAAA,IAAM5D,IAAI,GAAG4D,IAAI,CAACjI,KAAK,CAAA;MAEvB,OAAO;AACLA,QAAAA,KAAK,EAAE;UAACgM,IAAI,EAAE3H,IAAI,CAACvC,GAAG;UAAEjB,UAAU,EAAEwD,IAAI,CAACxD,UAAAA;SAAW;AACpDkG,QAAAA,IAAI,EAAE,KAAA;OACP,CAAA;AACH,KAAC,CAAC,CAAA;AACJ,GAAA;;AAEA;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA,MAJE;AAAA,EAAA,MAAA,CAAA,QAAA,CAAA,GAKA,SAAS,OAAA,GAAA;AAAA,IAAA,IAAA,MAAA,GAAA,IAAA,CAAA;IACP,IAAM+L,KAAK,GAAG,IAAIhS,KAAK,CAAC,IAAI,CAACpB,MAAM,CAAC8H,IAAI,CAAC,CAAA;IAEzC,IAAIzI,CAAC,GAAG,CAAC,CAAA;IAET,IAAI,CAACW,MAAM,CAAC4F,OAAO,CAAC,UAACjB,IAAI,EAAEvC,GAAG,EAAK;MACjCgR,KAAK,CAAC/T,CAAC,EAAE,CAAC,GAAG+N,aAAa,CAAChL,GAAG,EAAEuC,IAAI,CAAC,CAAA;AACvC,KAAC,CAAC,CAAA;IAEF,IAAMqE,KAAK,GAAG,IAAI5H,KAAK,CAAC,IAAI,CAACoD,MAAM,CAACsD,IAAI,CAAC,CAAA;AAEzCzI,IAAAA,CAAC,GAAG,CAAC,CAAA;IAEL,IAAI,CAACmF,MAAM,CAACoB,OAAO,CAAC,UAACjB,IAAI,EAAEvC,GAAG,EAAK;AACjC4G,MAAAA,KAAK,CAAC3J,CAAC,EAAE,CAAC,GAAGiO,aAAa,CAAC,MAAI,CAACxN,IAAI,EAAEsC,GAAG,EAAEuC,IAAI,CAAC,CAAA;AAClD,KAAC,CAAC,CAAA;IAEF,OAAO;AACL2K,MAAAA,OAAO,EAAE;QACPxP,IAAI,EAAE,IAAI,CAACA,IAAI;QACfgG,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBmI,cAAc,EAAE,IAAI,CAACA,cAAAA;OACtB;AACD9M,MAAAA,UAAU,EAAE,IAAI,CAACmR,aAAa,EAAE;AAChCc,MAAAA,KAAK,EAALA,KAAK;AACLpK,MAAAA,KAAK,EAALA,KAAAA;KACD,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA,MANE;EAAA,MAOA,CAAA,QAAA,CAAA,GAAA,SAAA,OAAA,CAAOrE,IAAI,EAAiB;AAAA,IAAA,IAAA,MAAA,GAAA,IAAA,CAAA;IAAA,IAAfmP,KAAK,uEAAG,KAAK,CAAA;AACxB;IACA,IAAInP,IAAI,YAAYgB,KAAK,EAAE;AACzB;AACAhB,MAAAA,IAAI,CAAC0O,WAAW,CAAC,UAAC7G,CAAC,EAAEC,CAAC,EAAK;AACzB,QAAA,IAAIqH,KAAK,EAAE,MAAI,CAACjC,SAAS,CAACrF,CAAC,EAAEC,CAAC,CAAC,CAAC,KAC3B,MAAI,CAACyB,OAAO,CAAC1B,CAAC,EAAEC,CAAC,CAAC,CAAA;AACzB,OAAC,CAAC,CAAA;;AAEF;AACA9H,MAAAA,IAAI,CAAC6D,WAAW,CAAC,UAAC2B,CAAC,EAAEsC,CAAC,EAAEpC,CAAC,EAAEC,CAAC,EAAEyJ,GAAG,EAAEC,GAAG,EAAEvJ,CAAC,EAAK;AAC5C,QAAA,IAAIqJ,KAAK,EAAE;UACT,IAAIrJ,CAAC,EAAE,MAAI,CAACwJ,0BAA0B,CAAC9J,CAAC,EAAEE,CAAC,EAAEC,CAAC,EAAEmC,CAAC,CAAC,CAAC,KAC9C,MAAI,CAACyH,wBAAwB,CAAC/J,CAAC,EAAEE,CAAC,EAAEC,CAAC,EAAEmC,CAAC,CAAC,CAAA;AAChD,SAAC,MAAM;UACL,IAAIhC,CAAC,EAAE,MAAI,CAAC0J,wBAAwB,CAAChK,CAAC,EAAEE,CAAC,EAAEC,CAAC,EAAEmC,CAAC,CAAC,CAAC,KAC5C,MAAI,CAAC2H,sBAAsB,CAACjK,CAAC,EAAEE,CAAC,EAAEC,CAAC,EAAEmC,CAAC,CAAC,CAAA;AAC9C,SAAA;AACF,OAAC,CAAC,CAAA;AAEF,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;IACA,IAAI,CAACpM,aAAa,CAACsE,IAAI,CAAC,EACtB,MAAM,IAAI9C,0BAA0B,CAClC,mGAAmG,CACpG,CAAA;IAEH,IAAI8C,IAAI,CAACxD,UAAU,EAAE;AACnB,MAAA,IAAI,CAACd,aAAa,CAACsE,IAAI,CAACxD,UAAU,CAAC,EACjC,MAAM,IAAIU,0BAA0B,CAClC,6DAA6D,CAC9D,CAAA;AAEH,MAAA,IAAIiS,KAAK,EAAE,IAAI,CAAClB,eAAe,CAACjO,IAAI,CAACxD,UAAU,CAAC,CAAC,KAC5C,IAAI,CAACwR,iBAAiB,CAAChO,IAAI,CAACxD,UAAU,CAAC,CAAA;AAC9C,KAAA;IAEA,IAAI9B,CAAC,EAAEC,CAAC,EAAE6I,IAAI,EAAEmE,IAAI,EAAEpM,IAAI,CAAA;IAE1B,IAAIyE,IAAI,CAACyO,KAAK,EAAE;MACdjL,IAAI,GAAGxD,IAAI,CAACyO,KAAK,CAAA;AAEjB,MAAA,IAAI,CAAChS,KAAK,CAACC,OAAO,CAAC8G,IAAI,CAAC,EACtB,MAAM,IAAItG,0BAA0B,CAClC,kDAAkD,CACnD,CAAA;AAEH,MAAA,KAAKxC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG6I,IAAI,CAAC5I,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AACvCiN,QAAAA,IAAI,GAAGnE,IAAI,CAAC9I,CAAC,CAAC,CAAA;;AAEd;QACAkO,sBAAsB,CAACjB,IAAI,CAAC,CAAA;;AAE5B;AACA,QAAA,IAAA,KAAA,GAA0BA,IAAI;AAAvBlK,UAAAA,GAAG,SAAHA,GAAG;AAAEjB,UAAAA,UAAU,SAAVA,UAAU,CAAA;AAEtB,QAAA,IAAI2S,KAAK,EAAE,IAAI,CAACjC,SAAS,CAACzP,GAAG,EAAEjB,UAAU,CAAC,CAAC,KACtC,IAAI,CAAC+M,OAAO,CAAC9L,GAAG,EAAEjB,UAAU,CAAC,CAAA;AACpC,OAAA;AACF,KAAA;IAEA,IAAIwD,IAAI,CAACqE,KAAK,EAAE;MACd,IAAIqL,mBAAmB,GAAG,KAAK,CAAA;AAE/B,MAAA,IAAI,IAAI,CAACvU,IAAI,KAAK,YAAY,EAAE;AAC9BuU,QAAAA,mBAAmB,GAAG,IAAI,CAAA;AAC5B,OAAA;MAEAlM,IAAI,GAAGxD,IAAI,CAACqE,KAAK,CAAA;AAEjB,MAAA,IAAI,CAAC5H,KAAK,CAACC,OAAO,CAAC8G,IAAI,CAAC,EACtB,MAAM,IAAItG,0BAA0B,CAClC,kDAAkD,CACnD,CAAA;AAEH,MAAA,KAAKxC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG6I,IAAI,CAAC5I,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AACvCa,QAAAA,IAAI,GAAGiI,IAAI,CAAC9I,CAAC,CAAC,CAAA;;AAEd;QACAmO,sBAAsB,CAACtN,IAAI,CAAC,CAAA;;AAE5B;AACA,QAAA,IAAA,KAAA,GAKIA,IAAI;AAJNL,UAAAA,MAAM,SAANA,MAAM;AACNV,UAAAA,MAAM,SAANA,MAAM;AACNgC,UAAAA,WAAU,SAAVA,UAAU;AAAA,UAAA,gBAAA,GAAA,KAAA,CACVf,UAAU;AAAVA,UAAAA,UAAU,iCAAGiU,mBAAmB,GAAA,gBAAA,CAAA;AAGlC,QAAA,IAAIvQ,MAAM,GAAA,KAAA,CAAA,CAAA;QAEV,IAAI,KAAK,IAAI5D,IAAI,EAAE;UACjB4D,MAAM,GAAGgQ,KAAK,GACV1T,UAAU,GACR,IAAI,CAAC6T,0BAA0B,GAC/B,IAAI,CAACC,wBAAwB,GAC/B9T,UAAU,GACV,IAAI,CAAC+T,wBAAwB,GAC7B,IAAI,CAACC,sBAAsB,CAAA;AAE/BtQ,UAAAA,MAAM,CAACkG,IAAI,CAAC,IAAI,EAAE9J,IAAI,CAACkC,GAAG,EAAEvC,MAAM,EAAEV,MAAM,EAAEgC,WAAU,CAAC,CAAA;AACzD,SAAC,MAAM;UACL2C,MAAM,GAAGgQ,KAAK,GACV1T,UAAU,GACR,IAAI,CAACkU,mBAAmB,GACxB,IAAI,CAACC,iBAAiB,GACxBnU,UAAU,GACV,IAAI,CAACoU,iBAAiB,GACtB,IAAI,CAACC,eAAe,CAAA;UAExB3Q,MAAM,CAACkG,IAAI,CAAC,IAAI,EAAEnK,MAAM,EAAEV,MAAM,EAAEgC,WAAU,CAAC,CAAA;AAC/C,SAAA;AACF,OAAA;AACF,KAAA;AAEA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA,MANE;AAAA,EAAA,MAAA,CAOAuT,QAAQ,GAAR,SAASpF,QAAAA,CAAAA,OAAO,EAAE;AAChB,IAAA,IAAM1P,KAAK,GAAG,IAAI+F,KAAK,CAAClG,MAAM,CAAC,EAAE,EAAE,IAAI,CAACoQ,QAAQ,EAAEP,OAAO,CAAC,CAAC,CAAA;AAC3D1P,IAAAA,KAAK,CAAC+S,iBAAiB,CAAClT,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC6S,aAAa,EAAE,CAAC,CAAC,CAAA;AACzD,IAAA,OAAO1S,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA,MANE;AAAA,EAAA,MAAA,CAOA+U,SAAS,GAAT,SAAUrF,SAAAA,CAAAA,OAAO,EAAE;AACjB,IAAA,IAAM1P,KAAK,GAAG,IAAI,CAAC8U,QAAQ,CAACpF,OAAO,CAAC,CAAA;IAEpC,IAAI,CAACtP,MAAM,CAAC4F,OAAO,CAAC,UAACxB,QAAQ,EAAEhC,GAAG,EAAK;MACrC,IAAMjB,UAAU,GAAG1B,MAAM,CAAC,EAAE,EAAE2E,QAAQ,CAACjD,UAAU,CAAC,CAAA;;AAElD;MACAiD,QAAQ,GAAG,IAAIxE,KAAK,CAACuO,aAAa,CAAC/L,GAAG,EAAEjB,UAAU,CAAC,CAAA;MACnDvB,KAAK,CAACI,MAAM,CAAC2L,GAAG,CAACvJ,GAAG,EAAEgC,QAAQ,CAAC,CAAA;AACjC,KAAC,CAAC,CAAA;AAEF,IAAA,OAAOxE,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA,MALE;AAAA,EAAA,MAAA,CAMAgV,IAAI,GAAJ,SAAKtF,IAAAA,CAAAA,OAAO,EAAE;AACZA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAAE,CAAA;AAEvB,IAAA,IACE,OAAOA,OAAO,CAACxP,IAAI,KAAK,QAAQ,IAChCwP,OAAO,CAACxP,IAAI,KAAK,IAAI,CAACA,IAAI,IAC1BwP,OAAO,CAACxP,IAAI,KAAK,OAAO,EAExB,MAAM,IAAIoC,eAAe,CAAA,wDAAA,CAAA,MAAA,CACiC,IAAI,CAACpC,IAAI,EAAA,eAAA,CAAA,CAAA,MAAA,CAAcwP,OAAO,CAACxP,IAAI,EAC5F,wEAAA,CAAA,CAAA,CAAA;IAEH,IACE,OAAOwP,OAAO,CAACxJ,KAAK,KAAK,SAAS,IAClCwJ,OAAO,CAACxJ,KAAK,KAAK,IAAI,CAACA,KAAK,IAC5BwJ,OAAO,CAACxJ,KAAK,KAAK,IAAI,EAEtB,MAAM,IAAI5D,eAAe,CACvB,iKAAiK,CAClK,CAAA;IAEH,IACE,OAAOoN,OAAO,CAACrB,cAAc,KAAK,SAAS,IAC3CqB,OAAO,CAACrB,cAAc,KAAK,IAAI,CAACA,cAAc,IAC9CqB,OAAO,CAACrB,cAAc,KAAK,IAAI,EAE/B,MAAM,IAAI/L,eAAe,CACvB,0KAA0K,CAC3K,CAAA;AAEH,IAAA,IAAMtC,KAAK,GAAG,IAAI,CAAC+U,SAAS,CAACrF,OAAO,CAAC,CAAA;AAErC,IAAA,IAAMjH,QAAQ,GAAG,IAAI,CAAC7D,MAAM,CAAC8D,MAAM,EAAE,CAAA;IAErC,IAAIC,IAAI,EAAElE,QAAQ,CAAA;AAElB,IAAA,OAASkE,IAAI,GAAGF,QAAQ,CAAChF,IAAI,EAAE,EAAGkF,IAAI,CAAClB,IAAI,KAAK,IAAI,EAAG;MACrDhD,QAAQ,GAAGkE,IAAI,CAACjI,KAAK,CAAA;;AAErB;AACA+N,MAAAA,OAAO,CACLzO,KAAK,EACL,MAAM,EACN,KAAK,EACLyE,QAAQ,CAACjE,UAAU,EACnBiE,QAAQ,CAACjC,GAAG,EACZiC,QAAQ,CAACxE,MAAM,CAACuC,GAAG,EACnBiC,QAAQ,CAAClF,MAAM,CAACiD,GAAG,EACnB3C,MAAM,CAAC,EAAE,EAAE4E,QAAQ,CAAClD,UAAU,CAAC,CAChC,CAAA;AACH,KAAA;AAEA,IAAA,OAAOvB,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA,MAJE;EAAA,MAKAiV,CAAAA,MAAM,GAAN,SAAS,MAAA,GAAA;IACP,OAAO,IAAI,UAAO,EAAE,CAAA;AACtB,GAAA;;AAEA;AACF;AACA,MAFE;EAAA,MAGAC,CAAAA,QAAQ,GAAR,SAAW,QAAA,GAAA;AACT,IAAA,OAAO,gBAAgB,CAAA;AACzB,GAAA;;AAEA;AACF;AACA;AACA;AACA,MAJE;EAAA,MAKAC,CAAAA,OAAO,GAAP,SAAU,OAAA,GAAA;AAAA,IAAA,IAAA,MAAA,GAAA,IAAA,CAAA;IACR,IAAM3B,KAAK,GAAG,EAAE,CAAA;IAChB,IAAI,CAACpT,MAAM,CAAC4F,OAAO,CAAC,UAACjB,IAAI,EAAEvC,GAAG,EAAK;AACjCgR,MAAAA,KAAK,CAAChR,GAAG,CAAC,GAAGuC,IAAI,CAACxD,UAAU,CAAA;AAC9B,KAAC,CAAC,CAAA;IAEF,IAAM6H,KAAK,GAAG,EAAE;MACdgM,UAAU,GAAG,EAAE,CAAA;IAEjB,IAAI,CAACxQ,MAAM,CAACoB,OAAO,CAAC,UAACjB,IAAI,EAAEvC,GAAG,EAAK;MACjC,IAAMsE,SAAS,GAAG/B,IAAI,CAACvE,UAAU,GAAG,IAAI,GAAG,IAAI,CAAA;MAE/C,IAAI6U,KAAK,GAAG,EAAE,CAAA;AAEd,MAAA,IAAIpV,MAAM,GAAG8E,IAAI,CAAC9E,MAAM,CAACuC,GAAG,CAAA;AAC5B,MAAA,IAAIjD,MAAM,GAAGwF,IAAI,CAACxF,MAAM,CAACiD,GAAG,CAAA;AAC5B,MAAA,IAAI8S,GAAG,CAAA;AAEP,MAAA,IAAIvQ,IAAI,CAACvE,UAAU,IAAIP,MAAM,GAAGV,MAAM,EAAE;AACtC+V,QAAAA,GAAG,GAAGrV,MAAM,CAAA;AACZA,QAAAA,MAAM,GAAGV,MAAM,CAAA;AACfA,QAAAA,MAAM,GAAG+V,GAAG,CAAA;AACd,OAAA;AAEA,MAAA,IAAMC,IAAI,GAAOtV,GAAAA,CAAAA,MAAAA,CAAAA,MAAM,cAAI6G,SAAS,EAAA,GAAA,CAAA,CAAA,MAAA,CAAIvH,MAAM,EAAG,GAAA,CAAA,CAAA;AAEjD,MAAA,IAAI,CAACiD,GAAG,CAACgT,UAAU,CAAC,OAAO,CAAC,EAAE;QAC5BH,KAAK,IAAA,GAAA,CAAA,MAAA,CAAQ7S,GAAG,EAAK,KAAA,CAAA,CAAA;AACvB,OAAC,MAAM,IAAI,MAAI,CAAC0D,KAAK,EAAE;AACrB,QAAA,IAAI,OAAOkP,UAAU,CAACG,IAAI,CAAC,KAAK,WAAW,EAAE;AAC3CH,UAAAA,UAAU,CAACG,IAAI,CAAC,GAAG,CAAC,CAAA;AACtB,SAAC,MAAM;UACLH,UAAU,CAACG,IAAI,CAAC,EAAE,CAAA;AACpB,SAAA;AAEAF,QAAAA,KAAK,IAAOD,EAAAA,CAAAA,MAAAA,CAAAA,UAAU,CAACG,IAAI,CAAC,EAAI,IAAA,CAAA,CAAA;AAClC,OAAA;AAEAF,MAAAA,KAAK,IAAIE,IAAI,CAAA;AAEbnM,MAAAA,KAAK,CAACiM,KAAK,CAAC,GAAGtQ,IAAI,CAACxD,UAAU,CAAA;AAChC,KAAC,CAAC,CAAA;IAEF,IAAMkU,KAAK,GAAG,EAAE,CAAA;AAEhB,IAAA,KAAK,IAAM7V,CAAC,IAAI,IAAI,EAAE;AACpB,MAAA,IACE,IAAI,CAACsF,cAAc,CAACtF,CAAC,CAAC,IACtB,CAACoO,aAAa,CAACnE,GAAG,CAACjK,CAAC,CAAC,IACrB,OAAO,IAAI,CAACA,CAAC,CAAC,KAAK,UAAU,IAC7B,OAAOA,CAAAA,CAAC,MAAK,QAAQ,EAErB6V,KAAK,CAAC7V,CAAC,CAAC,GAAG,IAAI,CAACA,CAAC,CAAC,CAAA;AACtB,KAAA;AAEA6V,IAAAA,KAAK,CAAClU,UAAU,GAAG,IAAI,CAACkR,WAAW,CAAA;IACnCgD,KAAK,CAACjC,KAAK,GAAGA,KAAK,CAAA;IACnBiC,KAAK,CAACrM,KAAK,GAAGA,KAAK,CAAA;IAEnBvI,eAAe,CAAC4U,KAAK,EAAE,aAAa,EAAE,IAAI,CAACrT,WAAW,CAAC,CAAA;AAEvD,IAAA,OAAOqT,KAAK,CAAA;GACb,CAAA;AAAA,EAAA,OAAA,KAAA,CAAA;AAAA,CAAA,CAjxEgCC,mBAAY,EAAA;AA+xE/C,IAAI,OAAOC,MAAM,KAAK,WAAW,EAC/B5P,KAAK,CAAC5D,SAAS,CAACwT,MAAM,OAAI,CAAC,4BAA4B,CAAC,CAAC,GACvD5P,KAAK,CAAC5D,SAAS,CAACgT,OAAO,CAAA;;AAE3B;AACA;AACA;AACAlH,gBAAgB,CAACjI,OAAO,CAAC,UAAA9B,MAAM,EAAI;EACjC,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC8B,OAAO,CAAC,UAAAkI,IAAI,EAAI;AACzC,IAAA,IAAMpN,IAAI,GAAGoD,MAAM,CAACpD,IAAI,CAACoN,IAAI,CAAC,CAAA;IAC9B,IAAMjF,EAAE,GAAGiF,IAAI,KAAK,KAAK,GAAGO,OAAO,GAAGS,SAAS,CAAA;IAE/C,IAAIhL,MAAM,CAACiK,WAAW,EAAE;AACtBpI,MAAAA,KAAK,CAAC5D,SAAS,CAACrB,IAAI,CAAC,GAAG,UAAUb,MAAM,EAAEV,MAAM,EAAEgC,UAAU,EAAE;AAC5D,QAAA,OAAO0H,EAAE,CACP,IAAI,EACJnI,IAAI,EACJ,IAAI,EACJ,CAACoD,MAAM,CAAChE,IAAI,IAAI,IAAI,CAACA,IAAI,MAAM,YAAY,EAC3C,IAAI,EACJD,MAAM,EACNV,MAAM,EACNgC,UAAU,EACV2M,IAAI,KAAK,QAAQ,CAClB,CAAA;OACF,CAAA;AACH,KAAC,MAAM;AACLnI,MAAAA,KAAK,CAAC5D,SAAS,CAACrB,IAAI,CAAC,GAAG,UAAUR,IAAI,EAAEL,MAAM,EAAEV,MAAM,EAAEgC,UAAU,EAAE;AAClE,QAAA,OAAO0H,EAAE,CACP,IAAI,EACJnI,IAAI,EACJ,KAAK,EACL,CAACoD,MAAM,CAAChE,IAAI,IAAI,IAAI,CAACA,IAAI,MAAM,YAAY,EAC3CI,IAAI,EACJL,MAAM,EACNV,MAAM,EACNgC,UAAU,EACV2M,IAAI,KAAK,QAAQ,CAClB,CAAA;OACF,CAAA;AACH,KAAA;AACF,GAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;;AAEF;AACA;AACA;AACApI,2BAA2B,CAACC,KAAK,CAAC,CAAA;AAClCa,2BAA2B,CAACb,KAAK,CAAC,CAAA;;AAElC;AACA;AACA;AACA0F,0BAA0B,CAAC1F,KAAK,CAAC,CAAA;;AAEjC;AACA;AACA;AACAoH,8BAA8B,CAACpH,KAAK,CAAC;;ACr6FrC;AACA;AACA;AAFA,IAGM6P,aAAa,gBAAA,UAAA,MAAA,EAAA;AAAA,EAAA,cAAA,CAAA,aAAA,EAAA,MAAA,CAAA,CAAA;AACjB,EAAA,SAAA,aAAA,CAAYlG,OAAO,EAAE;IACnB,IAAMmG,YAAY,GAAGhW,MAAM,CAAC;AAACK,MAAAA,IAAI,EAAE,UAAA;KAAW,EAAEwP,OAAO,CAAC,CAAA;AAExD,IAAA,IAAI,OAAO,IAAImG,YAAY,IAAIA,YAAY,CAAC3P,KAAK,KAAK,KAAK,EACzD,MAAM,IAAIjE,0BAA0B,CAClC,8FAA8F,CAC/F,CAAA;AAEH,IAAA,IAAI4T,YAAY,CAAC3V,IAAI,KAAK,UAAU,EAClC,MAAM,IAAI+B,0BAA0B,CAClC,oCAAoC,GAClC4T,YAAY,CAAC3V,IAAI,GACjB,0BAA0B,CAC7B,CAAA;IAAC,OAEJ,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM2V,YAAY,CAAC,IAAA,IAAA,CAAA;AACrB,GAAA;AAAC,EAAA,OAAA,aAAA,CAAA;AAAA,CAAA,CAjByB9P,KAAK,CAAA,CAAA;AAAA,IAmB3B+P,eAAe,gBAAA,UAAA,OAAA,EAAA;AAAA,EAAA,cAAA,CAAA,eAAA,EAAA,OAAA,CAAA,CAAA;AACnB,EAAA,SAAA,eAAA,CAAYpG,OAAO,EAAE;IACnB,IAAMmG,YAAY,GAAGhW,MAAM,CAAC;AAACK,MAAAA,IAAI,EAAE,YAAA;KAAa,EAAEwP,OAAO,CAAC,CAAA;AAE1D,IAAA,IAAI,OAAO,IAAImG,YAAY,IAAIA,YAAY,CAAC3P,KAAK,KAAK,KAAK,EACzD,MAAM,IAAIjE,0BAA0B,CAClC,gGAAgG,CACjG,CAAA;AAEH,IAAA,IAAI4T,YAAY,CAAC3V,IAAI,KAAK,YAAY,EACpC,MAAM,IAAI+B,0BAA0B,CAClC,sCAAsC,GACpC4T,YAAY,CAAC3V,IAAI,GACjB,0BAA0B,CAC7B,CAAA;IAAC,OAEJ,OAAA,CAAA,IAAA,CAAA,IAAA,EAAM2V,YAAY,CAAC,IAAA,IAAA,CAAA;AACrB,GAAA;AAAC,EAAA,OAAA,eAAA,CAAA;AAAA,CAAA,CAjB2B9P,KAAK,CAAA,CAAA;AAAA,IAmB7BgQ,UAAU,gBAAA,UAAA,OAAA,EAAA;AAAA,EAAA,cAAA,CAAA,UAAA,EAAA,OAAA,CAAA,CAAA;AACd,EAAA,SAAA,UAAA,CAAYrG,OAAO,EAAE;IACnB,IAAMmG,YAAY,GAAGhW,MAAM,CAAC;AAACqG,MAAAA,KAAK,EAAE,IAAA;KAAK,EAAEwJ,OAAO,CAAC,CAAA;AAEnD,IAAA,IAAI,OAAO,IAAImG,YAAY,IAAIA,YAAY,CAAC3P,KAAK,KAAK,IAAI,EACxD,MAAM,IAAIjE,0BAA0B,CAClC,4FAA4F,CAC7F,CAAA;IAAC,OAEJ,OAAA,CAAA,IAAA,CAAA,IAAA,EAAM4T,YAAY,CAAC,IAAA,IAAA,CAAA;AACrB,GAAA;AAAC,EAAA,OAAA,UAAA,CAAA;AAAA,CAAA,CAVsB9P,KAAK,CAAA,CAAA;AAAA,IAYxBiQ,kBAAkB,gBAAA,UAAA,OAAA,EAAA;AAAA,EAAA,cAAA,CAAA,kBAAA,EAAA,OAAA,CAAA,CAAA;AACtB,EAAA,SAAA,kBAAA,CAAYtG,OAAO,EAAE;IACnB,IAAMmG,YAAY,GAAGhW,MAAM,CAAC;AAACK,MAAAA,IAAI,EAAE,UAAU;AAAEgG,MAAAA,KAAK,EAAE,IAAA;KAAK,EAAEwJ,OAAO,CAAC,CAAA;AAErE,IAAA,IAAI,OAAO,IAAImG,YAAY,IAAIA,YAAY,CAAC3P,KAAK,KAAK,IAAI,EACxD,MAAM,IAAIjE,0BAA0B,CAClC,oGAAoG,CACrG,CAAA;AAEH,IAAA,IAAI4T,YAAY,CAAC3V,IAAI,KAAK,UAAU,EAClC,MAAM,IAAI+B,0BAA0B,CAClC,yCAAyC,GACvC4T,YAAY,CAAC3V,IAAI,GACjB,0BAA0B,CAC7B,CAAA;IAAC,OAEJ,OAAA,CAAA,IAAA,CAAA,IAAA,EAAM2V,YAAY,CAAC,IAAA,IAAA,CAAA;AACrB,GAAA;AAAC,EAAA,OAAA,kBAAA,CAAA;AAAA,CAAA,CAjB8B9P,KAAK,CAAA,CAAA;AAAA,IAmBhCkQ,oBAAoB,gBAAA,UAAA,OAAA,EAAA;AAAA,EAAA,cAAA,CAAA,oBAAA,EAAA,OAAA,CAAA,CAAA;AACxB,EAAA,SAAA,oBAAA,CAAYvG,OAAO,EAAE;IACnB,IAAMmG,YAAY,GAAGhW,MAAM,CAAC;AAACK,MAAAA,IAAI,EAAE,YAAY;AAAEgG,MAAAA,KAAK,EAAE,IAAA;KAAK,EAAEwJ,OAAO,CAAC,CAAA;AAEvE,IAAA,IAAI,OAAO,IAAImG,YAAY,IAAIA,YAAY,CAAC3P,KAAK,KAAK,IAAI,EACxD,MAAM,IAAIjE,0BAA0B,CAClC,sGAAsG,CACvG,CAAA;AAEH,IAAA,IAAI4T,YAAY,CAAC3V,IAAI,KAAK,YAAY,EACpC,MAAM,IAAI+B,0BAA0B,CAClC,2CAA2C,GACzC4T,YAAY,CAAC3V,IAAI,GACjB,0BAA0B,CAC7B,CAAA;IAAC,OAEJ,OAAA,CAAA,IAAA,CAAA,IAAA,EAAM2V,YAAY,CAAC,IAAA,IAAA,CAAA;AACrB,GAAA;AAAC,EAAA,OAAA,oBAAA,CAAA;AAAA,CAAA,CAjBgC9P,KAAK,CAoBxC,CAAA;AACA;AACA;AACA,SAASmQ,sBAAsB,CAACpR,KAAK,EAAE;AACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACEA,EAAAA,KAAK,CAACqD,IAAI,GAAG,UAAUpD,IAAI,EAAE2K,OAAO,EAAE;AACpC;AACA,IAAA,IAAMmG,YAAY,GAAGhW,MAAM,CAAC,EAAE,EAAEkF,IAAI,CAAC2K,OAAO,EAAEA,OAAO,CAAC,CAAA;AAEtD,IAAA,IAAMyG,QAAQ,GAAG,IAAIrR,KAAK,CAAC+Q,YAAY,CAAC,CAAA;IACxCM,QAAQ,CAAA,QAAA,CAAO,CAACpR,IAAI,CAAC,CAAA;AAErB,IAAA,OAAOoR,QAAQ,CAAA;GAChB,CAAA;AACH,CAAA;AAEAD,sBAAsB,CAACnQ,KAAK,CAAC,CAAA;AAC7BmQ,sBAAsB,CAACN,aAAa,CAAC,CAAA;AACrCM,sBAAsB,CAACJ,eAAe,CAAC,CAAA;AACvCI,sBAAsB,CAACH,UAAU,CAAC,CAAA;AAClCG,sBAAsB,CAACF,kBAAkB,CAAC,CAAA;AAC1CE,sBAAsB,CAACD,oBAAoB,CAAC,CAAA;AAE5ClQ,KAAK,CAACA,KAAK,GAAGA,KAAK,CAAA;AACnBA,KAAK,CAAC6P,aAAa,GAAGA,aAAa,CAAA;AACnC7P,KAAK,CAAC+P,eAAe,GAAGA,eAAe,CAAA;AACvC/P,KAAK,CAACgQ,UAAU,GAAGA,UAAU,CAAA;AAC7BhQ,KAAK,CAACiQ,kBAAkB,GAAGA,kBAAkB,CAAA;AAC7CjQ,KAAK,CAACkQ,oBAAoB,GAAGA,oBAAoB,CAAA;AAEjDlQ,KAAK,CAAC9D,0BAA0B,GAAGA,0BAA0B,CAAA;AAC7D8D,KAAK,CAAC1D,kBAAkB,GAAGA,kBAAkB,CAAA;AAC7C0D,KAAK,CAACzD,eAAe,GAAGA,eAAe;;AClJvC;AACA;AACA;AACA;AACA;AACA;;;;"}